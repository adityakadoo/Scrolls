<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scrolls</title><link>https://adityakadoo.github.io/Scrolls/</link><description>Recent content on Scrolls</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>aditya1449kadoo@gmail.com (Aditya Kadoo)</managingEditor><webMaster>aditya1449kadoo@gmail.com (Aditya Kadoo)</webMaster><lastBuildDate>Thu, 26 Oct 2023 16:59:53 +0530</lastBuildDate><atom:link href="https://adityakadoo.github.io/Scrolls/index.xml" rel="self" type="application/rss+xml"/><item><title>Assignment 4</title><link>https://adityakadoo.github.io/Scrolls/courses/assignment_4/</link><pubDate>Thu, 26 Oct 2023 16:59:53 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/assignment_4/</guid><description>&lt;h2 id="problem-1">Problem 1&lt;/h2>
&lt;h3 id="orl-dataset-recognition">ORL Dataset recognition&lt;/h3>
&lt;p>Graphs of recognition rates for different values of $k$ (principal components).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Eigen-decomposition&lt;/th>
&lt;th>Singular Value Decomposition&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="images/ORL-PCA.png" alt="eig-1">&lt;/td>
&lt;td>&lt;img src="images/ORL-PCA-without-ticks-SVD.png" alt="svd-1">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="yale-dataset-recognition">Yale Dataset recognition&lt;/h3>
&lt;p>Graphs of recognition rates for different values of $k$ (principal components).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>All eigen components&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="images/Yale-PCA.png" alt="eig-1">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>All but top 3 eigen components&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="images/Yale-PCA-illum.png" alt="svd-1">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="face-reconstruction">Face Reconstruction&lt;/h3>
&lt;p>Face reconstruction done on the first image of first subject in ORL dataset.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;th>-&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="images/Reconstructed-Image-k-2.png" alt="a">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-10.png" alt="b">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-20.png" alt="c">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="images/Reconstructed-Image-k-50.png" alt="d">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-75.png" alt="e">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-100.png" alt="f">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="images/Reconstructed-Image-k-125.png" alt="g">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-150.png" alt="h">&lt;/td>
&lt;td>&lt;img src="images/Reconstructed-Image-k-175.png" alt="i">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="eigenfaces">Eigenfaces&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Top 25 eigenfaces of ORL dataset&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="images/ORL-PCA-EigenFaces.png" alt="eigenfaces">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="problem-2">Problem 2&lt;/h2>
&lt;h3 id="proposed-mechanism">Proposed Mechanism&lt;/h3>
&lt;blockquote>
&lt;p>We compare the test images with all 6 images of each person (32 in total) in the training dataset. This comparison is done by taking the average of squared differences of eigen-coefficients for the test image and the 6 images of each person. If the least of all these 32 values is more than a threshold, we mark that the test person has no other photo in the training data(i.e. we mark it NEGATIVELY).&lt;/p>
&lt;/blockquote>
&lt;h3 id="results">Results&lt;/h3>
&lt;p>For K = 10 and cutoff = 100,&lt;/p>
&lt;ul>
&lt;li>False Positives: 16.875%&lt;/li>
&lt;li>False Negatives: 10%&lt;/li>
&lt;/ul>
&lt;h2 id="problem-3">Problem 3&lt;/h2>
&lt;p>We have to find the unit vector $f\in\R^d$ that maximises $f^TCf$ such that $f$ is perpendicular to $e$. Thus we need to maximise the following,
$$
\ \\
f^TCf - \lambda(f^Tf-1) - \mu(f^Te-1)\\
$$
Differentiating w.r.t. $\lambda$ gives $f^Tf=1$ and w.r.t. $\mu$ gives $f^Te=1$.&lt;/p>
&lt;p>Differentiating w.r.t. $f$ gives,
$$
2f^TC-2\lambda f^T-\mu e^T=0
$$
On post multiplying by $e$ vector,
$$
2f^TCe-2\lambda f^Te-\mu e^Te=0\\
\ \\
\implies 2\lambda_e f^Te-0-\mu = 0\\
\ \\
\implies 0-\mu=0\\
\ \\
\implies\mu=0
$$
Substituting this back in the above equation,
$$
\ \\
\therefore f^TC=\lambda f^T\\
\ \\
\implies C^T f=\lambda f\\
\ \\
\implies Cf=\lambda f\\
\ \\
$$
Therefore $f$ is an eigenvector. Putting this in the original objective,
$$
f^T\lambda f = \lambda
$$
Hence to further maximise this, $f$ must be the eigenvector with the $2^\text{nd}$ largest eigenvalue.&lt;/p>
&lt;p>To find unit vector $g$ that maximises $g^TCg$ subject to $g$ being perpendicular to both $f$ and $e$, we should maximise the following,
$$
g^TCg-\lambda(g^Tg-1)-\mu_1(g^Te)-\mu_2(g^Tf)
$$
On differentiation w.r.t. $\lambda,\mu_1,\mu_2$ we get,
$$
\ \\
g^Tg=1;\ \ g^Te=0;\ \ g^Tf=0
$$
Differentiating w.r.t. $g$ given,
$$
\ \\
2g^TC-2\lambda g^T-\mu_1e^T-\mu_2f^T=0
$$
On post multiplying by $e$,
$$
\ \\
2g^TCe-2\lambda g^Te-\mu_1e^Te-\mu_2f^Te=0\\
\ \\
\implies 2\lambda_e g^Te-0-\mu_1-0=0\\
\ \\
\implies \mu_1=0
$$
On post multiplying by $f$,
$$
\ \\
2g^TCf-2\lambda g^Tf-\mu_1e^Tf-\mu_2f^Tf=0\\
\ \\
\implies 2\lambda_f g^Tf-0-0-\mu_2=0\\
\ \\
\implies \mu_2=0
$$
Putting these values back into the above equation,
$$
2g^TC-2\lambda g^T=0\\
\ \\
\implies g^TC=\lambda g^T\\
\ \\
\implies C^Tg=\lambda g\\
\ \\
\implies Cg=\lambda g
$$
Therefore $g$ is also an eigenvector with eigenvalue as the Lagrange multiplier $\lambda$. Putting this in the original objective,
$$
g^TCg = \lambda g^Tg=\lambda
$$
To maximise this $g$ must be the eigenvector with $3^\text{rd}$ largest eigenvalue.&lt;/p>
&lt;h2 id="problem-4">Problem 4&lt;/h2>
&lt;p>a) Covariance matrix of a dataset $\{x_i\in\R^d\}_{i=1}^N$ is defined as,&lt;/p>
&lt;p>$$
C = \sum_{i=1}^N(x_i-\bar x)(x_i-\bar x)^T\\
\ \\
C^T = \left(\sum_{i=1}^N(x_i-\bar x)(x_i-\bar x)^T\right)^T\\
\ \\
= \sum_{i=1}^N\left((x_i-\bar x)(x_i-\bar x)^T\right)^T\\
\ \\
= \sum_{i=1}^N((x_i-\bar x)^T)^T(x_i-\bar x)^T\\
\ \\
= \sum_{i=1}^N(x_i-\bar x)(x_i-\bar x)^T\\
\ \\
\therefore C^T=C
$$
Hence C is symmetric.&lt;/p>
&lt;p>For a vector $v\in\R^d$,
$$
v^TCv=v^T\left(\sum_{i=1}^N(x_i-\bar x)(x_i-\bar x)^T\right)v\\
\ \\
= \sum_{i=1}^Nv^T(x_i-\bar x)(x_i-\bar x)^Tv\\
\ \\
= \sum_{i=1}^N((x_i-\bar x)^Tv)^T(x_i-\bar x)^Tv\\
\ \\
= \sum_{i=1}^N\|(x_i-\bar x)^Tv\|^2\ge 0\\
\ \\
\implies v^TCv\ge 0
$$
Hence $C$ is positive semi-definite.&lt;/p>
&lt;p>b) Let $A$ be a symmetric matrix with eigenvectors $e_1$ and $e_2$ and the corresponding distinct eigenvalues $\lambda_1$ and $\lambda_2$.
$$
Ae_2=\lambda_2e_2\\
\ \\
\implies e_1^TAe_2=e_1^T\lambda_2e_2\\
\ \\
\implies e_2^TA^Te_1=\lambda_2e_2^Te_1\\
\ \\
\implies e_2^TAe_1=\lambda_2e_2^Te_1\\
\ \\
\implies e_2^T\lambda_1e_1=\lambda_2e_2^Te_1\\
\ \\
\implies (\lambda_1-\lambda_2)e_2^Te_1=0\\
\ \\
\implies e_2^Te_1=0
$$
Hence each pair of eigenvectors of a symmetric matrix with distinct eigenvalues are orthogonal.&lt;/p>
&lt;p>c) Assuming eigenvector are iterated in descending order of eigenvalues, $\forall i\in\{1,2,\dots,N\}$,
$$
\tilde x_i=\bar x+\sum_{l=1}^kV_l\alpha_{il}
$$
Since eigenvector of covariance matrix form an orthonormal basis, we can write,
$$
x_i=\bar x+\sum_{l=1}^dV_l\alpha_{il}\\
\therefore x_i-\tilde x_i = \sum_{l=k+1}^dV_l\alpha_{il}\\
\implies V_m^T(x_i-\tilde x_i) = \sum_{l=k+1}^dV_m^TV_l\alpha_{il} = \alpha_{im}
$$
This hold $\forall m\in\{k+1,\dots,d\}$. Substituting this back in,
$$
x_i-\tilde x_i = \sum_{l=k+1}^d(V_l^T(x_i-\tilde x_i))V_l\\
\ \\
\begin{align*}
\implies \|x_i-\tilde x_i\|^2_2 &amp;amp; = \|\sum_{l=k+1}^d(V_l^T(x_i-\tilde x_i))V_l\|^2_2\\
&amp;amp; = \sum_{l=k+1}^d(V_l^T(x_i-\tilde x_i))^2\\
&amp;amp; = \sum_{l=k+1}^d(V_l^T(x_i-\tilde x_i))\cdot((x_i-\tilde x_i)^TV_l)\\
&amp;amp; = \sum_{l=k+1}^dV_l^T(x_i-\tilde x_i)(x_i-\tilde x_i)^TV_l\\
\ \\
\therefore \frac{1}{N}\sum_{i=1}^N\|x_i-\tilde x_i\|^2_2 &amp;amp; = \frac{1}{N}\sum_{l=k+1}^dV_l^T\left(\sum_{i=1}^N(x_i-\tilde x_i)(x_i-\tilde x_i)^T\right)V_l\\
&amp;amp; = \frac{1}{N}\sum_{l=k+1}^dV_l^TCV_l
= \frac{1}{N}\sum_{l=k+1}^d\lambda_lV_l^TV_l\\
&amp;amp; = \frac{1}{N}\sum_{l=k+1}^d\lambda_l
\end{align*}\\
$$
d) If we sample a dataset $\{x_1^{(i)},x_2^{(i)}\}_{i=1}^N$ from the given distributions, we can write the covariance matrix as,&lt;/p>
&lt;!-- $$
C = \frac{1}{N}\sum_{i=0}^N\begin{bmatrix}
(x_1^{(i)}-\bar x_1)^2 &amp; (x_1^{(i)}-\bar x_1)\cdot(x_2^{(i)}-\bar x_2)\\\
(x_2^{(i)}-\bar x_2)\cdot(x_1^{(i)}-\bar x_1) &amp; (x_2^{(i)}-\bar x_2)^2\\\
\end{bmatrix}
$$ -->
&lt;p>$$
C = \begin{bmatrix}
\hat\sigma_1^2 &amp;amp; \hat\sigma_{12}^2\\
\hat\sigma_{2 1}^2 &amp;amp; \hat\sigma_2^2\\
\end{bmatrix}
$$&lt;/p>
&lt;p>Due to law of large numbers,
$$
\lim_{N\to\infty}C=\begin{bmatrix}
100 &amp;amp; 0\\
0 &amp;amp; 1\\
\end{bmatrix}
$$&lt;/p>
&lt;p>The eigenvalues of this matrix are 100 and 1 with corresponding eigenvectors $[1,0]^T$ and $[0,1]^T$. Since 100 is much larger than 1, the principal component is along $[1,0]^T$.&lt;/p>
&lt;p>If $X_1$ and $X_2$ had exactly same $\sigma^2$,
$$
C=\begin{bmatrix}
\sigma^2 &amp;amp; 0\\
0 &amp;amp; \sigma^2\\
\end{bmatrix}
$$
Any non-zero vector is an eigenvector of this matrix with eigenvalue $\sigma^2$. Hence there is no principal component.&lt;/p>
&lt;h2 id="problem-5">Problem 5&lt;/h2>
&lt;p>a) For any matrix $A_{m\times n}$ with singular value decomposition as,
$$
A = USV^T\\
\ \\
\begin{align*}
AA^T &amp;amp; = USV^T(USV^T)^T\\
&amp;amp; = USV^TVS^TU^T\\
&amp;amp; = USS^TU^T
\end{align*}
$$
As we know $U$ and $V$ are singular and $S$ is diagonal,
$$
AA^TU = USS^T
$$&lt;/p>
&lt;p>If we take the $i^{\text{th}}$ column of this equation,
$$
AA^Tu_i = u_is_i^2
$$&lt;/p>
&lt;p>This means $u_i$&amp;rsquo;s are the eigenvectors of $AA^T$ with corresponding eigenvalues $s_i^2$.&lt;/p>
&lt;p>$$
A^TA(A^Tu_i) = (A^Tu_i)s_i^2\\
\ \\
A^TAw_i = w_is_i^2\\
$$
Therefore $s_i^2$ is also an eigenvalue of $A^TA$. Hence proved that eigenvalues of $AA^T$ and $A^TA$ are squares of singular values of $A$.&lt;/p>
&lt;p>b) Let $A$ be the any matrix with SVD as given below,
$$
A = USV^T\\
\implies AA^T = USS^TU^T\\
\begin{align*}
\implies\text{Tr}(AA^T) &amp;amp; = \text{Tr}(USS^TU^T)\\
&amp;amp; = \text{Tr}(UU^TSS^T)\\
&amp;amp; = \text{Tr}(SS^T)\\
&amp;amp; = \sum_{i=0}^{d}s_i^2
\end{align*}
$$
where $d=\text{rank}(AA^T)$. Here we have used the result that $\text{Tr}(AB)=\text{Tr}(BA)$.&lt;/p>
&lt;p>$$
\begin{align*}
\text{Tr}(AA^T) &amp;amp; = \sum_{i=0}^m\sum_{j=0}^na_{ij}^2\\
\therefore \sum_{i=0}^ds_i^2 &amp;amp; = \|A\|_{F}^2
\end{align*}\\
$$
Hence proved, squared Frobenius norm of any matrix is the same as sum of squares of it&amp;rsquo;s singular values.&lt;/p>
&lt;p>c) $U$ and $V$ that are computed using the &lt;code>eig&lt;/code> function will have different ordering eigenvectors corresponding to the same eigenvalues. This happens because MATLAB doesn&amp;rsquo;t guarantee that all the non-zero eigenvalues will be reported at the beginning of this eigen-decomposition. Hence even though $S$ has all the singular values in the diagonal from the start and expects the eigenvectors in $U$ and $V$ to follow this same ordering, this gets violated when taking the product $USV^T$ and it comes out unequal to $A$.&lt;/p></description></item><item><title>Reinforcement Learning</title><link>https://adityakadoo.github.io/Scrolls/courses/reinforcement_learning/</link><pubDate>Wed, 13 Sep 2023 14:47:25 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/reinforcement_learning/</guid><description>&lt;h2 id="multi-armed-bandits">Multi-armed Bandits&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Stochastic Multi-armed Bandits&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$A$ is the set of $n$ arms&lt;/li>
&lt;li>$\forall a\in A$, $a$ has an associated Bernoulli distribution with mean reward $p_a$&lt;/li>
&lt;li>Highest mean is $p^\star$&lt;/li>
&lt;li>Pull any arm to gain reward and repeat this $T$ (horizon) times&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Algorithm for maximising reward&lt;/strong>&lt;/dt>
&lt;dd>For $t=0,1,2,\dots,T-1$:
&lt;ul>
&lt;li>Given the &lt;em>history&lt;/em> $h^t=(a^0,r^0,a^1,r^1,\dots,a^{t-1},r^{t-1})$&lt;/li>
&lt;li>Pick an &lt;em>arm&lt;/em> $a^t$&lt;/li>
&lt;li>Obtain the &lt;em>reward&lt;/em> $r^t$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Deterministic Algorithm&lt;/strong>&lt;/dt>
&lt;dd>Set of all histories $\to A$&lt;/dd>
&lt;dt>&lt;strong>Randomized Algorithm&lt;/strong>&lt;/dt>
&lt;dd>Set of all histories $\to \Delta A$ a.k.a. set of all probability distributions over $A$&lt;/dd>
&lt;/dl>
&lt;h3 id="epsilon-greedy-algorithms">$\epsilon$-greedy Algorithms&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>$\epsilon$-G1&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$t\le\epsilon T\implies$ sample uniformly at random&lt;/li>
&lt;li>$t=\lfloor\epsilon T\rfloor\implies$ identify $a^\star$ with the highest empirical mean&lt;/li>
&lt;li>$t&amp;gt;\epsilon T\implies$ sample $a^\star$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>$\epsilon$-G2&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$t\le\epsilon T\implies$ sample uniformly at random&lt;/li>
&lt;li>$t&amp;gt;\epsilon T\implies$ sample arm with highest empirical mean&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>$\epsilon$-G3&lt;/strong>&lt;/dt>
&lt;dd>With probability $\epsilon$ sample uniformly at random; with probability $1-\epsilon$ sample an arm with the highest empirical mean&lt;/dd>
&lt;/dl>
&lt;h3 id="regret">Regret&lt;/h3>
&lt;blockquote>
&lt;p>Consider the plot of $\mathbb{E}[r^t]$ vs $t$.
It must be bounded between $y=p_{\min}=\min_{a\in A}p_a$ and $y=p^\star$.
On random uniform sampling of arms the graph will be $y=p_{\text{avg}}=\frac{1}{n}\sum_{a\in A}p_a$.
A reasonable learning algorithm will start at $p_{\text{avg}}$ and tend towards $p^\star$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Regret&lt;/strong>&lt;/dt>
&lt;dd>For horizon $T$ and given algorithm,
$$
R_T = Tp^\star - \sum_{t=0}^{T-1}\mathbb{E}[r^t]
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Goal&lt;/strong> : Find an algorithm for which $\lim_{T\to\infty}\frac{R_T}{T}=0$.
All $\epsilon$-Gi&amp;rsquo;s have linear regret.&lt;/p>
&lt;/blockquote>
&lt;p>How to achieve Sub-linear Regret?&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Infinite Exploration&lt;/strong>: In the limit, each arm must be pulled an infinite number of times.&lt;/li>
&lt;li>&lt;strong>Greed in the Limit&lt;/strong>: Let $\text{exploit}(T)$ denote the number of pulls that are greedy w.r.t. the empirical mean up to the horizon $T$. We want,
$$
\lim_{T\to\infty}\frac{\mathbb{E}[\text{exploit}(T)]}{T}=1
$$&lt;/li>
&lt;/ol>
&lt;dl>
&lt;dt>&lt;strong>Special Bandit Instances&lt;/strong> ($\bar{\mathcal{I}}$)&lt;/dt>
&lt;dd>Set of all bandit instances with reward means $\le 1$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Result&lt;/strong> : An algorithm $L$ achieves sub-linear regret on all instances $I\in\bar{\mathcal{I}}$ $\iff$ $L$ does infinite exploration and is greedy in the limit.&lt;/p>
&lt;/blockquote>
&lt;h4 id="lower-bound-on-regret">Lower bound on Regret&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>Lai and Robbins&amp;rsquo; theorem&lt;/strong> : Let $L$ be an algorithm such that $\forall I\in\bar{\mathcal{I}}$ and $\forall\alpha&amp;gt;0$, as $T\to\infty$,
$$R_T(L,I)=\mathcal{o}(T^\alpha)$$&lt;/p>
&lt;p>Then $\forall I\in\bar{\mathcal{I}}$, as $T\to\infty$:
$$\frac{R_T(L,I)}{\ln(T)}\ge\sum_{a:p_a(I)\not =p^\star(I)}\frac{p^\star(I)-p_a(I)}{KL(p_a(I),p^\star(I))}$$
where for $x,y\in[0,1), KL(x,y)=x\ln\frac{x}{y}+(1-x)\ln\frac{1-x}{1-y}$&lt;/p>
&lt;/blockquote>
&lt;h3 id="optimal-regret-algorithms">Optimal Regret Algorithms&lt;/h3>
&lt;h4 id="ucb-algorithm">UCB Algorithm&lt;/h4>
&lt;ul>
&lt;li>At time $t$ for every arm $a$,
$$
\text{ucb}^t_a = \hat p^t_a + \sqrt{\frac{2\ln(t)}{u^t_a}}
$$&lt;/li>
&lt;li>$\hat p^t_a$ is the empirical mean of the rewards from arm $a$ and $u^t_a$ is the number of times a has been sampled at time $t$.&lt;/li>
&lt;li>Pull an arm $a$ for which $\text{ucb}^t_a$ is maximum.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>UCB achieves $\mathcal{O}(\log(T))$ regret.&lt;/p>
&lt;/blockquote>
&lt;h4 id="kl-ucb-algorithm">KL-UCB Algorithm&lt;/h4>
&lt;ul>
&lt;li>Define, where $c\ge 3$,
$$
\text{ucb-kl}^t_a = \max\{q\in[\hat p^t_a,1]\ |\ u^t_a\cdot \text{KL}(\hat p_a^t,q)\le\ln(t)+c\ln(\ln(t))\}
$$&lt;/li>
&lt;li>Pull $\argmax_{a\in A}\text{ucb-kl}^t_a$&lt;/li>
&lt;/ul>
&lt;h4 id="thompson-sampling">Thompson Sampling&lt;/h4>
&lt;ul>
&lt;li>For every arm $a$ with $s_a^t$ successful pulls and $f_a^t$ failed pulls draw a sample,
$$
x_a^t\sim\text{Beta}(s_a^t+1,f_a^t+1)
$$&lt;/li>
&lt;li>Pull arm $a$ with max $x_a^t$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Both KL-UCB and Thompson Sampling manage to get optimal regret.&lt;/p>
&lt;/blockquote>
&lt;h3 id="bound-on-ucb-regret">Bound on UCB Regret&lt;/h3>
&lt;h2 id="markov-decision-problems">Markov Decision Problems&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Markov Decision Problem&lt;/strong> $\langle S,A,T,R,\gamma\rangle$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;strong>Set of states&lt;/strong>: $S=\{s_1,s_2,\dots,s_n\}$&lt;/li>
&lt;li>&lt;strong>Set of actions&lt;/strong>: $A=\{a_1,a_2,\dots,a_k\}$&lt;/li>
&lt;li>&lt;strong>Transition function&lt;/strong>: $T(s,a,s^\prime)$ is the probability of reaching $s^\prime$ by starting at $s$ and taking action $a$. Hence $\forall s\in S,\forall a\in A,\ \sum_{s^\prime\in S}T(s,a,s^\prime)=1$.&lt;/li>
&lt;li>&lt;strong>Reward function&lt;/strong>: $T(s,a,s^\prime)$ is the reward on reaching $s^\prime$ by starting at $s$ and taking action $a$. Assuming all rewards are from $[-R_{\max},R_{\max}]$ where $R_{\max}\ge 0$.&lt;/li>
&lt;li>&lt;strong>Discount factor&lt;/strong>: $\gamma$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Policy&lt;/strong> ($\pi$)&lt;/dt>
&lt;dd>$\pi:S\to A$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>If $\Pi$ is the set of all policies then $|\Pi|=k^n$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>State values for Policy&lt;/strong> ($V^\pi$)&lt;/dt>
&lt;dd>For $s\in S$, $V^\pi:S\to\R$,
$$
V^\pi(s)=\mathbb{E}_\pi[r^0+\gamma r^1+\gamma^2r^2+\dots|s^0=s]
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Every MDP has an optimal policy $\pi^\star$ such that,
$$
\forall\pi\in\Pi,\forall s\in S:V^{\pi^\star}(s)\ge V^\pi(s)
$$&lt;/p>
&lt;p>&lt;strong>MDP Planning Problem&lt;/strong> : Find $\pi^\star$.&lt;/p>
&lt;/blockquote>
&lt;h3 id="bellman-equations">Bellman Equations&lt;/h3>
&lt;blockquote>
&lt;p>For $\pi\in\Pi,s\in S$,
$$
V^\pi(s) = \sum_{s^\prime\in S}T(s,\pi(s),s^\prime)\{R(s,\pi(s),s^\prime)+\gamma V^\pi(s^\prime)\}
$$&lt;/p>
&lt;ul>
&lt;li>$n$ equations $n$ variables&lt;/li>
&lt;li>linear&lt;/li>
&lt;li>Guaranteed solution for $\gamma&amp;lt;1$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Therefore brute-force way of finding the state values for all $k^n$ possible policies and then picking the most dominant one is possible but has $\mathcal{O}(\text{poly}(n,k)\cdot k^n)$ time complexity.&lt;/p>
&lt;h4 id="episodic-tasks">Episodic Tasks&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Episodic Task&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Has a new terminal state $s_\top$ from which there are no out going transitions on rewards.&lt;/li>
&lt;li>For every non-terminal state and every policy there is a non-zero probability of reaching the terminal state in a finite number of steps.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h5 id="definition-of-values">Definition of values&lt;/h5>
&lt;dl>
&lt;dt>&lt;strong>Infinite discounted reward&lt;/strong>&lt;/dt>
&lt;dd>$V^\pi(s)=\mathbb{E}_\pi[r^0+\gamma r+\gamma^2r^2+\dots|s^0=s]$&lt;/dd>
&lt;dt>&lt;strong>Total reward&lt;/strong>&lt;/dt>
&lt;dd>$V^\pi(s)=\mathbb{E}_\pi[r^0+r^1+\dots+|s^0=s]$&lt;/dd>
&lt;dt>&lt;strong>Finite horizon reward&lt;/strong>&lt;/dt>
&lt;dd>$V^\pi(s)=\mathbb{E}_\pi[r^0+r^1+\cdots+r^{H-1}|s^0=s]$ where $H\ge 1$&lt;/dd>
&lt;dt>&lt;strong>Average reward&lt;/strong>&lt;/dt>
&lt;dd>$V^\pi(s)=\mathbb{E_{\pi}}[\lim_{m\to\infty}\frac{r^0+r^1+\cdots+R^{m-1}}{m}|s^0=s]$&lt;/dd>
&lt;/dl>
&lt;h3 id="optimal-policy-characterization">Optimal Policy Characterization&lt;/h3>
&lt;h4 id="banachs-fixed-point-theorem">Banach&amp;rsquo;s Fixed-point Theorem&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Banach Space&lt;/strong> ($X$)&lt;/dt>
&lt;dd>A complete, normed vector space
&lt;ul>
&lt;li>&lt;strong>Vector space&lt;/strong>: $X$&lt;/li>
&lt;li>&lt;strong>Norm&lt;/strong>: $\|\cdot\|$&lt;/li>
&lt;li>&lt;strong>Complete&lt;/strong>: $(X,\|\cdot\|)$ such that every Cauchy sequence has a limit in $X$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Contraction mapping&lt;/strong> ($Z,l$)&lt;/dt>
&lt;dd>$Z:X\to X$ with contraction factor $0\le l&amp;lt;1$ such that, $\forall u\in X,\forall v\in X,$
$$
\|Zv-Zu\|\le l\|v-u\|
$$&lt;/dd>
&lt;dt>&lt;strong>Fixed-point&lt;/strong> ($x^\star$)&lt;/dt>
&lt;dd>For $Z$, such that $Zx^\star=x^\star$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Banach&amp;rsquo;s Fixed-point Theorem&lt;/strong> : For a contraction map $Z$ with contraction factor $l$ in a Banach space $(X,\|\cdot\|)$,&lt;/p>
&lt;ol>
&lt;li>$Z$ has a unique fixed point $x^\star\in X$&lt;/li>
&lt;li>For $x\in X,m\le 0:\|Z^mx-x^\star\|\le l^m\|x-x^\star\|$&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="bellman-optimality-operator">Bellman Optimality Operator&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Bellman optimality operator&lt;/strong> ($B^\star$)&lt;/dt>
&lt;dd>$B^\star:\R^n\to\R^n$ for an MDP is defined for $F\in\R^n,s\in S$ as,
$$
(B^\star(F))(s) = \max_{a\in A}\sum_{s^\prime\in S}T(s,a,s^\prime)\{R(s,a,s^\prime)+\gamma F(s^\prime)\}
$$&lt;/dd>
&lt;dt>&lt;strong>Max norm&lt;/strong> ($\|\cdot\|_\infty$)&lt;/dt>
&lt;dd>For $F=(f_1,f_2,\dots,f_n)\in\R^n$,
$$
\|F\|_\infty=\max\{|f_1|,|f_2|,\dots,|f_n|\}
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Result&lt;/strong> : $(\R^n,\|\cdot\|_\infty)$ is a Banach space.&lt;/p>
&lt;p>$\therefore B^\star$ is a contraction map in $(\R^n,\|\cdot\|_\infty)$ with contraction factor $\gamma$.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Optimal Value Function&lt;/strong> $(V^\star)$&lt;/dt>
&lt;dd>Denote the fixed point $V^\star:S\to\R$ (alternatively, $V^\star\in\R^n$) such that $B^\star(V^\star)=V^\star$. For $s\in S$,
$$
V^\star(s)=\max_{a\in A}\sum_{s^\prime\in S}T(s,a,s^\prime)\{R(s,a,s^\prime)+\gamma V^\star(s^\prime)\}
$$&lt;/dd>
&lt;/dl>
&lt;h3 id="optimal-policy-algorithms">Optimal Policy Algorithms&lt;/h3>
&lt;h4 id="value-iteration">Value Iteration&lt;/h4>
&lt;ol>
&lt;li>$V_0\leftarrow$ Arbitrary, element-wise bounded, $n$-length vector.&lt;/li>
&lt;li>$t\leftarrow 0$&lt;/li>
&lt;li>Repeat:
&lt;ol>
&lt;li>For $s\in S$:
&lt;ol>
&lt;li>$V_{t+1}(s)\leftarrow\max_{a\in A}\sum_{s^\prime\in S}T(s,a,s^\prime)(R(s,a,s^\prime+\gamma V_t(s^\prime)))$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>$t\leftarrow t+1$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Until $V_t\equiv V_{t-1}$&lt;/li>
&lt;/ol>
&lt;h4 id="linear-programming-formulation">Linear Programming Formulation&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Vector Comparison&lt;/strong> ($\succeq,\succ$)&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>For $X:S\to\R$ and $Y:S\to\R$ (equivalently $X,Y\in\R^n$) we define,
$$
X\succeq Y\iff \forall s\in S:X(s)\ge Y(s)\\
X\succ Y\iff X\succeq Y\And\exist s\in S:X(s)&amp;gt;Y(s)
$$&lt;/li>
&lt;li>For policies $\pi_1,\pi_2\in\Pi$ we define,
$$
\pi_1\succeq\pi_2\iff V^{\pi_1}\succeq V^{\pi_2}\\
\pi_1\succ\pi_2\iff V^{\pi_1}\succ V^{\pi_2}\\
$$&lt;/li>
&lt;li>2 policies can also be &lt;em>incomparable&lt;/em> i.e. $\pi_1\not\succeq\pi_2$ and $\pi_2\not\succeq\pi_1$&lt;/li>
&lt;li>$\pi_1\succeq\pi_2$ and $\pi_2\succeq\pi_1\iff V^{\pi_1}=V^{\pi_2}$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Result&lt;/strong> : $B^\star$ preserves $\succeq$. $\forall X,Y:S\to\R^n$,
$$
X\succeq Y\implies B^\star(X)\succeq B^\star(Y)
$$&lt;/p>
&lt;p>$\therefore$ For all $V\not =V^\star$ in the feasible set, $V\succ V^\star$.
$$
\implies\sum_{s\in S}V(s)&amp;gt;\sum_{s\in S}V^\star(s)
$$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Linear Programming Formulation&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Maximise $\left(-\sum_{s\in S}V(s)\right)$,&lt;/li>
&lt;li>Subject to $V(s)\ge\sum_{s^\prime\in S}T(s,a,s^\prime)\{R(s,a,s^\prime)+\gamma V(s^\prime)\},\ \forall s\in S,a\in A$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>This LP has $n$ variables and $nk$ constraints and the solution is $V^\star$.
The dual of this LP has nk variables with $n$ constraints and it&amp;rsquo;s solution is $\pi^\star$.&lt;/p>
&lt;/blockquote>
&lt;h4 id="policy-improvement">Policy Improvement&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Action Value Function&lt;/strong> ($Q^\pi:S\times A\to\R$)&lt;/dt>
&lt;dd>For $\pi\in\Pi,s\in S,a\in A$,
$$Q^\pi(s,a)=\mathbb{E}[r^0+\gamma r^1+\gamma^2r^2+\dots|s^0=s;a^0=a;a^t=\pi(s^t),\ \forall t\ge1$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>For $s\in S,a\in A$,
$$
Q^\pi(s,a) = \sum_{s^\prime\in S}T(s,a,s^\prime)\{R(s,a,s^\prime)+\gamma V^\pi(s^\prime)\}
$$&lt;/p>
&lt;p>$Q^\pi(s,\pi(s))=V^\pi(s)$&lt;/p>
&lt;p>All optimal policies have the same optimal action value function $Q^\star$.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>$\text{IA}:\Pi\times S\to \mathcal{P}(A)$&lt;/dt>
&lt;dd>For $\pi\in\Pi,s\in S$,
$$\text{IA}(\pi,s)=\{a\in A:Q^\pi(s,a)&amp;gt;V^\pi(s)\}$$&lt;/dd>
&lt;dt>$\text{IS}:\Pi\to\mathcal{P}(S)$&lt;/dt>
&lt;dd>For $\pi\in\Pi$,
$$\text{IS}(\pi)=\{s\in S:|\text{IA}(\pi,s)|\ge 1\}$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Policy Improvement Theorem&lt;/strong> :&lt;/p>
&lt;ol>
&lt;li>If $\text{IS}(\pi)=\emptyset$ then $\pi$ is an optimal policy, else&lt;/li>
&lt;li>if $\pi^\prime$ is obtained by policy improvement on $\pi$, then $\pi^\prime\succ\pi$.&lt;/li>
&lt;/ol>
&lt;p>$\text{IS}(\pi^\star)=\emptyset\iff B^\star(V^{\pi^\star})=V^{\pi^\star}$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Bellman Operator&lt;/strong> ($B^\pi:\R^n\to\R^n$)&lt;/dt>
&lt;dd>For $\pi\in\Pi,X:S\to\R,s\in S$,
$$(B^\pi(X))(s)=\sum_{s^\prime\in S}T(s,\pi(s),s^\prime)(R(s,\pi(s),s^\prime)+\gamma X(s^\prime))$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$B^\pi$ is a contraction mapping with contraction factor $\gamma$.&lt;/p>
&lt;p>For $X:s\to\R,\ \lim_{l\to\infty}(B^\pi)^l(X)=V^\pi$
For $X:s\to\R,Y:S\to\R,\ X\succeq Y\implies B^\pi(X)\succeq B^\pi(Y)$&lt;/p>
&lt;p>$B^{\pi^\prime}(V^\pi)(s)=Q^\pi(s,\pi^\prime(s))$&lt;/p>
&lt;/blockquote>
&lt;h5 id="policy-iteration-algorithm">Policy Iteration Algorithm&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">Policy_iteration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mdp&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="n">Pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mdp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand_policy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">mdp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_improvable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Pi&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="n">Pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mdp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">improve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Pi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Pi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pi-variants">PI Variants&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Howard&amp;rsquo;s Policy Iteration&lt;/strong>&lt;/dt>
&lt;dd>Greedy; switch all improvable states.&lt;/dd>
&lt;dt>&lt;strong>Random Policy Iteration&lt;/strong>&lt;/dt>
&lt;dd>Switch a non-empty subset of improvable states chosen uniformly at random.&lt;/dd>
&lt;dt>&lt;strong>Simple Policy Iteration&lt;/strong>&lt;/dt>
&lt;dd>Assume a fixed indexing of states and always improve the state with the highest index.&lt;/dd>
&lt;dt>&lt;strong>Upper Bound&lt;/strong> ($U(n,k)$)&lt;/dt>
&lt;dd>For a set of PI Variants $\mathcal{L}$ and MDP $M$, the expected number of policy evalutaions performed by $L$ on $M$ if initialised at any $\pi$ is at most $U(n,k)$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>PI Variant&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>k=2&lt;/th>
&lt;th>General k&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Howard&amp;rsquo;s PI&lt;/td>
&lt;td>Deterministic&lt;/td>
&lt;td>$\mathcal{O}(\frac{2^n}{n})$&lt;/td>
&lt;td>$\mathcal{O}(\frac{k^n}{n})$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mansour and Singh&amp;rsquo;s Random PI [MS99]&lt;/td>
&lt;td>Randomized&lt;/td>
&lt;td>$1.7172^n$&lt;/td>
&lt;td>$\mathcal{O}(\frac{k}{2})^n$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mansour and Singh&amp;rsquo;s Random PI [HPZ14]&lt;/td>
&lt;td>Randomized&lt;/td>
&lt;td>$\text{poly}(n)\cdot 1.5^n$&lt;/td>
&lt;td>&amp;ndash;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Lower Bound&lt;/strong> ($X(n,k)$)&lt;/dt>
&lt;dd>For a set of PI Variants $\mathcal{L}$ and MDP $M$, the expected number of policy evalutaions performed by $L$ on $M$ if initialised at any $\pi$ is at least $X(n,k)$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;ul>
&lt;li>Howard&amp;rsquo;s PI on $n$-state, 2-action MDPs : $\Omega(n)$&lt;/li>
&lt;li>Simple PI on $n$-state, 2-action MDPs : $\Omega(2^n)$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="howards-pi-with-k2">Howard&amp;rsquo;s PI with $k=2$&lt;/h4>
&lt;blockquote>
&lt;p>Non-optimal policies $\pi,\pi^\prime\in\Pi$ cannot have the same set of improvable states.&lt;/p>
&lt;p>If $\pi$ has $m$ improvable states and $\pi$ states and $\pi,\pi^\prime$ (Howard&amp;rsquo;s PI) then there exist $m$ policies $\pi^{\prime\prime}$ such that $\pi^\prime\succeq\pi^{\prime\prime}\succ\pi$.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Number of iterations taken by Howard&amp;rsquo;s PI: $O(\frac{2^n}{n})$&lt;/p>
&lt;/blockquote>
&lt;h4 id="batch-switching-policy-iteration">Batch-Switching Policy Iteration&lt;/h4>
&lt;blockquote>
&lt;p>Howard&amp;rsquo;s Policy Iteration takes at most 3 iterations on 2-state 2-action MDP!&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>BSPI&lt;/strong>&lt;/dt>
&lt;dd>Partition states in 2-sized batches arranged from right to left. Improve the rightmost set containing an improvable state.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>BSPI of batch size 2 is bounded by $\mathcal{O}(\sqrt{3}^n)$.
Tighter bounds for higher batch-sizes.&lt;/p>
&lt;/blockquote></description></item><item><title>Game Theory</title><link>https://adityakadoo.github.io/Scrolls/courses/game_theory/</link><pubDate>Fri, 25 Aug 2023 16:05:24 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/game_theory/</guid><description>&lt;h2 id="central-concepts">Central Concepts&lt;/h2>
&lt;h3 id="game">Game&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game&lt;/strong>
: It is a formal representation of the &lt;em>strategic&lt;/em> interaction between &lt;em>players&lt;/em>&lt;/li>
&lt;li>&lt;strong>Actions&lt;/strong>
: &lt;em>Choices&lt;/em> available to players&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong>
: &lt;em>Mapping&lt;/em> from state of the game to set of valid actions&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Normal Form&lt;/strong>, &lt;strong>Extensive Form&lt;/strong>, &lt;strong>Static&lt;/strong>, &lt;strong>Dynamic&lt;/strong>, &lt;strong>Repeated&lt;/strong>, &lt;strong>Stochastic&lt;/strong>, etc. are different kinds of games&lt;/p>
&lt;/blockquote>
&lt;h3 id="game-theory">Game Theory&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game Theory&lt;/strong>
: It is the formal study of strategic interactions between player, who are &lt;em>rational&lt;/em> and &lt;em>intelligent&lt;/em>&lt;/li>
&lt;li>&lt;strong>Rational Player&lt;/strong>
: A player who always picks the action that &lt;em>maximizes&lt;/em> their &lt;em>utility&lt;/em>&lt;/li>
&lt;li>&lt;strong>Intelligent Player&lt;/strong>
: A player who knows the rules of the game &lt;em>perfectly&lt;/em> and can pick the best action considering that there are other rational and intelligent players in the game&lt;/li>
&lt;li>&lt;strong>Common Knowledge&lt;/strong>
: A &lt;em>fact&lt;/em> is common knowledge if,
&lt;ul>
&lt;li>all players know the fact&lt;/li>
&lt;li>all players know that all players know the fact&lt;/li>
&lt;li>all players know that all players know that all players know the fact&lt;/li>
&lt;li>$\dots$ ad infinitum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="chess-example">Chess Example&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game situations&lt;/strong>($H$)
: Set of all finite sequence $(x_0, x_1,x_2,&amp;hellip;,x_k)$ of board positions such that,
&lt;ul>
&lt;li>$x_0$ is the opening board position&lt;/li>
&lt;li>$x_k\rightarrow x_{k+1}$
&lt;ul>
&lt;li>$k$ even $\implies$ single action of $W$&lt;/li>
&lt;li>$k$ odd $\implies$ single action of $B$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong> for $W$($s_W$)
: Function $s_W$ that associates every game situation $(x_0,x_1,x_2,&amp;hellip;,x_k)\in H$, where $k$ is even, with a board position $x_{k+1}$ such that the move $x_k\rightarrow x_{k+1}$ is a single valid move for $W$&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong> for $B$($s_B$)
: Defined similarly as above&lt;/li>
&lt;li>&lt;strong>Outcome&lt;/strong>
: Determined by a pair of $(s_W, s_B)$. Could be one of the following for chess,
&lt;ul>
&lt;li>$W$ wins: $W$ captures $B$ king&lt;/li>
&lt;li>$B$ wins: $B$ captures $W$ king&lt;/li>
&lt;li>Draw: Both players agree to draw&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Winning Strategy&lt;/strong> for $W$($s_W^\ast$)
: A strategy such that $\forall s_B$, the outcome for $(s_W^\ast,s_B)$ is a win for $W$&lt;/li>
&lt;li>&lt;strong>Draw Guaranteeing Strategy&lt;/strong> for $W$($s_W^\prime$)
: A strategy such that $\forall s_B$, the outcome for $(s_W^\prime, s_B)$ is either a win for $W$ or a draw.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : In chess, one and only one of the following statements is true&lt;/p>
&lt;ul>
&lt;li>$s_W^\ast$ exists&lt;/li>
&lt;li>$s_B^\ast$ exists&lt;/li>
&lt;li>$s_W^\prime$ and $s_B^\prime$ exist&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="normal-form-games">Normal Form Games&lt;/h2>
&lt;h3 id="pure-strategies">Pure Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Static Game&lt;/strong> $\langle N, \{S_i|i\in N\}, \{u_i | i\in N\} \rangle$&lt;/dt>
&lt;dd>A game where player interact only once&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>&lt;strong>Set of players&lt;/strong>
: $N =\{1,2,\dots,n\}$&lt;/li>
&lt;li>&lt;strong>Set of Strategies for $i$&lt;/strong>
: $s_i\in S_i$&lt;/li>
&lt;li>&lt;strong>Strategy profile&lt;/strong>
: $s=(s_1,s_2,\dots,s_n)\in S$&lt;/li>
&lt;li>&lt;strong>Set of strategy profiles&lt;/strong>
: $S=\times_{i\in N}S_i$&lt;/li>
&lt;li>&lt;strong>Strategy profile w/o $i$&lt;/strong>
: $s_{-i}=(s_1,\dots,s_{i-1},s_{s+1},\dots,s_n)$&lt;/li>
&lt;li>&lt;strong>Utility function for player $i$&lt;/strong>
: $u_i:S\rightarrow \R$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Finite Game&lt;/strong> : A static game where $\forall i\in N,\ S_i$ is finite&lt;/p>
&lt;/blockquote>
&lt;h4 id="dominance">Dominance&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Strictly Dominated Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i,\ \exists s_i\in S_i,\ \forall s_{-i}\in S_{-i},\ u_i(s_i, s_{-i})&amp;gt;u_i(s_i^\prime,s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominated Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i,\ \exists s_i\in S_i,\ \forall s_{-i}\in S_{-i},\ u_i(s_i, s_{-i})\ge u_i(s_i^\prime,s_{-i})$ and $\exists \tilde s_{-i}\in S_{-i},\ u_i(s_i, \tilde s_{-i}) &amp;gt; u_i(s_i^\prime, \tilde s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Strictly Dominant Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i, \forall s_i\in S_i-\{s_i^\prime\},\ s_i$ is strictly dominated by $s_i^\prime$&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominant Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i, \forall s_i\in S_i-\{s_i^\prime\},\ s_i$ is weakly dominated by $s_i^\prime$&lt;/dd>
&lt;/dl>
&lt;h4 id="equilibria">Equilibria&lt;/h4>
&lt;h5 id="dominant-strategy-equilibrium">Dominant Strategy Equilibrium&lt;/h5>
&lt;dl>
&lt;dt>&lt;strong>Strictly Dominant Strategy Equilibrium [SDSE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_1^\ast,s_2^\ast,\dots,s_n^\ast)$, such that $\forall i\in N,\ s_i^\ast$ is a strictly dominant strategy&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominant Strategy Equilibrium [WDSE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_1^\ast,s_2^\ast,\dots,s_n^\ast)$, such that $\forall i\in N,\ s_i^\ast$ is a weakly dominant strategy&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Rational player never play dominated strategies.&lt;/strong>
So it can be useful to remove such strategies.
Strictly dominated strategies can be removed in any order.
Weakly dominated strategies&amp;rsquo; order of removal matters as it can remove important outcomes.&lt;/p>
&lt;/blockquote>
&lt;h5 id="nash-equilibrium">Nash Equilibrium&lt;/h5>
&lt;dl>
&lt;dt>&lt;strong>Pure Strategy Nash Equilibrium [PSNE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_i^\ast, s_{-i}^\ast)$ such that $\forall i\in N$ and $\forall s_i\in S_i$,
$$
u_i(s_i^\ast, s_{-i}^\ast)\ge u_i(s_i,s_{-i}^\ast)
$$&lt;/dd>
&lt;dt>&lt;strong>Best Response&lt;/strong> ($B_i(s_{-i})$)&lt;/dt>
&lt;dd>$B_i(s_{-i}) = \{s_i\in S_i|\ \forall s_i^\ast\in S_i,\ u_i(s_i,s_{-i})\ge u_i(s_i^\ast,s_{-i})\}$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>For a PSNE $(s_i^\ast,s_{-i}^\ast)$, $s_i^\ast\in B_i(s_{-i}^\ast),\ \forall i\in N$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SDSE $\implies$ WDSE $\implies$ PSNE&lt;/p>
&lt;/blockquote>
&lt;h4 id="risk-aversion">Risk Aversion&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Max-Min Strategy&lt;/strong> ($s_i^{\max\min}$)&lt;/dt>
&lt;dd>$s_i^{\max\min}\in\arg\max_{s_i\in S_i}\min_{s_{-i}\in S_i}u_i(s_i,s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Max-Min value&lt;/strong> ($\underline v_i$)&lt;/dt>
&lt;dd>$\underline v_i = \max_{s_i\in S_i}\min_{s_{-i}\in S_i}u_i(s_i,s_{-i})$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$u_i(s_i^{\max\min},s_{-i})\ge\underline v_i,\ \ \forall s_{-i}\in S_{-i}$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $s_i^\ast$ is dominant strategy $\implies$ $s_i^\ast$ is a max-min strategy&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Every PSNE $s^\ast=(s_1^\ast,\dots,s_n^\ast)$ satisfies $u_i(s^\ast)\ge\underline v_i,\ \forall i\in N$&lt;/p>
&lt;/blockquote>
&lt;h4 id="elimination-of-dominated-strategies">Elimination of dominated strategies&lt;/h4>
&lt;h5 id="preservation-of-max-min-value">Preservation of Max-Min value&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For NFG $G$, let $s_j^\prime\in S_j$ be a dominated strategy. Let $G^\prime$ be the residual game after removing $s_j^\prime$. Then, the maxmin value of $j$ in $G^\prime$ is equal to the maxmin value in $G$&lt;/p>
&lt;/blockquote>
&lt;h5 id="preservation-of-psne">Preservation of PSNE&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For NFG $G$ and $G^\prime$ after elimination of &lt;strong>any&lt;/strong> strategy, if $s^\ast$ is a PSNE in $G$ and survives in $G^\prime$, then $s^\ast$ is a PSNE in $G^\prime$ too.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>No new PSNE if eliminated strategy is dominated.
Old PSNE could be killed.&lt;/p>
&lt;/blockquote>
&lt;h4 id="matrix-games">Matrix Games&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Matrix Game&lt;/strong>&lt;/dt>
&lt;dd>A NFG $\langle N, \{S_i|i\in N\}, \{u_i|i\in N\}\rangle$ with $N=\{1,2\}$ and $u_1(s)+u_2(s)=0,\ \forall$ strategy profile $s\in S$&lt;/dd>
&lt;dt>&lt;strong>Utility Matrix&lt;/strong> ($U$)&lt;/dt>
&lt;dd>$[U]_{ij} = u_1(s_i,s_j)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Player 2&amp;rsquo;s MaxMin value is negative of the column-wise MinMax of this matrix.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Saddle Point&lt;/strong>&lt;/dt>
&lt;dd>An element in the matrix that is maximum in it&amp;rsquo;s column and minimum in it&amp;rsquo;s row&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : In a Matrix game, $(s_1^\ast,s_2^\ast)$ is a saddle point $\iff$ $(s_1^\ast,s_2^\ast)$ is a PSNE&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Max-Min Value&lt;/strong> ($\underline v$)&lt;/dt>
&lt;dd>$\underline v = \max_{s_1\in S_1}\min_{s_2\in S_2}U(s_1, s_2)$&lt;/dd>
&lt;dt>&lt;strong>Min-Max Value&lt;/strong> ($\bar v$)&lt;/dt>
&lt;dd>$\bar v = \min_{s_2\in S_2}\max_{s_1\in S_1}U(s_1, s_2)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Lemma&lt;/strong> : For matrix games, $\bar v\ge\underline v$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>PSNE Theorem&lt;/strong> : A Matrix game has a PSNE $\iff$ $\bar v=\underline v=U(s_1^\ast, s_2^\ast)$ where $s_1^\ast$ and $s_2^\ast$ are $\max\min$ and $\min\max$ strategies for player 1 and 2 respectively. $(s_1^\ast, s_2^\ast)$ is that PSNE.&lt;/p>
&lt;/blockquote>
&lt;h3 id="mixed-strategies">Mixed Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Mixed Strategy Set&lt;/strong> ($\Delta A$)&lt;/dt>
&lt;dd>$\Delta A = \{p:A\to[0,1]^{|A|}\ |\ \sum_{a\in A}p(a) = 0\}$&lt;/dd>
&lt;dt>&lt;strong>Mixed Strategy&lt;/strong> ($\sigma_i$)&lt;/dt>
&lt;dd>For player $i$, $\sigma_i:S_i\to[0,1]$ such that $\sum_{s_i\in S_i}\sigma_i(s_i)=1$&lt;/dd>
&lt;dt>&lt;strong>Utility&lt;/strong> ($u_i(\sigma_i,\sigma_{-i})$)&lt;/dt>
&lt;dd>$u_i(\sigma_i,\sigma_{-i}) = \sum_{s_1\in S_1}\sum_{s_2\in S_2}\cdots\sum_{s_n\in S_n}\prod_{j=1}^n\sigma_j(s_j)\cdot u_i(s_1,s_2,\dots,s_n)$&lt;/dd>
&lt;/dl>
&lt;h4 id="mixed-strategy-nash-equilibrium">Mixed Strategy Nash Equilibrium&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>MSNE&lt;/strong>&lt;/dt>
&lt;dd>A mixed strategy profile $(\sigma_i^\ast, \sigma_{-i}^\ast)$ such that,
$$
u_i(\sigma_i^\ast, \sigma_{-i}^\ast)\ge u_i(\sigma_i, \sigma_{-i}^\ast),\ \forall\sigma_i\in\Delta S_i,\ \forall i\in N
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PSNE $\implies$ MSNE&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $(\sigma_i^\ast, \sigma_{-i}^\ast)$ is an MSNE $\iff$ $\forall s_i\in S_i,\ \forall i\in N$,
$$ u_i(\sigma_i^\ast,\sigma_{-i}^\ast)\ge u_i(s_i,\sigma_{-i}^\ast)$$&lt;/p>
&lt;/blockquote>
&lt;h4 id="msne-characterization-theorem">MSNE Characterization Theorem&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Support for Mixed Strategy&lt;/strong> ($\delta(\sigma_i)$)&lt;/dt>
&lt;dd>$\delta(\sigma_i)=\{s_i\in S_i|\ \sigma_i(s_i)&amp;gt;0\}$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $(\sigma_i^\ast,\sigma_{-i}^\ast)$ is a MSNE $\iff$ $\forall i\in N$,&lt;/p>
&lt;ul>
&lt;li>$u_i(s_i,\sigma_{-i}^\ast)$ is identical $\forall s_i\in \delta(\sigma_i^\ast)$&lt;/li>
&lt;li>$u_i(s_i,\sigma_{-i}^\ast)\ge u_i(s_i^\prime, \sigma_{-i}^\ast),\ \forall s_i\sube \delta(\sigma_i^\ast),\ s_i^\prime \not\in\delta(\sigma_i^\ast)$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>Maximizing w.r.t. a distribution $\Leftrightarrow$ Whole probability mass at max
$$ \max_{\sigma_i\in\Delta S_i}u_i(\sigma_i,\sigma_{-i})=\max_{s_i\in S_i}u_i(s_i,\sigma_{-i}) $$&lt;/li>
&lt;li>If $(\sigma_i^\ast, \sigma_{-i}^\ast)$ is an MSNE, then
$$ u_i(\sigma_i^\ast,\sigma_{-i}^\ast)=\max_{\sigma_i\in\Delta S_i}u_i(\sigma_i,\sigma_{-i}^\ast)=\max_{s_i\in S_i}u_i(s_i,\sigma_{-i}^\ast)=\max_{s_i\in\delta(\sigma_i)}u_i(s_i,\sigma_{-i}^\ast) $$&lt;/li>
&lt;/ul>
&lt;h4 id="algorithm-for-msne">Algorithm for MSNE&lt;/h4>
&lt;p>For every support profile $X_1\times X_2\times\cdots X_n$ where $X_i\sube S_i$, solve the following feasibility program to get the MSNE,
$$
w_i = \sum_{s_{-i}\in S_{-i}}(\prod_{j\not =i}\sigma_j(s_j))\cdot u_i(s_i,s_{-i}),\ \forall s_i\in X_i,\ \forall i\in N\\
w_i \ge \sum_{s_{-i}\in S_{-i}}(\prod_{j\not =i}\sigma_j(s_j))\cdot u_i(s_i,s_{-i}),\ \forall s_i\in S_i\backslash X_i,\ \forall i\in N\\
\sigma_j(s_j)\ge0,\ \forall s_j\in S_j,\ \forall j\in N\\
\sum_{s_j\in X_j}\sigma_j(s_j)=1,\ \forall j\in N
$$&lt;/p>
&lt;ul>
&lt;li>Not linear unless $n=2$&lt;/li>
&lt;li>No poly-time algorithm for general game&lt;/li>
&lt;li>This is PPAD-complete (Polynomial Parity Argument on Directed graphs)&lt;/li>
&lt;/ul>
&lt;h4 id="existence-of-msne">Existence of MSNE&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Finite Game&lt;/strong>&lt;/dt>
&lt;dd>A game with finite number of players and each player has a finite set of strategies&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Every finite game has a (mixed) Nash equilibrium.&lt;/p>
&lt;/blockquote>
&lt;h3 id="correlated-strategies">Correlated Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Correlated Strategy&lt;/strong> ($\pi$)&lt;/dt>
&lt;dd>A mapping $\pi:S_1\times S_2\times\cdots\times S_n\rightarrow[0,1]$ such that $\sum_{s\in S}\pi(s)=1$&lt;/dd>
&lt;dt>&lt;strong>Correlated Equilibrium&lt;/strong>&lt;/dt>
&lt;dd>A correlated strategy $\pi$ such that,
$$
\sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i, s_{-i})\ge \sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i^\prime, s_{-i}),\ \forall s_i,s_i^\prime\in S_i,\ \forall i\in N
$$&lt;/dd>
&lt;/dl>
&lt;p>To find a CE following linear equations must be solved,
$$
\sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i, s_{-i})\ge \sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i^\prime, s_{-i}),\ \forall s_i,s_i^\prime\in S_i,\ \forall i\in N\\
\pi(s)\ge 0,\ \forall s\in S,\ \sum_{s\in S}\pi(s)=1
$$&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For every MSNE $\sigma^\ast$ there exists a CE $\pi^\ast$&lt;/p>
&lt;/blockquote>
&lt;h2 id="perfect-information-games">Perfect Information Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Perfect Information Extensive Form Games&lt;/strong> [PIEFG] $\langle N, A, H, X, P, (u_i)_{i\in N}\rangle$&lt;/dt>
&lt;dd>A game where players interact one after the other&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>&lt;strong>Set of players&lt;/strong>: $N$&lt;/li>
&lt;li>&lt;strong>Set of all possible actions&lt;/strong>: $A$&lt;/li>
&lt;li>&lt;strong>Set of all sequences of actions&lt;/strong>: $H$
&lt;ul>
&lt;li>empty history $\varnothing\in H$&lt;/li>
&lt;li>if $h\in H$ and any sub-sequence $h^\prime$ of $h$ starting at the root then $h^\prime\in H$&lt;/li>
&lt;li>$h=(a^{(0)},a^{(1)},\dots,a^{(T-1)})$ is &lt;strong>terminal&lt;/strong> if $\nexists a^{(T)}$ such that $(a^{(0)},a^{(1)},\dots,a^{(T)})\in H$&lt;/li>
&lt;li>&lt;strong>Set of terminal histories&lt;/strong>: $Z\sube H$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Action set selection function&lt;/strong>: $X:H\backslash Z\rightarrow 2^A$&lt;/li>
&lt;li>&lt;strong>Player function&lt;/strong>: $P:H\backslash Z\rightarrow N$&lt;/li>
&lt;li>&lt;strong>Utility&lt;/strong>: $u_i:Z\rightarrow\R$&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>&lt;strong>Strategy&lt;/strong> ($S_i$)&lt;/dt>
&lt;dd>$S_i = \times_{\{h\in H:P(h)=i\}}X(h)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PSNE of PIEFG doesn&amp;rsquo;t always give credible threats for equilibrium&lt;/p>
&lt;/blockquote>
&lt;h3 id="subgame-perfection">Subgame Perfection&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Subgame&lt;/strong>&lt;/dt>
&lt;dd>Subtree of a PIEFG $G$ rooted at a history $h$. It is the &lt;em>restriction&lt;/em> of $G$ to the descendants of $h$.&lt;/dd>
&lt;dt>&lt;strong>Subgame Perfect Nash Equilibrium&lt;/strong> [SPNE]&lt;/dt>
&lt;dd>A strategy profile $s\in S$ such that $\forall$ subgame $G^\prime$ of $G$, the restriction of $s$ to $G^\prime$ is a PSNE of $G^\prime$&lt;/dd>
&lt;/dl>
&lt;h3 id="backward-induction-algorithm">Backward Induction Algorithm&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">BACK_IND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">history&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="p">),[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">best_util&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INT_MIN&lt;/span> &lt;span class="c1"># -ve infinity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">util_at_child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BACK_IND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">))[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">util_at_child&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">best_util&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">best_util&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">util_at_child&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">best_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">action&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">best_util&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">best_action&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="spne-limitations">SPNE Limitations&lt;/h3>
&lt;p>&lt;strong>Advantages&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>SPNE is guaranteed to exist in finite PIEFG&lt;/li>
&lt;li>An SPNE is a PSNE&lt;/li>
&lt;li>The algorithm to find SPNE is simple&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Disadvantages&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>The whole tree needs to be parsed&lt;/li>
&lt;li>Cognitive limit of real players may prohibit playing SPNE&lt;/li>
&lt;/ol>
&lt;h2 id="imperfect-information-games">Imperfect Information Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Imperfect Information Extensive Form Games&lt;/strong> [IIEFG] $\langle N,A,H,X,P,(u_i)_{i\in N},\{I_i:i\in N\}\rangle$&lt;/dt>
&lt;dd>A PIEFG with added condition that for every $i\in N,I_i=(I_i^1,I_i^2,\dots,I_i^{k(i)})$ is a partition of $\{h\in H\backslash Z:P(h)=i\}$ with the property that $X(h)=X(h^\prime)$ and $P(h)=P(h^\prime)=i$, whenever $\exists j, h,h^\prime\in I_i^j$
&lt;ul>
&lt;li>&lt;strong>Information Set&lt;/strong> : $I_i^j\in I_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h3 id="behavioural-strategies">Behavioural Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Strategy Set&lt;/strong> ($S_i$)&lt;/dt>
&lt;dd>For player $i$,
$$S_i = \times_{j=1}^{j=k(i)}X(I_i^j)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>In NFGs mixed strategies randomized over pure strategies.
In EFGs randomization can be done in different ways,&lt;/p>
&lt;ul>
&lt;li>randomize over the strategies defined at the beginning of the game.&lt;/li>
&lt;li>randomize over the action at an information set: behavioural strategy.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Behavioural Strategies&lt;/strong> ($b_i$)&lt;/dt>
&lt;dd>For player $i$,
$$b_i:I_i\to\{\Delta X(I_i^j)\ |\ I_i^j\in I_i\}$$&lt;/dd>
&lt;/dl>
&lt;h3 id="equivalence">Equivalence&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Equivalence&lt;/strong>&lt;/dt>
&lt;dd>A mixed strategy $\sigma_i$ and a behavioural strategy $b_i$ of a player $i$ in an IIEFG are equivalent is $\forall \zeta_{-i}$, mixed/behavioural strategy of other players and for every vertex $x$ in the game,
$$
\rho(x;\sigma_i,\zeta_{-i}) = \rho(x;b_i,\zeta_{-i})
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>It is enough to check only at the leaf nodes.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $\sigma_i$ and $b_i$ are equivalent then $\forall\zeta_{-i}$,
$$
u_j(\sigma_i,\zeta_{-i})=u_j(b_i,\zeta_{-i})\forall j\in N
$$&lt;/p>
&lt;p>&lt;strong>Corollary&lt;/strong> : Let $\sigma$ and $b$ be equivalent i.e. $\sigma_i$ and $b_i$ are equivalent $\forall i\in N$, then $u_i(\sigma)=u_i(b)$&lt;/p>
&lt;/blockquote>
&lt;p>Equivalence doesn&amp;rsquo;t hold if the players are forgetful.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Consider an IIEFG such that every vertex has at least two actions. Every behavioral strategy has an equivalent mixed strategy for a player iff each information set of that player intersects every path emanating from the root at most once.&lt;/p>
&lt;/blockquote>
&lt;h3 id="perfect-recall">Perfect Recall&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Perfect Recall&lt;/strong>&lt;/dt>
&lt;dd>For every $I_i^j$ of player $i$ and every pair of vertices $x,y\in I_i^j$, if the decision vertices of $i$ are $x_i^1,x_i^2,\dots,x_i^L=x$ and $y_i^1,y_i^2,\dots,y_i^{L^\prime}=y$ respectively for the two paths from the root to $x$ and $y$ then
&lt;ul>
&lt;li>$L = L^\prime$,&lt;/li>
&lt;li>$x^l_i,y^l_i\in I_i^k$ for some $k$,&lt;/li>
&lt;li>$a_i(x_i^l\to x_i^{l+1})=a_i(y_i^l\to y_i^{l+1}),\ \forall l=1,2,\dots,L-1$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Perfect Recall Game&lt;/strong>&lt;/dt>
&lt;dd>A game where every player has a &lt;strong>perfect recall&lt;/strong>&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>In a perfect recall game every behavioural strategy has equivalent mixed strategy.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>$S_i^\prime(x)$&lt;/dt>
&lt;dd>The set of pure strategies of player $i$ at which he chooses actions leading to $x$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $i$ is a player with perfect recall and $x$ and $x^\prime$ are the two vertices in the same information set of i, then $S_i^\ast(x) = S_i^\ast(x^\prime)$.&lt;/p>
&lt;p>&lt;strong>Kuhn Theorem&lt;/strong> : In every IIEFG, if $i$ is a player with perfect recall then for every mixed strategy of $i$, there exists a behavioural strategy.&lt;/p>
&lt;/blockquote>
&lt;h3 id="bayesian-beliefs">Bayesian Beliefs&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Beliefs&lt;/strong> ($\mu_i^j:I_i^j\to[0,1]$)&lt;/dt>
&lt;dd>Distribution over an information set such that $\sum_{x\in I_i^j}u_i^j(x)=1$&lt;/dd>
&lt;dt>&lt;strong>Bayesian Belief&lt;/strong> ($\mu_i = \{\mu_i^1,\mu_i^2,\dots,\mu_i^{k(i)}\}$)&lt;/dt>
&lt;dd>When derived from a behavioral strategy $\sigma$ such that, $\forall x\in I_i^j,\forall j\in \{1, 2, \dots, k(i)\}$,
$$\mu_i^j(x) = P_\sigma(x) / \sum_{y\in I_i^j}P_\sigma(y)$$&lt;/dd>
&lt;dt>&lt;strong>Sequantial Rationality&lt;/strong>&lt;/dt>
&lt;dd>A strategy $\sigma_i$ at an information set $I_i^j$ is sequentially rational given $\sigma_{-i}$ and partial belief $\mu_i^j$ if,
$$\sum_{x\in I_i^j}\mu_i^j(x)u(\sigma_i,\sigma_{-i}|x)\ge\sum_{x\in I_i^j}\mu_i^j(x)u(\sigma_i^\prime,\sigma_{-i}|x)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Sequential Rationality is a refinement on Nash Equilibrium.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: In PIEFGs, a behavioral strategy profile $\sigma$ is an SPNE iff the tuple $(\sigma, \hat\mu)$ is sequentially rational.&lt;/p>
&lt;p>Here $\hat\mu$ is the degenrate distribution since in PIEFGs all information sets are singleton.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Perfect Bayesian Equilibrium&lt;/strong> $(\sigma, \mu)$&lt;/dt>
&lt;dd>$\forall i\in N$,
&lt;ul>
&lt;li>$\mu_i$ is Bayesian w.r.t. $\sigma$&lt;/li>
&lt;li>$\sigma_i$ is sequentially rational given $\sigma_{-i}$ and $\mu_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h2 id="bayesian-games">Bayesian Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Bayesian Games&lt;/strong> $\langle N, \{\Theta_i:i\in N\}, P, \{\Gamma_\theta:\theta\in(\times_{i\in N}\Theta_i)\}\rangle$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$N$ : Set of players&lt;/li>
&lt;li>$\Theta_i$ : Set of types of player $i$&lt;/li>
&lt;li>$P$ : Common prior distribution over $\Theta=\times_{i\in N}\Theta_i$&lt;/li>
&lt;li>$\Gamma_\theta$ : NFG for type profile $\theta\in\Theta$ i.e. $\Gamma_\theta = \langle N,\{A_i(\theta):i\in N\},\{u_i(\theta):i\in N\}\rangle$ where $u_i:A\times\Theta\to\R$ and $A=\times_{i\in N}A_i\ \forall\theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Strategy&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Pure: $s_i:\Theta_i\to A_i$&lt;/li>
&lt;li>Mixed: $\Theta_i\to\Delta A_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Ex-ante Utility&lt;/strong>&lt;/dt>
&lt;dd>Expected utility before observing own types,
$$u_i(\sigma) = \sum_{\theta\in\Theta}P(\theta)u_i(\sigma(\theta);\theta)\\
\ \\
\sum_{\theta\in\Theta}P(\theta)\sum_{(a_1,a_2,a_3,\dots,a_n)\in A}\prod_{j\in N}\sigma_j(\theta_j)[a_j]u_i(a_1,\dots,a_n;\theta_1,\dots,\theta_n)$$&lt;/dd>
&lt;dt>&lt;strong>Ex-interim Utility&lt;/strong>&lt;/dt>
&lt;dd>Expected utility after observing one&amp;rsquo;s own type,
$$u_i(\sigma|\theta_i)=\sum_{\theta_{-i}\in\Theta_{-i}}P(\theta_{-i}|\theta_i)u_i(\sigma(\theta);\theta)$$&lt;/dd>
&lt;/dl>
&lt;h3 id="equilibria-1">Equilibria&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Ex ante Equilibrium&lt;/strong> $(\sigma^\star,P)$&lt;/dt>
&lt;dd>Nash Equilibrium,
$$u_i(\sigma^\star_i,\sigma^\star_{-i})\ge u_i(\sigma^\prime_i, \sigma^\star_{-i}),\forall\sigma_i^\prime,\forall i\in N$$&lt;/dd>
&lt;dt>&lt;strong>Ex interim Equilibrium&lt;/strong> $(\sigma^\star, P)$&lt;/dt>
&lt;dd>Byesian Equilibrium,
$$u_i(\sigma_i^\star(\theta_i),\sigma_{-i}^\star|\theta_i)\ge u_i(\sigma_i^\prime(\theta_i),\sigma_{-i}^\star|\theta_i),\ \forall\sigma^\prime_i,\forall\theta_i\in\Theta_i,\forall i\in N$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong>: In a finite Bayesian Game, a strategy profile is Bayeisan Equilibrium iff it is a Nash Equilibrium.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: Every finite Bayesian game has a Bayesian Equilibrium.&lt;/p>
&lt;/blockquote>
&lt;h2 id="mechanism-design">Mechanism Design&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>General Model&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$N$ - set of players&lt;/li>
&lt;li>$X$ - set of outcomes&lt;/li>
&lt;li>$\Theta_i$ - set of private information of player $i\in N$
&lt;ul>
&lt;li>$\theta_i\in\Theta_i$ - a type of player $i$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type can manifest in preferences over the outcomes in different ways:
&lt;ul>
&lt;li>Ordinal - $\theta_i$ defines an ordering over the outcomes&lt;/li>
&lt;li>Cardinal - an utility function maps the an (outcomes, type) pair to real numbers
&lt;ul>
&lt;li>$u_i:X\times\Theta_i\to\R$ : private value model&lt;/li>
&lt;li>$u_i:X\times\Theta\to\R$ : interdependent value model&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Social Choice Function&lt;/strong> ($f$)&lt;/dt>
&lt;dd>$f:\times_{i\in N}\Theta_i\to X$&lt;/dd>
&lt;dt>&lt;strong>Indirect Mechanism&lt;/strong> $\langle M_1,M_2,\dots,M_N,g\rangle$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$M_i$ is the message space of player $i$&lt;/li>
&lt;li>$g:M_1\times M_2\times\dots\times M_N\to X$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Direct Mechanism&lt;/strong> $\langle\Theta_1,\dots,\Theta_N, g\rangle$&lt;/dt>
&lt;dd>An indirect mechanism such that $M_i=\Theta_i,\ \forall i\in N$&lt;/dd>
&lt;dt>&lt;strong>Weak Dominance&lt;/strong>&lt;/dt>
&lt;dd>For a message $m_i$ of player $i$ at $\theta_i$,
$$u_i(m_i,m_{-i})\ge u_i(m_i^\prime,m_{-i}),\ \forall m_i^\prime,\ \forall m_{-i}$$&lt;/dd>
&lt;dt>&lt;strong>Dominant Strategy Implementable [DSI]&lt;/strong>&lt;/dt>
&lt;dd>An indirect mechanism that implements a SCF through dominance with,
&lt;ul>
&lt;li>$\exist s_i:\Theta_i\to M_i$ such that $s_i(\theta_i)$ is a dominant strategy for player $i$ at $\theta_i,\ \forall\theta_i\ \forall i\in N$&lt;/li>
&lt;li>$g(s_1(\theta_1),\dots,s_N(\theta_N))=f(\theta),\ \forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Dominant Strategy Incentive Compatible [DSIC]&lt;/strong>&lt;/dt>
&lt;dd>A direct mechanism such that,
$$u_i(g(\theta_i,\theta_{-i}),\theta_i)\ge u_i(g(\theta_i^\prime,\theta_{-i}),\theta_i),\ \forall\theta_{-i},\theta_i^\prime,\theta_i,\ \forall i\in N$$
&lt;blockquote>
&lt;p>&lt;strong>Revelation Principle&lt;/strong>: An indirect mechanism is DSI $\implies$ it is DSIC.&lt;/p>
&lt;/blockquote>
&lt;/dd>
&lt;dt>&lt;strong>Bayesian Implementable&lt;/strong>&lt;/dt>
&lt;dd>An indirect mechanism that implements a SCF through Bayesian Equilibrium with,
&lt;ul>
&lt;li>$\exist, s_i:\Theta_i\to M_i$ such that $s_i(\theta_i)$ maximises ex-interim utility for player $i$ at $\theta_i,\ \forall\theta_i\ \forall i\in N$, i.e.,
$$
\mathbb{E}[u_i(g(s_i(\theta_i),s_{-i}(\theta_{-i})),\theta_i)\ |\ \theta_i]\ge\mathbb{E}[u_i(g(m_i^\prime,s_{-i}(\theta_{-i})),\theta_i)\ |\ \theta_i],\ \forall m_i^\prime,\theta_i,\ \forall i\in N
$$&lt;/li>
&lt;li>$g(s_i(\theta_i),s_{-i}(\theta_{-i}))=f(\theta),\ \forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>An indirect mechanism is DSI $\implies$ it is Bayesian implementable.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Bayeisan Incentive Compatible [BIC]&lt;/strong>&lt;/dt>
&lt;dd>A direct mechanism such that,
$$\mathbb{E}[u_i(f(\theta_i,\theta_{-i}),\theta_i)\ |\ \theta_i]\ge\mathbb{E}[u_i(f(\theta_i^\prime,\theta_{-i}),\theta_i)\ |\ \theta_i],\ \forall \theta_{-i},\theta_i^\prime,\theta_i,\ \forall i\in N$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>An indirect mechanism is Bayesian Implementable $\implies$ it is BIC.&lt;/p>
&lt;/blockquote>
&lt;h3 id="arrows-impossibility-result">Arrow&amp;rsquo;s Impossibility Result&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Individual Preferences&lt;/strong> ($R_i$)&lt;/dt>
&lt;dd>$\mathcal{R}$ is the set of ordering relations over a set of alternatives $A=\{a_1,a_2,\dots,a_m\}$. Every player has a preference $R_i\in\mathcal{R},\ \forall i\in N$ such that,
&lt;ul>
&lt;li>Completeness: $\forall a,b\in A$, $aR_ib$ or $bR_ia$&lt;/li>
&lt;li>Reflexivity: $\forall a\in A$, $aR_ia$&lt;/li>
&lt;li>Transitivity: $\forall a,b,c\in A$, $aR_ib\And bR_ic\implies aR_ic$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Linear Preferences&lt;/strong> ($P_i$)&lt;/dt>
&lt;dd>$R_i$ such that $\forall a,b\in A$, $aR_ib\And bR_ia\implies a=b$
&lt;ul>
&lt;li>Set of all linear preferences is called $\mathcal{P}$.&lt;/li>
&lt;li>Any arbitrary preference ordering $R_i$ can be decomposed into,
&lt;ul>
&lt;li>Asymmetric: $P_i$&lt;/li>
&lt;li>Symmetric: $I_i$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Arrovian Social Welfare Function [ASWF]&lt;/strong> ($F:\mathcal{R}^n\to\mathcal{R}$)&lt;/dt>
&lt;dd>Capture the collective ordering of the society given the individual preferences.
&lt;ul>
&lt;li>$F(R)=F(R_1,R_2,\dots,R_N)$&lt;/li>
&lt;li>$\hat F(R)$ is the asymmetric part of $F(R)$&lt;/li>
&lt;li>$\bar F(R)$ is the symmetric part of $F(R)$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Weak Pareto [WP]&lt;/strong>&lt;/dt>
&lt;dd>F such that $\forall a,b\in A,\forall R\in \mathcal{R}^n$
$$\forall i\in N, aP_ib\implies a\hat F(R)b$$&lt;/dd>
&lt;dt>&lt;strong>Strong Pareto [SP]&lt;/strong>&lt;/dt>
&lt;dd>F such that $\forall a,b\in A,\forall R\in \mathcal{R}^n$
$$\forall i\in N, aR_ib\ \And\ \exist j\in N, aP_jb\implies a\hat F(R)b$$&lt;/dd>
&lt;dt>&lt;strong>Agreement&lt;/strong> ($R|_{a,b}$)&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$R_i,R_i^\prime\in \mathcal{R}$ agree on $a,b\in A$ for agent $i$ iff,
$$
aP_ib\iff aP_i^\prime b\ ||\ bP_ia\iff bP_i^\prime a\ ||\ aI_ib\iff aI_i^\prime b
$$&lt;/li>
&lt;li>This means $R_i|_z=R_i^\prime|_z$ where $z=\{a,b\}$&lt;/li>
&lt;li>When this holds for every $i\in N$, $R|_z=R^\prime|_z$ where $z=\{a,b\}$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Independence of Irrelevant Alternatives [IIA]&lt;/strong>&lt;/dt>
&lt;dd>$F$ such that $\forall a,b\in A,\ \forall R,R^\prime\in\mathcal{R}^n$ and $z=\{a,b\}$,
$$R|_z=R^\prime|_z\implies F(R)|_z=F(R^\prime)|_z$$&lt;/dd>
&lt;dt>&lt;strong>Dictatorship&lt;/strong> $F^d$&lt;/dt>
&lt;dd>An ASWF where for an agent $d$, $F^d(R) = R_d$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Arrow&amp;rsquo;s Theorem&lt;/strong>: For $|A|\ge3$ if $F$ is $IIA$ and $WP$ then $F$ must be dictatorial.&lt;/p>
&lt;/blockquote>
&lt;h3 id="social-choice-functions">Social Choice Functions&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Social Choice Function [SWF]&lt;/strong> $f:\mathcal{P}^n\to A$&lt;/dt>
&lt;dd>Here $\mathcal{P}$ is the set of all linear preference orderings and $A$ is the set of alternatives&lt;/dd>
&lt;/dl>
&lt;p>One SCF is voting where the scoring is done by any one of the following methods and the winner is the alternative with the highest score:&lt;/p>
&lt;ol>
&lt;li>Plurality: $(1,0,\dots,0,0)$&lt;/li>
&lt;li>Veto: $(1,1,\dots,1,0)$&lt;/li>
&lt;li>Borda: $(m-1,m-2,\dots,1,0)$&lt;/li>
&lt;li>Harmonic: $(1,1/2,\dots,1/(m-1),1/m)$&lt;/li>
&lt;li>$k$-approval: $(1,\cdots (k\text{ times})\cdots,1,0,\dots,0)$&lt;/li>
&lt;li>Plurality with runoff (eliminations)&lt;/li>
&lt;li>Maxmin: $\text{score}(a)=\min_y|\{i:aP_iy\}|$&lt;/li>
&lt;li>Copeland: Score is number of wins in pairwise elections&lt;/li>
&lt;/ol>
&lt;dl>
&lt;dt>&lt;strong>Condorcet Winner&lt;/strong>&lt;/dt>
&lt;dd>A candidate that defeats all other candidates in pairwise election&lt;/dd>
&lt;dt>&lt;strong>Condorcet Consistent&lt;/strong>&lt;/dt>
&lt;dd>A voting rule that always selects the &lt;em>Condorcet winner&lt;/em> when one exists.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>None out of Plurality, Copeland, Maxmin are Condorcet consistent.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Pareto Dominance&lt;/strong>&lt;/dt>
&lt;dd>An alternative $a$ is Pareto dominant over $b$ when $\forall i\in N,\ aP_ib$.&lt;/dd>
&lt;dt>&lt;strong>Pareto Efficiency [PE]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P\in \mathcal{P}^n$ and $\forall a\in A$, a is Pareto dominated $\implies f(P)\not ={a}$&lt;/dd>
&lt;dt>&lt;strong>Unanimity [UN]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P\in\mathcal{P}^n$ and $\exists a\in A$, $P_1(1)=P_2(1)=\dots=P_N(1)=a\implies f(P)=a$&lt;/dd>
&lt;dt>&lt;strong>Onto [ONTO]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall a\in A$, $\exists P^{(a)}\in\mathcal{P}^n$ where $f(P^{(a)})=a$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PE $\implies$ UN $\implies$ ONTO&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Manipulability&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\exists i\in N$ and a profile $P\in\mathcal{P}^n$ such that $\exists P_i^\prime,\ f(P_i^\prime,P_{-i})P_if(P_i,P_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Strategy-proof [SP]&lt;/strong>&lt;/dt>
&lt;dd>An SCF that is not manipulable by any player for any profile&lt;/dd>
&lt;dt>&lt;strong>Dominated Set&lt;/strong> ($D:A\times\mathcal{P}\to \mathcal{P}(A)$)&lt;/dt>
&lt;dd>$D(a,P_i)=\{b\in A:aP_ib\}$&lt;/dd>
&lt;dt>&lt;strong>Monotone [MONO]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P,P^\prime\in\mathcal{P}^n$ and $\exists a\in A$, $f(P)=a$ and $D(a,P_i)\sube D(a,P_i^\prime)\ \forall i\in N\implies f(P^\prime)=a$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : SP $\iff$ MONO.&lt;/p>
&lt;p>&lt;strong>Lemma&lt;/strong> : MONO+ONTO $\implies$ PE.&lt;/p>
&lt;p>&lt;strong>Corollary&lt;/strong> : SP+PE $\iff$ SP+UN $\iff$ SP+ONTO&lt;/p>
&lt;p>&lt;strong>Gareth and Satterthwaite Theorem&lt;/strong> : If $|A|\ge 3$ then SP+ONTO $\iff$ Dictatorial.&lt;/p>
&lt;/blockquote>
&lt;h3 id="domain-restrictions">Domain Restrictions&lt;/h3>
&lt;h4 id="single-peaked-preferences">Single Peaked Preferences&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Single Peaked Preferences&lt;/strong> ($\mathcal{S}$)&lt;/dt>
&lt;dd>Set of linear preferences $P$ w.r.t. a common order $&amp;lt;$ over the alternatives such that
&lt;ul>
&lt;li>$\forall b,c\in A,\ b&amp;lt;c\le P(1)\implies cPb$&lt;/li>
&lt;li>$\forall b,c\in A,\ P(1)\le b&amp;lt;c\implies bPc$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>From now onwards $f:\mathcal{S}^n\to A$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Median Voter SCF&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\exists B=\{y_1, y_2,\dots,y_{n-1}\},\forall P\in\mathcal{S}^n,\ f(P)=\text{median}(B\cup\text{peaks}(P))$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Points in $B$ are called phantom peaks and these are independent of $P$.&lt;/p>
&lt;p>&lt;strong>Moulin&amp;rsquo;s Theorem&lt;/strong> : Every median voter SCF is SP.&lt;/p>
&lt;p>&lt;strong>Claim&lt;/strong> : Let $p_{\min}$ and $p_{\max}$ be the leftmost and rightmost peaks of $P$ according to $&amp;lt;$, then $f$ is PE $\iff\ f(P)\in[p_{\min},p_{\max}]$.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : SP $\implies$ MONO.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $f$ is SP then ONTO $\iff$ UN $\iff$ PE.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Anonimity [ANON]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P$ and for all permutations of agents $\sigma$, $f(P^\sigma)=f(P)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Moulin&amp;rsquo;s Theorem 2&lt;/strong> : $f$ is SP+ONTO+ANON $\iff$ $f$ is median voter SCF.&lt;/p>
&lt;/blockquote>
&lt;h4 id="task-allocation-domain">Task Allocation Domain&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Task Allocation SCFs&lt;/strong> ($f:T^n\to A$)&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Here $A=\{(a_1,a_2,\dots,a_n)\in [0,1]^n\ |\ \sum_{i=1}^na_i=1\}$.&lt;/li>
&lt;li>For $P\in T^n,\ f(P)=(f_1(P),f_2(P),\dots,f_n(P))$.&lt;/li>
&lt;li>Each player has a peak allocation $p_i=w/2c_i$ where the reward is given by $wt-c_i t^2$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Pareto Efficiency [PE]&lt;/strong>&lt;/dt>
&lt;dd>An SCF such that $\forall P\in T^n, \not\exists a\in A$,
$$
aR_if(P)\ \ \forall i\in N\\
aP_jf(P)\ \ \exists j\in N
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Implications of Pareto Efficiency:&lt;/p>
&lt;ul>
&lt;li>If $\sum_{i=1}^np_i=1$ then $\forall i\in N, f_i(P)=p_i$&lt;/li>
&lt;li>If $\sum_{i=1}^np_i&amp;gt;1$ then $\forall i\in N, f_i(P)\ge p_i$&lt;/li>
&lt;li>If $\sum_{i=1}^np_i&amp;lt;1$ then $\forall i\in N, f_i(P)\le p_i$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Serial Dictatorship&lt;/strong>&lt;/dt>
&lt;dd>Each agent gets their peak allocation except the last one which is given the leftover share.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Serial Dictatorship is not ANON since it is unfair to the last agent.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Proportional SCF&lt;/strong>&lt;/dt>
&lt;dd>Every agent is assigned a share that is $1/\sum_{i=1}^np_i$ times their peak allocation.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Proportional SCF is not SP.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Uniform Rule&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$\sum_{i=1}^np_i=1:f_i(P)=p_i$&lt;/li>
&lt;li>$\sum_{i=1}^np_i&amp;gt;1:f_i(P)=\max[p_i,\mu(P)]$ where $\mu$ solves $\sum_{i=1}^n\max[\mu,p_i]=1$&lt;/li>
&lt;li>$\sum_{i=1}^np_i&amp;lt;1:f_i(P)=\min[p_i,\lambda(P)]$ where $\lambda$ solves $\sum_{i=1}^n\min[\lambda,p_i]=1$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Sprumont Theorem&lt;/strong>: Uniform Rule is SP, ANON and PE.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: SCF in task allocation domain is SP, PE and ANON $\iff$ it is an uniform rule.&lt;/p>
&lt;/blockquote>
&lt;h4 id="quasi-linear-domain">Quasi-Linear Domain&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Quasi-linear Payoff&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Preferences are of the form $a\in A$&lt;/li>
&lt;li>Payments are defined for every player as $\pi=(\pi_1,\pi_2,\dots,\pi_n)\in\R^n$&lt;/li>
&lt;li>Utility of an agent $i$ depends on the outcome $(a,\pi)$ and their type $\theta_i\in\Theta_i$ as,
$$
u_i((a,\pi),\theta_i)=v_i(a,\theta_i)-\pi_i
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Quasi-Linear Preferences&lt;/strong> $(f,p)$&lt;/dt>
&lt;dd>Has following components,
&lt;ol>
&lt;li>Allocation rule:
$$
f:\Theta_1\times\Theta_2\times\cdots\times\Theta_n\to A
$$&lt;/li>
&lt;li>Payment function: $p=(p_1,p_2,\dots,p_n)$ such that,
$$
p_i:\Theta_1\times\Theta_2\times\cdots\times\Theta_n\to\R
$$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;p>Examples of Allocation rules:&lt;/p>
&lt;ul>
&lt;li>Constant rule: $f^c(\theta)=a\in A,\forall\theta\in\Theta$&lt;/li>
&lt;li>Dictatorial rule: $f^D(\theta)=\arg\max_{a\in A}v_d(a,\theta_d),\forall\theta\in\Theta$ and $\exists d\in N$&lt;/li>
&lt;li>Allocative efficiency / Utilitarian rule:
$$
f^{AE}(\theta) = \arg\max_{a\in A}\sum_{i\in N}v_i(a,\theta_i)
$$&lt;/li>
&lt;li>Affine Maximizer rule: When $\lambda_i\ge 0$ and not all zero,
$$
f^{AM}(\theta) = \arg\max_{a\in A}\left(\sum_{i\in N}\lambda_iv_i(a,\theta_i)+\kappa(a)\right)
$$&lt;/li>
&lt;li>Max-min / Egalitarian rule:
$$
f^{MM}(\theta) = \arg\max_{a\in A}\min_{i\in N}v_i(a,\theta_i)
$$&lt;/li>
&lt;/ul>
&lt;p>Examples of Payment functions:&lt;/p>
&lt;ul>
&lt;li>No deficit: $\sum_{i\in N}p_i(\theta)\ge 0,\forall\theta\in\Theta$&lt;/li>
&lt;li>No subsidy: $p_i(\theta)\ge 0,\forall\theta\in\Theta,\forall i\in N$&lt;/li>
&lt;li>Budget Balanced: $\sum_{i\in N}p_i(\theta) = 0,\forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>&lt;strong>Dominant Strategy Incentive Compatible [DSIC]&lt;/strong>&lt;/dt>
&lt;dd>An $(f,p)$ such that $\forall\theta_{-i}\in\Theta_{-i},\forall\theta_i,\tilde\theta_i\in\Theta_i,\forall i\in N$,
$$v_i(f(\theta_i,\theta_{-i}),\theta_i)-p_i(\theta_i,\theta_{-i})\ge v_i(f(\tilde\theta_i,\theta_{-i}),\theta_i)-p_i(\tilde\theta_i,\theta_{-i})$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>If $(f,p)$ is DSIC then for any $q$ defined as,
$$
q_i(\theta_i,\theta_{-i})=p_i(\theta_i,\theta_{-i})+h_i(\theta_{-i}),\ \forall\theta,\forall i\in N
$$
$(f,q)$ is also DSIC.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Pareto Optimal&lt;/strong>&lt;/dt>
&lt;dd>A mechanism $(f,p)$ such that $\forall\theta\in\Theta$ there does not exist $b\in A$ and payments $(\pi_1,\pi_2,\dots,\pi_n)$ with $\sum_{i\in N}\pi_i\ge \sum_{i\in N}p_i(\theta)$,
$$v_i(b,\theta_i)-\pi_i\ge v_i(f(\theta),\theta_i)-p_i(\theta)$$
with inequality being strict for some $i\in N$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Pareto Optimal $\iff$ Allocatively efficient.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Groves Payment fucntion&lt;/strong>&lt;/dt>
&lt;dd>For agent $i\in N$ and an arbitrary $h_i:\Theta_{-i}\to\R$,
$$p_i^G(\theta_i,\theta_{-i}) = h_i(\theta_{-i})-\sum_{j\not ={i}}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Groves payment functions implement the Allocatively efficiency allocation function.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: Groves mechanisms are DSIC.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Vickrey-Clarke-Groves Mechanism [VCG]&lt;/strong>&lt;/dt>
&lt;dd>Groves mechanism with $h_i(\theta_{-i})$ as,
$$h_i(\theta_{-i})=\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)\\
\ \\
p_i^{VCG}(\theta_i,\theta_{-i})=\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)-\sum_{j\in N,\ j\not={i}}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)\\
\ \\
u_i^{VCG}(\theta_i,\theta_{-i}) = \sum_{j\in N}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)-\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)$$&lt;/dd>
&lt;dt>&lt;strong>Combinatorial Allocation&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$M=\{1,2,\dots,m\}$ : set of objects&lt;/li>
&lt;li>$\Omega=2^M$ : set of bundles&lt;/li>
&lt;li>$\theta_i:\Omega\to\R$ : type/values of player $i$ such that $\theta_i(s)\ge 0,\ \forall s\in\Omega$ and $\theta_i(a)=\theta_i(a_i)$&lt;/li>
&lt;li>$N=\{1,2,\dots,n\}$ : set of agents&lt;/li>
&lt;li>$A=\{(a_0,a_1,\dots,a_n)\ |\ a_i\in\Omega,a_i\cap a_j=\empty\ \forall i\not={j},\bigcup_{i=0}^na_i=\Omega\}$ : set of allocations where $a_0$ is the set of unallocated items&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Claim&lt;/strong>: The payment of an agent that gets no goods in VCG mechanism is zero.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Individually Rational&lt;/strong>&lt;/dt>
&lt;dd>A mechanism $(f,p)$ such that $v_i(f(\theta),\theta_i)-p_i(\theta)\ge 0,\ \forall\theta\in\Theta,\ \forall i\in N$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Claim&lt;/strong>: In allocation of goods VCG mechanism is Individually rational.&lt;/p>
&lt;/blockquote></description></item><item><title>Artificial Intelligence and Machine Learning</title><link>https://adityakadoo.github.io/Scrolls/courses/ai_ml/</link><pubDate>Mon, 05 Sep 2022 06:52:35 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/ai_ml/</guid><description>&lt;h2 id="probability">Probability&lt;/h2>
&lt;h3 id="basic-terms">Basic Terms&lt;/h3>
&lt;h4 id="sample-space">Sample Space&lt;/h4>
&lt;dl>
&lt;dt>Sample Space $(S)$&lt;/dt>
&lt;dd>The set of all possible outcomes of an experiment.
$$
P(S)=1,P(\empty)=0
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="probability-distribution">Probability Distribution&lt;/h4>
&lt;dl>
&lt;dt>Probability Distribution $(p)$&lt;/dt>
&lt;dd>A function that gives the probabilities of occurence of different possible outcomes of an experiment.
$$
p:S\rightarrow[0,1]\\
\sum_{x\in S}p(x)=1
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="event">Event&lt;/h4>
&lt;dl>
&lt;dt>Event $(E)$&lt;/dt>
&lt;dd>A set of outcomes of an experiement i.e. a subset of the sample space.
$$
E\sube S
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="probability-of-an-event">Probability of an Event&lt;/h4>
&lt;dl>
&lt;dt>Probability of an event $P(E)$&lt;/dt>
&lt;dd>The likelihood of an event happening. Mathematically given as,
$$
P(E)=\sum_{x\in S}p(x)\\
P(\overline E)=1-P(E),\ \overline E=S-E
P(E_1\cup E_2)=P(E_1)+P(E_2)-P(E_1\cap E_2)
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="expectation">Expectation&lt;/h4>
&lt;dl>
&lt;dt>Expectation $E[.]$&lt;/dt>
&lt;dd>For a RV $X$ on $\R$ with PMF $P$ expectation is defined as,
$$
E[X]=\sum_xP(X=x)
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Linearity&lt;/strong>: $E[\alpha X+\beta Y]=\alpha E[X]+\beta E[Y]$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>MSE minimizer&lt;/strong>: Solution for $E[(X-z)^2]$ is $z=E[X]$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Expectation of Product&lt;/strong>: $E[XY]=E[X]E[Y]$&lt;/p>
&lt;/blockquote>
&lt;h4 id="variance">Variance&lt;/h4>
&lt;dl>
&lt;dt>Varaince $\text{Var}[.]$&lt;/dt>
&lt;dd>For a RV $X$,
$$
\text{Var}[X]=E[X^2]-E[X]^2
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\text{Var}[\alpha X+\beta]=\alpha^2\text{Var}[X]$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>$\text{Var}[X+Y]=\text{Var}[X]+\text{Var}[Y]$ if $X$ and $Y$ are independent&lt;/p>
&lt;/blockquote>
&lt;h4 id="covariance">Covariance&lt;/h4>
&lt;dl>
&lt;dt>Covariance $(\text{Cov}[.,.])$&lt;/dt>
&lt;dd>For RVs $X$ and $Y$, covariance is defined as
$$
\text{Cov}[X,Y]=E[XY]-E[X]E[Y]
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\text{Cov}[X,X]=\text{Var}[X]$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>$\text{Cov}[X+Z,Y]=\text{Cov}[X,Y]+\text{Cov}[Z,Y]$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>$\text{Cov}[X,Y]=0 \iff X$ and $Y$ are independent&lt;/p>
&lt;/blockquote>
&lt;h3 id="important-results">Important Results&lt;/h3>
&lt;h4 id="union-bound">Union Bound&lt;/h4>
&lt;p>$$
P(E_1\cup E_2)\le P(E_1)+P(E_2)
$$&lt;/p>
&lt;h4 id="disjoint-events">Disjoint Events&lt;/h4>
&lt;p>$$
P(\bigcup_{i=1}^nE_i)=\sum_{i=1}^np(x)
$$&lt;/p>
&lt;h4 id="conditional-probability">Conditional Probability&lt;/h4>
&lt;p>For two event $E_1$ and $E_2$,
$$
P(E_1|E_2)=\dfrac{P(E_1\cap E_2)}{P(E_2)}
$$&lt;/p>
&lt;h4 id="bayes-theorem">Bayes&amp;rsquo; Theorem&lt;/h4>
&lt;p>$$
P(E_1|E_2)=\dfrac{P(E_2|E_1)P(E_1)}{P(E_2)}
$$&lt;/p>
&lt;h4 id="marginal-distribution">Marginal Distribution&lt;/h4>
&lt;p>For 2 random variables $X$ and $Y$ the joint distribution is $P(X,Y)$ and the probability that $X=x$ is given by,
$$
P(X=x)=\sum_YP(X=x,Y=y)
$$&lt;/p>
&lt;h4 id="independent-random-variables">Independent Random Variables&lt;/h4>
&lt;p>$X$ and $Y$ are independent w.r.t. each other if,
$$
P(X=x,Y=y)=P(X=x)\cdot P(Y=y)
$$&lt;/p>
&lt;h4 id="chebyshevs-inequality">Chebyshev&amp;rsquo;s Inequality&lt;/h4>
&lt;p>If $X$ is a RV with mean $\mu$ and variance $\sigma^2$ then $\forall\alpha&amp;gt;0$
$$
P[|X-\mu|\ge\alpha]\le\dfrac{\sigma^2}{\alpha^2}
$$&lt;/p>
&lt;h4 id="convolution">Convolution&lt;/h4>
&lt;p>When $Z=X+Y$,
$$
P(Z=z)=\sum_xP(X=x)P(Y=z-x)
$$&lt;/p>
&lt;h3 id="data-to-pdf">Data to PDF&lt;/h3>
&lt;p>Consider a PDF $f:\R\rightarrow \R_0^+$ which needs to be found. We can generate samples from this PDF.
$$
E_f[x^k]=\lim_{n\rightarrow\infty}\dfrac{\sum_{i=1}^NX_i^k}{N}
$$
We define the moment generating function $M(\omega)$ as,
$$
M(\omega)=\int_{-\infty}^{\infty}e^{i\omega x}f(x)dx\\
=1+i\omega E[x]-\dfrac{\omega^2E[x^2]}{2!}-i\dfrac{\omega^3E[x^3]}{3!}\cdots
$$
By using the Inverse Fourier Transform we get,
$$
f(x)=\dfrac{1}{s\pi}\int_{-\infty}^{\infty}e^{-i\omega x}M(\omega)d\omega
$$&lt;/p>
&lt;h2 id="linear-algebra">Linear Algebra&lt;/h2>
&lt;h3 id="vectors-and-matrices">Vectors and Matrices&lt;/h3>
&lt;dl>
&lt;dt>Vector $v$&lt;/dt>
&lt;dd>Ordered sequence of numbers.&lt;/dd>
&lt;dt>Linearly Independent&lt;/dt>
&lt;dd>A set of vectors is LI if one of them can&amp;rsquo;t be reconstructed by taking linear combination of others.&lt;/dd>
&lt;dt>Matrix $A,B,&amp;hellip;$&lt;/dt>
&lt;dd>Ordered sequence of vectors.&lt;/dd>
&lt;/dl>
&lt;h3 id="linear-equations">Linear Equations&lt;/h3>
&lt;p>$$
Ax=B
$$
here $A\in\R^{m\times n}$, $x\in\R^n$ and $b\in\R^m$. This is solved using Gaussian Elimination.&lt;/p>
&lt;h3 id="vector-spaces">Vector Spaces&lt;/h3>
&lt;dl>
&lt;dt>Vector Space $(\mathcal V)$&lt;/dt>
&lt;dd>A set of vectors qualifies as a vector space if it is closed under the operation of summation and multiplication.&lt;/dd>
&lt;dt>Column Space $\mathcal C(A)$&lt;/dt>
&lt;dd>The vector space spanned by the column vectors of matrix $A$.&lt;/dd>
&lt;dt>Null Space $\mathcal N(A)$&lt;/dt>
&lt;dd>Solutions of the equation $Ax=0$.&lt;/dd>
&lt;dt>Rank $r(A)$&lt;/dt>
&lt;dd>The maximal number of linearly independent columns of matrix $A$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Rank-Nullity Theorem&lt;/strong>: $r(\mathcal C(A))+r(\mathcal N(A))=\text{dim}(A)$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>A square matrix $A$ of dimensions $n\times n$ is invertible iff $r(A)=n$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>$\lim_{k\rightarrow\infty}W^k=\dfrac{\boldsymbol{1}\boldsymbol{1}^T}{n}$ iff&lt;/p>
&lt;/blockquote>
&lt;p>$$
\boldsymbol{1}^TW=\boldsymbol{1}^T\\
W\boldsymbol{1}=\boldsymbol{1}\\
\rho(W-\dfrac{\boldsymbol{1}\boldsymbol{1}^T}{n})&amp;lt;1
$$&lt;/p>
&lt;blockquote>
&lt;p>where $\rho(.)$ denotes the spectral radius of a matrix i.e. maximum of the absolute values of its eigenvalues.&lt;/p>
&lt;/blockquote>
&lt;h2 id="loss-function-design">Loss Function Design&lt;/h2>
&lt;h3 id="datasets">Datasets&lt;/h3>
&lt;dl>
&lt;dt>Train set&lt;/dt>
&lt;dd>The dataset on which we train the model.&lt;/dd>
&lt;dt>Validation set&lt;/dt>
&lt;dd>For hyper-parameter tuning&lt;/dd>
&lt;dt>Test set&lt;/dt>
&lt;dd>For judging the model&amp;rsquo;s accuracy on unseen data.&lt;/dd>
&lt;/dl>
&lt;p>Consider a classification task where we have a dataset $D$ with $(x_i,y_i)$ values. $y_i\in\{-1,1\}$ and $x_i\in\R^d$ is the feature vector. Lets say
$$
Y=H(X)
$$
We must find $H(.)$.&lt;/p>
&lt;h3 id="loss-minimization">Loss Minimization&lt;/h3>
&lt;p>We define a Loss Function $L(.)$ that takes a function $H:\R^d\rightarrow\{1,-1\}$ needs to be minimised.
$$
H^*=\text{arg}_H\text{min}L(H)
$$&lt;/p>
&lt;p>Following are possible examples of $L$ given by,&lt;/p>
&lt;ul>
&lt;li>General Hypothesis: $L(H) = \sum_{i\in D}\mathbb{I}(H(x_i)\ne y_i)$&lt;/li>
&lt;li>Constant Hypothesis: $L(H) = \sum_{i\in D}\mathbb{I}(c\ne y_i)$&lt;/li>
&lt;li>Linear Hypothesis: $L(H) = \sum_{i\in D}\mathbb{I}(w^Tx_i+b\ne y_i)$&lt;/li>
&lt;/ul>
&lt;p>Assuming Linear Hypothesis we can make following modifications:&lt;/p>
&lt;ul>
&lt;li>Linear Hypothesis with Absolute Difference:
$$
\{w^*,b^*\}=\text{arg}_{w,b}\text{min}\sum_D|w^Tx_i+b-y_i|
$$&lt;/li>
&lt;li>Linear Hypothesis with Signum and Indicator Cost:
$$
\{w^*,b^*\}=\text{arg}_{w,b}\text{min}\sum_D\mathbb{I}(\text{sgn}(w^Tx_i+b)\ne y_i)
$$&lt;/li>
&lt;li>Linear Hypothesis with Sigmoid Mapping:
$$
f(x_i)=\dfrac{1}{1+e^{-(w^Tx_i+b)}}
$$
$$
\{w^*,b^*\}=\text{arg}_{w,b}\text{min}\sum_D\mathbb{I}(f(x_i)\ne \dfrac{y_i+1}{2})
$$&lt;/li>
&lt;li>Linear, Sigmoid and ReLU:
$$
\{w^*,b^*\}=\text{arg}_{w,b}\text{min}\sum_D\text{max}(0,(\dfrac{1}{2}-f(x_i)\cdot y_i))
$$&lt;/li>
&lt;/ul>
&lt;p>Another example from Probabilistic Analysis:&lt;/p>
&lt;ul>
&lt;li>Binary Cross Entropy Loss:
$$
\{w^*,b^*\}=\text{arg}_{w,b}\text{min}\sum_D[-(\dfrac{y_i+1}{2})\log(f(x_i))-(1-\dfrac{y_i+1}{2})\log(1-f(x_i))]
$$&lt;/li>
&lt;/ul>
&lt;h3 id="accounting-for-noise">Accounting for Noise&lt;/h3>
&lt;p>When $L=\sum_{i\in D}\max(0,-y_i(w^Tx_i+b))$, if $w^Tx_i+b$ takes a very small positive or negative value then the loss function should not consider this reliable as it could be the result of noise in measurement. Thus to deal with such values, we can add a $\plusmn1$ around the decision boundary.&lt;/p>
&lt;h2 id="regression">Regression&lt;/h2>
&lt;p>Consider the problem of housing price prediction. We have a feature vector with $n$ features given by the column vector $x\in\R^{n\times1}$. The price of a house is modelled by the RV $Y$. We need to find a function $f:\R^n\rightarrow\R$ that models the relation between $X$ and $Y$.&lt;/p>
&lt;h3 id="mean-squared-loss">Mean Squared Loss&lt;/h3>
&lt;p>Assuming Gaussian noise between $f(x_i)$ and $y_i$ we get,
$$
y_i=f(x_i)+e_i\\
e_i=y_i-f(x_i)
$$
where $e\sim\mathcal{N}(0,\sigma^2)$. Maximizing the likelihood of $e_i$ we get the Mean Squared Loss.&lt;/p>
&lt;blockquote>
&lt;p>Similarly we get an $L_1$ Loss if we model noise as Laplacian distribution.&lt;/p>
&lt;/blockquote>
&lt;h3 id="solving-of-linear-regression-wrt-msl">Solving of Linear Regression wrt MSL&lt;/h3>
&lt;p>Assuming $f(x)=w^tx+b$ and,
$$
(w^*,b^*)=\arg\min\sum_{i\in D}(y_i-w^tx_i-b)^2
$$&lt;/p>
&lt;blockquote>
&lt;p>$b^*=E[Y]$&lt;/p>
&lt;/blockquote>
&lt;p>$$
w^*=\arg\dfrac{d((y-w^tx)^2)}{dw}=0
$$
On solving this we get,&lt;/p>
&lt;blockquote>
&lt;p>$w^*=\dfrac{y}{\lambda}(I-\dfrac{xx^T}{\lambda+||x||^2_2})x$&lt;/p>
&lt;/blockquote>
&lt;p>As $\lambda\rightarrow0$ this expression doesn&amp;rsquo;t give a solution. Another way of writing this solution is,&lt;/p>
&lt;blockquote>
&lt;p>$w^*=(X^TX)^{-1}X^TY$&lt;/p>
&lt;/blockquote>
&lt;h3 id="invertibility-of-xtx">Invertibility of $X^TX$&lt;/h3>
&lt;dl>
&lt;dt>Condition number&lt;/dt>
&lt;dd>The ratio of minimum eigenvalue to maximum eigenvalue.
$$
\text{Cond}(A)=\dfrac{\min(eigen(A))}{\max(eigen(A))}
$$&lt;/dd>
&lt;/dl>
&lt;p>A high condition number means the matrix can be inverted. A way to do this is to add a factor of $\lambda I$ to the matrix $X^TX$ since this lower bounds the condition number.This is also the solution of a particular Loss function as shown below.&lt;/p>
&lt;h2 id="regularisation">Regularisation&lt;/h2>
&lt;p>There are different types of regularisation techniques such as:&lt;/p>
&lt;ul>
&lt;li>L1 regularisation&lt;/li>
&lt;li>L2 regularisation&lt;/li>
&lt;li>Dropout regularisation&lt;/li>
&lt;/ul>
&lt;h3 id="l2-regularisation">L2 regularisation&lt;/h3>
&lt;p>$$
w^*=\sum_{i\in D}(y_i-w^Tx_i)^2+\lambda||w||^2
$$&lt;/p>
&lt;p>On solving we get,
$$
w^*=(X^TX+\lambda I)^{-1}X^TY
$$&lt;/p>
&lt;h3 id="overfitting">Overfitting&lt;/h3>
&lt;p>Overfitting occures when the model is constrained to the training set and not able to perform well on the test set, here the gap between the training error and testing error is large.&lt;/p></description></item><item><title>Algorithms</title><link>https://adityakadoo.github.io/Scrolls/cp/algorithms/</link><pubDate>Fri, 02 Sep 2022 09:46:58 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/cp/algorithms/</guid><description>&lt;h2 id="numerical-methods-3">Numerical Methods (3)&lt;/h2>
&lt;h3 id="ternary-search">Ternary Search&lt;/h3>
&lt;p>We are given a funtion $f(x)$ which is unimodal on an interval $[l,r]$. This means it has one of the following two behaviours:&lt;/p>
&lt;ol>
&lt;li>The function strictly increases first, reaches maximum and then strictly decreases.&lt;/li>
&lt;li>The function strictly decreases first, reaches minimum and then strictly increases.&lt;/li>
&lt;/ol>
&lt;p>Here we assume the first case and find the maximum of $f(x)$ on the interval $[l,r]$.&lt;/p>
&lt;h4 id="implementation">Implementation&lt;/h4>
&lt;h5 id="iterative">Iterative&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="recursive">Recursive&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof">Proof&lt;/h4>
&lt;p>$$n=r-l+1$$&lt;/p>
&lt;h5 id="basis">Basis&lt;/h5>
&lt;p>If $n=1$ then $a_0$ is the only and the maximum element&lt;/p>
&lt;h5 id="induction">Induction&lt;/h5>
&lt;p>Assuming our algorithm works for all arrays of size $\le n$. Consider an array $a$ with size $n+1$.
$$m_1 = l+\lfloor\dfrac{r-l}{3}\rfloor$$
$$m_2 = r-\lfloor\dfrac{r-l}{3}\rfloor$$&lt;/p>
&lt;ul>
&lt;li>If $a_{m_1}&amp;lt;a_{m_2}$ then the maximum can&amp;rsquo;t lie before $m_1$ therefore the max of $a[m_1+1:r]$ is the result.&lt;/li>
&lt;li>If $a_{m_1}&amp;gt;a_{m_2}$ then the maximum can&amp;rsquo;t lie after $m_2$ therefore the max of $a[l:m_2-1]$ is the result.&lt;/li>
&lt;li>If $a_{m_1}=a_{m_2}$ then the maximum can&amp;rsquo;t lie beyond $m_1$ or $m_2$ therefore the max of $a[m_1+1:m_2]$ is the result.&lt;/li>
&lt;/ul>
&lt;p>In every case the new search space is of size less than $n+1$ and our algorithm will work on it.&lt;/p>
&lt;h4 id="analysis">Analysis&lt;/h4>
&lt;p>$$
T(n)=T(2n/3)+\mathcal{O}(1)
$$
Thus time complexity is $\mathcal O(\log n)$.&lt;/p>
&lt;h3 id="newtons-method-for-finding-roots">Newton&amp;rsquo;s method for finding roots&lt;/h3>
&lt;p>Used to find root of a function $f(x)$ on some interval $[a,b]$. It is assumed that $f$ is continuous and differentiable over this interval.&lt;/p>
&lt;h4 id="implementation-1">Implementation&lt;/h4>
&lt;h5 id="to-find-real-square-root-of-a-number">To find real square root of a number&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mf">1e-9&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">f1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="to-find-integer-part-of-square-root-of-a-number">To find integer part of square root of a number&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">decreased&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">decreased&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">decreased&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">nx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof-1">Proof&lt;/h4>
&lt;p>It converges towards the root with every iteration.&lt;/p>
&lt;p>$$
|x_{i+1}-\sqrt{n}|=|\dfrac{x_i+\frac{n}{x_i}}{2}-\sqrt{n}|=\dfrac{|(\sqrt{x_i}-\dfrac{\sqrt{n}}{\sqrt{x_i}})^2|}{2}\le|x_i-\sqrt{n}|
$$&lt;/p>
&lt;h4 id="analysis-1">Analysis&lt;/h4>
&lt;p>For $n$-digit precision requirement the complexity is $\mathcal O(n)$.&lt;/p>
&lt;h3 id="simpsons-formula">Simpson&amp;rsquo;s Formula&lt;/h3>
&lt;p>Used to calculate the integral of a funtion $f$ over the interval $[a,b]$.&lt;/p>
&lt;h4 id="implementation-2">Implementation&lt;/h4>
&lt;p>Here $f(x)$ is some pre-defined function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">#define N 1000*1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">integrate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{...};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof-2">Proof&lt;/h4>
&lt;p>Let $n$ be some natural number. We divide the integration segment $[a,b]$ into $2n$ equal parts:
$$
x_i=a+ih,\ i=0\dots2n,\\ h=\dfrac{b-a}{2n}
$$
Now we calculate the integral separately on each of the segments $[x_{2i-2},x_{2i}$, $i=1\dots n$ and then add all the values.&lt;/p>
&lt;p>So, suppose we consider the next segment $[x_{2i-2},x_{2i}]$, $i=1\dots n$. Replace the function $f(x)$ on it with a parabola $P(x)$ passing through 3 points $(x_{2i-2},x_{2i-1},x_{2i})$. Such a parabola always exists and is unique; it can be found analytically. For instance we could construct it using the Lagrange polynomial interpolation. The only remaining thing left to do is to integrate this polynomial. If you do this for a general function $f$, you receive a remarkably simple expression:
$$
\int_{x_{2i-2}}^{x_{2i}}f(x)dx\approx\int_{x_{2i-2}}^{x_{2i}}P(x)dx=(f(x_{2i-2})+4f(x_{2i-1})+f(x_{2i}))\frac{h}{3}
$$
Adding these values over all segments, we obtain the final Simpson&amp;rsquo;s formula:
$$
\int_a^bf(x)dx\approx(f(x_0)+4f(x_1)+2f(x_2)+\cdots+4f(x_{2N-1})+f(x_{2N}))\frac{h}{3}
$$&lt;/p>
&lt;h4 id="analysis-2">Analysis&lt;/h4>
&lt;p>Only depends on the number of divisions thus $\mathcal O(n)$.&lt;/p>
&lt;h2 id="dynamic-programming-4">Dynamic Programming (4)&lt;/h2>
&lt;h2 id="combinatorics-10">Combinatorics (10)&lt;/h2>
&lt;h2 id="data-structures-10">Data Structures (10)&lt;/h2>
&lt;h2 id="string-processing-12">String Processing (12)&lt;/h2>
&lt;h2 id="linear-algebra-4">Linear Algebra (4)&lt;/h2>
&lt;h2 id="geometry-23">Geometry (23)&lt;/h2>
&lt;h2 id="algebra-27">Algebra (27)&lt;/h2>
&lt;h2 id="graphs-44">Graphs (44)&lt;/h2>
&lt;h2 id="miscellaneous-12">Miscellaneous (12)&lt;/h2></description></item><item><title>Natural Language Processing</title><link>https://adityakadoo.github.io/Scrolls/courses/natural_language_processing/</link><pubDate>Wed, 24 Aug 2022 09:49:01 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/natural_language_processing/</guid><description>&lt;h2 id="part-of-speech-tagging">Part of Speech Tagging&lt;/h2>
&lt;h3 id="hmm-based-tagging">HMM-based Tagging&lt;/h3>
&lt;h4 id="parameters">Parameters&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Input&lt;/em>: A sequence of words and labels&lt;/li>
&lt;li>&lt;em>Output&lt;/em>: A sequence of labels for every word&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Penn tag-set is generally used for POS tagging in english language.&lt;/p>
&lt;/blockquote>
&lt;h4 id="hidden-markov-model">Hidden Markov Model&lt;/h4>
&lt;p>There are 2 kinds of probabilities:&lt;/p>
&lt;ol>
&lt;li>Bigram Probabilities $(P(t_1|t_0))$ : Probability of current word being tag $t_1$ when previous word was tagged $t_0$.&lt;/li>
&lt;li>Lexical Probabilities $(P(w|t))$: Probability of word $w$ given it is tagged $t$.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>By Markov assumption, current word&amp;rsquo;s tag only depends on previous word&amp;rsquo;s tag.&lt;/p>
&lt;/blockquote>
&lt;h4 id="viterbi-algorithm">Viterbi Algorithm&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">#define BProb(t1,t0) () &lt;/span>&lt;span class="c1">// Bigram
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define LProb(w,t) () &lt;/span>&lt;span class="c1">// Lexical
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">viterbi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sentence&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sentence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="c1">// labels[0] = &amp;#34;^&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">plabel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="o">*&lt;/span> &lt;span class="n">BProb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="o">*&lt;/span> &lt;span class="n">LProb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="n">plabel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;_.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">slabel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34;_&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="discriminative-learning">Discriminative Learning&lt;/h3>
&lt;p>HMM based POS tagging cannot handle &amp;ldquo;free word order&amp;rdquo; and &amp;ldquo;agglutination&amp;rdquo; well.&lt;/p>
&lt;h4 id="feature-engineering">Feature Engineering&lt;/h4>
&lt;ol>
&lt;li>Word-based features
&lt;ul>
&lt;li>$f_{21}$: Dictionary index of the current word&lt;/li>
&lt;li>$f_{22}$: Dictionary index of the previous word&lt;/li>
&lt;li>$f_{23}$: Dictionary index of the next word&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Part of Speech tag-based features
&lt;ul>
&lt;li>$f_{24}$: Index of POS of previous word&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Morphology-based features
&lt;ul>
&lt;li>$f_{25}$: does the current word have a noun suffix like &amp;rsquo;s&amp;rsquo;, &amp;rsquo;es&amp;rsquo;, &amp;lsquo;ies&amp;rsquo;, etc.&lt;/li>
&lt;li>$f_{26}$: does the current word have a verbal suffix like &amp;rsquo;d&amp;rsquo;, &amp;rsquo;ed&amp;rsquo;, &amp;rsquo;t&amp;rsquo;, etc.&lt;/li>
&lt;li>$f_{27}$ and $f_{28}$: above two for previous word.&lt;/li>
&lt;li>$f_{29}$ and $f_{2,10}$: above two for next word.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="morphology">Morphology&lt;/h4>
&lt;dl>
&lt;dt>Morphemes&lt;/dt>
&lt;dd>Smallest meaning-bearing units forming a word.
e.g.: In &amp;ldquo;quickly&amp;rdquo;, &amp;ldquo;quick&amp;rdquo; and &amp;ldquo;ly&amp;rdquo;.&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>&lt;strong>Analytic Languages&lt;/strong>: Morphemes largely separate from one another.&lt;/li>
&lt;li>&lt;strong>Synthetic Languages&lt;/strong>: Joins the morphemes.&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>Syncretism&lt;/dt>
&lt;dd>Overloading of roles per morpheme is called &lt;em>&lt;strong>syncretism&lt;/strong>&lt;/em>.
e.g.: &amp;ldquo;will go&amp;rdquo;: since number and person are indeterminate here&lt;/dd>
&lt;/dl>
&lt;h4 id="maximum-entropy-markov-model">Maximum Entropy Markov Model&lt;/h4>
&lt;p>$$
P(t_i=t|F_i)=\dfrac{e^{\sum_{j=1.k}\lambda_jf_{ij}}}{{\sum_{t&amp;rsquo;\in S}}e^{\sum_{j=1.k}\lambda_jf_{ij}(t&amp;rsquo;)}}
$$&lt;/p>
&lt;h4 id="beam-search-algorithm">Beam Search Algorithm&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">#define Prob(t,w) ()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">beam_search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sentence&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sentence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Beam size
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// labels[0] = &amp;#34;^&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">best&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">))));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="n">Prob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">]),&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="n">labls&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">maxp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">maxp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">maxp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="parsing">Parsing&lt;/h2>
&lt;h3 id="context-free-grammar-parsing">Context Free Grammar Parsing&lt;/h3>
&lt;p>We are given a CFG with terminals as POS tags from the language and vairables from segment labels. This grammar is converted to Chomsky form.&lt;/p>
&lt;h4 id="cyk-algorithm">CYK Algorithm&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">node&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="n">node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="n">node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">CYK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">sent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos_labels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sent&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;---&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rules&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rule&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="n">rules&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rule&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="n">node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="c1">// make the tree
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="shift-reduce-algorithm">Shift reduce algorithm&lt;/h4>
&lt;p>Using a stack and working through a Push-down automaton based on the language.&lt;/p>
&lt;h3 id="probabilistic-parsing">Probabilistic Parsing&lt;/h3>
&lt;p>In the normal CFG related to the language, we add probability value to each rule. This can be found using the dataset.&lt;/p>
&lt;p>Probability of a Parse Tree is defined as the product probabilities of all the rules used in the parse tree. This way we find the parse tree with highest probability.&lt;/p>
&lt;p>We can also define the probability of a sentence as the sum of probabilities of its parse trees.
$$
P(S) = \sum_{t} P(t)\cdot P(S|t) = \sum_{t} P(t)
$$&lt;/p>
&lt;h3 id="dependency-parsing">Dependency Parsing&lt;/h3>
&lt;p>Instead of creating chunks of words we create dependency relations between words itself. This creates a tree of words as nodes.&lt;/p>
&lt;h2 id="ffnnbp">FFNNBP&lt;/h2>
&lt;p>Use softmax or sigmoid for sentiment analysis.&lt;/p>
&lt;h2 id="wordnet">WordNet&lt;/h2>
&lt;ul>
&lt;li>&lt;em>&lt;strong>Syntagmatic&lt;/strong>&lt;/em>: Based on relations such as Synonym, antonym, etc. &lt;em>CAT&lt;/em> and &lt;em>ANIMAL&lt;/em>&lt;/li>
&lt;li>&lt;em>&lt;strong>Paradigmatic&lt;/strong>&lt;/em>: Based on Co-occurences. &lt;em>CAT&lt;/em> and &lt;em>MEW&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="wordnet-engineering">Wordnet Engineering&lt;/h3>
&lt;dl>
&lt;dt>Principles of Synset creation&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Minimality&lt;/li>
&lt;li>Coverage&lt;/li>
&lt;li>Replacibility&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;p>These synsets are used to create Syntagmatic ConceptNets.&lt;/p>
&lt;p>Calculate Lexical Semantic Association(LSA) i.e. matrix of co-occurence frequencies. Apply PCA to get Paradigmatic WordNets.&lt;/p>
&lt;h3 id="using-wordnets">Using WordNets&lt;/h3>
&lt;p>$$P(Context\ word | input\ word)=P(w_1|w_2)=\frac{e^{(u_{w_1}^Tu_{w_2})}}{\Sigma_k e^{(u_{w_1}^Tu_{w_k})}}$$&lt;/p>
&lt;blockquote>
&lt;p>Here $u_w$ is the word vector for $w$.&lt;/p>
&lt;/blockquote></description></item><item><title>C++ - Standard Template Library</title><link>https://adityakadoo.github.io/Scrolls/cp/cpp/</link><pubDate>Sat, 20 Aug 2022 12:27:03 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/cp/cpp/</guid><description>&lt;h2 id="basic-utilities">Basic Utilities&lt;/h2>
&lt;h3 id="initializer-lists">Initializer lists&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">cities&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="s">&amp;#34;Berlin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;New York&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;London&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Braunschweig&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Cairo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Cologne&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">complex&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">4.0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// equivalent to c(4.0,3.0)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="range-based-for-loops">Range-based &lt;em>for&lt;/em> loops&lt;/h3>
&lt;ul>
&lt;li>Looping through a container
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">elem&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="n">elem&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Looping through an initializer list
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="lambda-functions">Lambda functions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">f1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// not very effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// super effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">f2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// not very effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// not very effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">f3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// super effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// super effective
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="numeric-limits">Numeric Limits&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;max(short): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">numeric_limits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">short&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;max(int): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">numeric_limits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;max(long): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">numeric_limits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pair">Pair&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operation&lt;/th>
&lt;th>Effect&lt;/th>
&lt;th>Complexity&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>make_pair(e1,e2)&lt;/code>&lt;/td>
&lt;td>Returns a pair using types and values of e1 and e2&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.first&lt;/code>&lt;/td>
&lt;td>Returns reference to first value&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.second&lt;/code>&lt;/td>
&lt;td>Returns reference to second value&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p1==p2&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>p1.first==p2.first &amp;amp;&amp;amp; p1.second==p2.second&lt;/code>&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p1&amp;lt;p2&lt;/code>&lt;/td>
&lt;td>Compares first values and if equal second of both values&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>swap(p1,p2)&lt;/code>&lt;/td>
&lt;td>Swaps data of p1 and p2&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tuple">Tuple&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">T2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">T3&lt;/span>&lt;span class="p">,...&lt;/span>&lt;span class="n">Tk&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e3&lt;/span>&lt;span class="p">,...,&lt;/span>&lt;span class="n">ek&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operation&lt;/th>
&lt;th>Effect&lt;/th>
&lt;th>Complexity&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>make_tuple(e1,e2,..., ek)&lt;/code>&lt;/td>
&lt;td>Returns a tuple using types and values of e1, &amp;hellip;, ek&lt;/td>
&lt;td>$\mathcal{O}(k)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>get&amp;lt;i&amp;gt;(t)&lt;/code>&lt;/td>
&lt;td>Returns reference to the ith value&lt;/td>
&lt;td>$\mathcal{O}(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>t1==t2&lt;/code>&lt;/td>
&lt;td>Returns whether all elements of t1 are equal to t2&lt;/td>
&lt;td>$\mathcal{O}(k)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>t1&amp;lt;t2&lt;/code>&lt;/td>
&lt;td>Compares elements of t1 and t2 lexicographically&lt;/td>
&lt;td>$\mathcal{O}(k)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>swap(t1,t2)&lt;/code>&lt;/td>
&lt;td>Swaps data of t1 and t2&lt;/td>
&lt;td>$\mathcal{O}(k)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="stl-structure">STL Structure&lt;/h2>
&lt;p>STL has 4 most important design components; containers, iterators, algorithms and function objects. These can be used to separate data structures from algorithms and provides a generic API for combining the two.&lt;/p>
&lt;h3 id="containers">Containers&lt;/h3>
&lt;p>There are 3 kinds of containers:&lt;/p>
&lt;h4 id="sequence-containers">Sequence containers&lt;/h4>
&lt;p>These are &lt;em>ordered collections&lt;/em> where every element has a certain position. These containers are usually implemented using &lt;em>arrays&lt;/em> or &lt;em>linked lists&lt;/em>.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Vector&lt;/strong>: Vector manages it&amp;rsquo;s elements in the form of a dynamic array that can grow in one direction with random access.&lt;/li>
&lt;li>&lt;strong>Deque&lt;/strong>: It is a dynamic array that can grow in both directions.&lt;/li>
&lt;li>&lt;strong>Array&lt;/strong>: A container of fixed size with random access.&lt;/li>
&lt;li>&lt;strong>List&lt;/strong>: It is a doubly linked list of elements with insertion or deletion at any position.&lt;/li>
&lt;li>&lt;strong>Forward List&lt;/strong>: It is a singly linked list without backward operations of List.&lt;/li>
&lt;/ol>
&lt;h4 id="associative-containers">Associative containers&lt;/h4>
&lt;p>These are &lt;em>sorted collections&lt;/em> where the position of every element depends on its value. These containers are usually implemented using &lt;em>binary trees&lt;/em>.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Set&lt;/strong>: A set is a collection in which elements are sorted according to their own values. Each element may occur only once, so duplicates are not allowed.&lt;/li>
&lt;li>&lt;strong>Multiset&lt;/strong>: A multiset is the same as a set except that duplicates are allowed. Thus, a multiset may contain multiple elements that have the same value.&lt;/li>
&lt;li>&lt;strong>Map&lt;/strong>: A map contains elements that are key/value pairs. Each element has a key that is the basis for the sorting criterion and a value. Each key may occur only once, so duplicate keys are not allowed. A map can also be used as an associative array, an array that has an arbitrary index type.&lt;/li>
&lt;li>&lt;strong>Multimap&lt;/strong>: A multimap is the same as a map except that duplicates are allowed. Thus, a multimap may contain multiple elements that have the same key. A multimap can also be used as dictionary.&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-associative-containers">Unordered (associative) containers&lt;/h4>
&lt;p>These are &lt;em>unordered collections&lt;/em> where the position of an element doesn&amp;rsquo;t matter. These containers are usually implemented using &lt;em>hash tables&lt;/em>.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Unordered set&lt;/strong>: An unordered set is a collection of unordered elements, where each element may occur only once. Thus, duplicates are not allowed.&lt;/li>
&lt;li>&lt;strong>Unordered multisets&lt;/strong>: An unordered multiset is the same as an unordered set except that duplicates are allowed. Thus, an unordered multiset may contain multiple elements that have the same value.&lt;/li>
&lt;li>&lt;strong>Unordered map&lt;/strong>: An unordered map contains elements that are key/value pairs. Each key may occur only once, so duplicate keys are not allowed. An unordered map can also be used as an associative array, an array that has an arbitrary index type.&lt;/li>
&lt;li>&lt;strong>Unordered multimap&lt;/strong>: An unordered multimap is the same as an unordered map except that duplicates are allowed. Thus, an unordered multimap may contain multiple elements that have the same key. An unordered multimap can also be used as dictionary.&lt;/li>
&lt;/ol>
&lt;h4 id="container-adapters">Container Adapters&lt;/h4>
&lt;ol>
&lt;li>&lt;strong>Stack&lt;/strong>: A stack (the name says it all) manages its elements by the LIFO (last-in-first-out) policy.&lt;/li>
&lt;li>&lt;strong>Queue&lt;/strong>: A queue manages its elements by the FIFO (first-in-first-out) policy. That is, it is an ordinary buffer.&lt;/li>
&lt;li>&lt;strong>Priority queue&lt;/strong>: A priority queue is a container in which the elements may have different priorities.&lt;/li>
&lt;/ol>
&lt;h3 id="iterators">Iterators&lt;/h3>
&lt;p>We need a concept of an object that represents positions of elements in a container. Objects that fulfill this concept are called &lt;em>&lt;strong>iterators&lt;/strong>&lt;/em>. Following are the operations that one can perform using these iterators:&lt;/p>
&lt;ul>
&lt;li>Operator &lt;code>*&lt;/code> returns the element of the current position. If the elements have members, you can use operator &lt;code>-&amp;gt;&lt;/code> to access those members directly from the iterator.&lt;/li>
&lt;li>Operator &lt;code>++&lt;/code> lets the iterator step forward to the next element. Most iterators also allow stepping backward by using operator &lt;code>--&lt;/code>.&lt;/li>
&lt;li>Operators &lt;code>==&lt;/code> and &lt;code>!=&lt;/code> return whether two iterators represent the same position.&lt;/li>
&lt;li>Operator &lt;code>=&lt;/code> assigns an iterator.&lt;/li>
&lt;/ul>
&lt;p>Apart from this every container class also provides following methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>begin()&lt;/code> returns an iterator that represents the beginning of the elements in the container. The beginning is the position of the first element, if any.&lt;/li>
&lt;li>&lt;code>end()&lt;/code> returns an iterator that represents the end of the elements in the container. The end is the
position behind the last element. Such an iterator is also called a past-the-end iterator.&lt;/li>
&lt;/ul>
&lt;p>Types of iterators:-&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Forward Iterators&lt;/strong>: Support only &lt;code>++&lt;/code> operator. Used in &lt;code>forward_list&lt;/code>, &lt;code>unordered_set&lt;/code>, &lt;code>unordered_multiset&lt;/code>, &lt;code>unordered_map&lt;/code> and &lt;code>unordered_multimap&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Bidirectional Iterators&lt;/strong>: Support &lt;code>++&lt;/code> and &lt;code>--&lt;/code> operators. Used in &lt;code>list&lt;/code>, &lt;code>set&lt;/code>, &lt;code>map&lt;/code>, &lt;code>multiset&lt;/code> and &lt;code>multimap&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Random-access Iterators&lt;/strong>: Support iterator arithmetic (&lt;code>+,-,&amp;gt;,&amp;lt;,&lt;/code>etc). Used in &lt;code>vector&lt;/code>, &lt;code>array&lt;/code>, &lt;code>deque&lt;/code> and &lt;code>string&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="algorithm">Algorithm&lt;/h3>
&lt;h3 id="function-object">Function object&lt;/h3>
&lt;h2 id="stl-containers">STL Containers&lt;/h2>
&lt;p>&lt;img src="images/containers.png" alt="Containers">&lt;/p>
&lt;h3 id="arrays">Arrays&lt;/h3>
&lt;dl>
&lt;dt>Array&lt;/dt>
&lt;dd>An &lt;em>&lt;strong>array&lt;/strong>&lt;/em> is a sequence of elements with constant size.
&lt;ul>
&lt;li>Ordered collection&lt;/li>
&lt;li>Random access&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h4 id="array-provides-mathcal-o1-element-access">Array provides $\mathcal O(1)$ element access.&lt;/h4>
&lt;p>This is done by using iterator arithmetic to get to any element&amp;rsquo;s location.&lt;/p>
&lt;h3 id="vectors">Vectors&lt;/h3>
&lt;dl>
&lt;dt>Vector&lt;/dt>
&lt;dd>A &lt;em>&lt;strong>vector&lt;/strong>&lt;/em> models a dynamic array that can grow in one direction.
&lt;ul>
&lt;li>Ordered collection&lt;/li>
&lt;li>Random access&lt;/li>
&lt;li>Dynamic storage&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl></description></item><item><title>Automata Theory</title><link>https://adityakadoo.github.io/Scrolls/courses/automata_theory/</link><pubDate>Fri, 19 Aug 2022 17:00:34 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/automata_theory/</guid><description>&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>
&lt;h3 id="hopcrot-motwani-ullmanhttpswww-2dcubaarstaffbecherhopcroft-motwani-ullman-2001pdf">&lt;a href="https://www-2.dc.uba.ar/staff/becher/Hopcroft-Motwani-Ullman-2001.pdf">Hopcrot-Motwani-Ullman&lt;/a>&lt;/h3>
&lt;/li>
&lt;/ul>
&lt;h2 id="central-concepts">Central Concepts&lt;/h2>
&lt;h4 id="alphabets">Alphabets&lt;/h4>
&lt;dl>
&lt;dt>Alphabet $ (\Sigma) $&lt;/dt>
&lt;dd>An &lt;em>&lt;strong>alphabet&lt;/strong>&lt;/em> is a finite nonempty set of symbols.&lt;/dd>
&lt;/dl>
&lt;ol>
&lt;li>$ \Sigma= \{1, 0\} $&lt;/li>
&lt;li>$ \Sigma = \{a,b,&amp;hellip;,z\}$&lt;/li>
&lt;/ol>
&lt;h4 id="strings">Strings&lt;/h4>
&lt;dl>
&lt;dt>String $(w)$&lt;/dt>
&lt;dd>A &lt;em>&lt;strong>string&lt;/strong>&lt;/em> is a finite sequence of symbols chosen from $ \Sigma $.&lt;/dd>
&lt;dt>Empty String $(\epsilon)$&lt;/dt>
&lt;dd>The &lt;em>&lt;strong>empty string&lt;/strong>&lt;/em> is a string with zero symbols.&lt;/dd>
&lt;dt>Length of a string&lt;/dt>
&lt;dd>$|w|=\#$ Symbols in $w$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$|\epsilon|=0$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>Power of Alphabets&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$\Sigma^k=\{w:|w|=k\}$&lt;/li>
&lt;li>$\Sigma^+=\Sigma^1\cup\Sigma^2\cup&amp;hellip;$&lt;/li>
&lt;li>$\Sigma^*=\Sigma^+\cup\{\epsilon\}$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\Sigma^0= \{\epsilon\}$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>Concatenation of Strings&lt;/dt>
&lt;dd>For strings $w_1$ and $w_2$, their &lt;em>&lt;strong>concatenation&lt;/strong>&lt;/em> is $w_1w_2$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$|w_1w_2| = |w_1|+|w_2|$&lt;/p>
&lt;/blockquote>
&lt;h4 id="languages">Languages&lt;/h4>
&lt;dl>
&lt;dt>Language $(L)$&lt;/dt>
&lt;dd>A &lt;em>&lt;strong>language&lt;/strong>&lt;/em> over $\Sigma$ is basically $L\sube\Sigma^*$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>A common way on defining languages is to use set-builder form as,
$\{w\in\Sigma^*:$ something about $w\}$.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>Empty Language $(\empty)$&lt;/dt>
&lt;dd>The &lt;em>&lt;strong>empty language&lt;/strong>&lt;/em> contains no words.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\empty\ne\{\epsilon\}$&lt;/p>
&lt;/blockquote>
&lt;h4 id="problems">Problems&lt;/h4>
&lt;dl>
&lt;dt>Problem&lt;/dt>
&lt;dd>Any &lt;em>&lt;strong>problem&lt;/strong>&lt;/em> is, given a $w$ in $\Sigma^*$, decide whether or not $w$ is in $L$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>If testing membership in $L_X$ is hard, then compiling programs in programming language $X$ is hard.&lt;/p>
&lt;/blockquote>
&lt;h2 id="finite-state-automaton">Finite State Automaton&lt;/h2>
&lt;h3 id="dfa">DFA&lt;/h3>
&lt;dl>
&lt;dt>Deterministic Finite Automaton $(\mathcal D(Q,\Sigma,\delta,q_0,F) )$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>A finite set of &lt;em>states&lt;/em> $(Q)$.&lt;/li>
&lt;li>A finite set of &lt;em>input symbols&lt;/em> $(\Sigma)$.&lt;/li>
&lt;li>A &lt;em>transition function&lt;/em> $(\delta:Q\times\Sigma\rightarrow Q)$&lt;/li>
&lt;li>A &lt;em>start state&lt;/em> $(q_0\in Q)$&lt;/li>
&lt;li>A set of &lt;em>final states&lt;/em> $F\sube Q$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Transition diagram $(G_{\mathcal D}(V,E))$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>$V=\{q:q\in Q\}$&lt;/li>
&lt;li>$E=\{q_1\xrightarrow{a}q_2:a\in\Sigma\text{ and }\delta(q_1,a)=q_2\}$&lt;/li>
&lt;li>An arrow pointing into $q_0$.&lt;/li>
&lt;li>All nodes in $F$ are denoted with double circle.&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Extended transition function $(\hat\delta:Q\times\Sigma^*\rightarrow Q)$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $\hat\delta(q,\epsilon)=q$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: $\hat\delta(q,w)=\delta(\hat\delta(q,w[:-1]),w[-1])$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Language of DFA $(L(\mathcal D))$&lt;/dt>
&lt;dd>$$
L(\mathcal D)=\{w\in\Sigma:\hat\delta(q_0,w)\in F\}
$$&lt;/dd>
&lt;/dl>
&lt;h3 id="nfa">NFA&lt;/h3>
&lt;dl>
&lt;dt>Nondeterministic Finite Automaton $(\mathcal N(Q,\Sigma,\delta,q_0,F) )$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>A finite set of &lt;em>states&lt;/em> $(Q)$.&lt;/li>
&lt;li>A finite set of &lt;em>input symbols&lt;/em> $(\Sigma)$.&lt;/li>
&lt;li>A &lt;em>transition function&lt;/em> $(\delta:Q\times\Sigma\rightarrow\mathcal P(Q))$&lt;/li>
&lt;li>A &lt;em>start state&lt;/em> $(q_0\in Q)$&lt;/li>
&lt;li>A set of &lt;em>final states&lt;/em> $F\sube Q$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\mathcal P(S)=\{A:A\sube S\}$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>Extended transition function $(\hat\delta:Q\times\Sigma^*\rightarrow P(Q))$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $\hat\delta(q,\epsilon)=\{q\}$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: $\hat\delta(q,w)=\bigcup_{p\in \hat\delta(q,w[:-1])}\delta(p,w[-1])$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Language of NFA $(L(\mathcal N))$&lt;/dt>
&lt;dd>$$
L(\mathcal N)=\{w\in\Sigma:\hat\delta(q_0,w)\cap F\ne\empty\}
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="equivalence-of-dfa-and-nfa">Equivalence of DFA and NFA&lt;/h4>
&lt;p>Given an NFA $(\mathcal N=\{Q_N,\Sigma,\delta_N,q_0,F_N\})$ it can be converted to a DFA $\mathcal D=\{Q_D,\Sigma,\delta_D,\{q_0\},F_D\}$ such that $L(\mathcal D)=L(\mathcal N)$ using &lt;em>&lt;strong>subset construction&lt;/strong>&lt;/em> method.&lt;/p>
&lt;ol>
&lt;li>$Q_D=P(Q_N)$&lt;/li>
&lt;li>$F_D=\{S\sube Q_N:S\cap F_N\ne\empty\}$&lt;/li>
&lt;li>$\delta_D:P(Q_N)\times\Sigma\rightarrow P(Q_N)$ is defined as,
$$
\delta_D(S,a)=\bigcup_{p\in S}\delta_N(p,a)
$$&lt;/li>
&lt;/ol>
&lt;h5 id="theorem--lmathcal-dlmathcal-n-ie-forall-winsigma-hatdelta_dq_0whatdelta_nq_0w">&lt;strong>Theorem&lt;/strong> : $L(\mathcal D)=L(\mathcal N)$ i.e. $\forall w\in\Sigma,\\ \hat\delta_D(\{q_0\},w)=\hat\delta_N(q_0,w)$&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: For $w=\epsilon,\\ \hat\delta_D(\{q_0\},w)=\{q_0\}$ and $\hat\delta_N(q_0,w)=\{q_0\}$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: As $\hat\delta_N(q_0,w[:-1])=\hat\delta_D(\{q_0\},w[:-1])$
$$
\hat\delta_N(q_0,w)=\bigcup_{p\in\hat\delta_N(q_0,w[:-1])}\delta_N(p,w[-1])
$$
$$
\hat\delta_D(\{q_0\},w)=\delta_D(\hat\delta_D(\{q_0\},w[:-1]),w[-1])=\bigcup_{p\in\hat\delta_D(\{q_0\},w[:-1])}\delta_N(p,w[-1])
$$
$$
\therefore\hat\delta_D(\{q_0\},w)=\hat\delta_N(q_0,w)
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--a-language-l-is-accepted-by-some-dfa-iff-l-is-accepted-by-some-nfa">&lt;strong>Theorem&lt;/strong> : A language $L$ is accepted by some DFA iff $L$ is accepted by some NFA.&lt;/h5>
&lt;blockquote>
&lt;p>A bad case for subset construction is $L=\{w\in\{1,0\}^*:w[-n]=1\}$&lt;/p>
&lt;/blockquote>
&lt;h3 id="epsilon-nfa">$\epsilon$-NFA&lt;/h3>
&lt;dl>
&lt;dt>Finite Automaton with $\epsilon$-transition $(\mathcal A(Q,\Sigma,\delta,q_0,F))$&lt;/dt>
&lt;dd>It is defined similar to the NFA with only difference in $\delta:Q\times\Sigma\cup\{\epsilon\}\rightarrow P(Q)$.&lt;/dd>
&lt;dt>Epsilon Closure $(\text{Ecl}(.))$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $q\in\text{Ecl}(q)$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: If $p\in\text{Ecl}(q)$ and $r\in\delta(p,\epsilon)$ then $r\in\text{Ecl}(q)$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Extended Transition Function $(\hat\delta(.,.))$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $\hat\delta(q,\epsilon)=\text{Ecl}(q)$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: $$\hat\delta(q,w)=\bigcup_{r\in\bigcup_{p\in\hat\delta(q,w[:-1])}\delta(p,w[-1])}\text{Ecl}(r)$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h4 id="eliminating-epsilon-transitions">Eliminating $\epsilon$-transitions&lt;/h4>
&lt;p>Given an $\epsilon$-NFA $\mathcal A=\{Q_A,\Sigma,\delta_A,q_0,F_A\}$ it can be converted to a DFA $\mathcal D=\{Q_D,\Sigma,\delta_D,\{q_D\},F_D\}$ such that $L(\mathcal D)=L(\mathcal A)$ as follows,&lt;/p>
&lt;ol>
&lt;li>$Q_D=\mathcal P(Q_A)$&lt;/li>
&lt;li>$q_D=\text{Ecl}(q_0)$&lt;/li>
&lt;li>$F_D=\{S:S\in Q_D$ and $S\cap F_A\ne\empty\}$&lt;/li>
&lt;li>$\delta_D:Q_D\times\Sigma$ is defined as follows,
$$
\delta_D(S,a)=\bigcup_{r\in\bigcup_{p\in S}\delta_A(p,a)}\text{Ecl}(r)
$$&lt;/li>
&lt;/ol>
&lt;h5 id="theorem--a-language-l-is-accepted-by-some-epsilon-nfa-iff-l-is-accepted-by-some-dfa">&lt;strong>Theorem&lt;/strong> : A language $L$ is accepted by some $\epsilon$-NFA iff $L$ is accepted by some DFA.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Use the above procedure to create a DFA.
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: Since $\hat\delta_A(q_0, \epsilon)=\text{Ecl}(q_0)$ and $\hat\delta_D(q_D, \epsilon)=\hat\delta_D(\text{Ecl}(q_0),\epsilon)=\text{Ecl}(q_0)$, $\hat\delta_A(q_0, \epsilon) = \hat\delta_D(q_D, \epsilon)$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: As $\hat\delta_A(q_0, w[:-1])=\hat\delta_D(q_D,w[:-1])$ and,
$$
\hat\delta_A(q_0,w)=\bigcup_{r\in\bigcup_{p\in\hat\delta_A(q_0, w[:-1])}\delta_A(p,w[-1])}\text{Ecl}(r)
$$
and $\hat\delta_D(q_D,w)$ is defined in a similar way,
$$
\therefore\hat\delta_A(q_0, w)=\hat\delta_D(q_D,w)
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h2 id="regular-expressions">Regular Expressions&lt;/h2>
&lt;p>Operators on Regular Languages&lt;/p>
&lt;dl>
&lt;dt>Union $(\cup)$&lt;/dt>
&lt;dd>The union of two languages $L$ and $M$ is defined as $L\cup M$.&lt;/dd>
&lt;dt>Concatenation $(\cdot)$&lt;/dt>
&lt;dd>The concatenation of two languages $L$ and $M$ is defined as $LM=\{x\cdot y\text{ or }xy:x\in L,y\in M\}$.&lt;/dd>
&lt;dt>Kleene closure $(^{*})$&lt;/dt>
&lt;dd>The Kleene closure of a language $L$ is defined inductively as,
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $\epsilon\in L^*$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: If $w\in L^*$ and $x\in L$ then, $wx\in L^*$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>RegEx $(\boldsymbol R)$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: It contains 2 parts:
&lt;ol>
&lt;li>The constants $\boldsymbol{\epsilon}$ and $\boldsymbol{\empty}$ are regex such that $L(\boldsymbol{\epsilon})=\{\epsilon\}$ and $L(\boldsymbol{\empty})=\empty$&lt;/li>
&lt;li>Every symbol $\boldsymbol{a}$ such that $a\in\Sigma$ is a regex then $L(\boldsymbol{a})=\{a\}$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: There are four parts for the induction step:
&lt;ol>
&lt;li>$L(\boldsymbol E+\boldsymbol F)=L(\boldsymbol E)\cup L(\boldsymbol F)$&lt;/li>
&lt;li>$L(\boldsymbol E\boldsymbol F)=L(\boldsymbol E)L(\boldsymbol F)$&lt;/li>
&lt;li>$L(\boldsymbol E^*)=(L(\boldsymbol E))^*$&lt;/li>
&lt;li>$L((\boldsymbol E))=L(\boldsymbol E)$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$* &amp;gt; . &amp;gt; +$&lt;/p>
&lt;/blockquote>
&lt;h3 id="equivalence-to-finite-automata">Equivalence to Finite Automata&lt;/h3>
&lt;h4 id="dfa-to-regex">DFA to RegEx&lt;/h4>
&lt;h5 id="theorem-if-llmathcal-d-for-some-dfa-mathcal-d-then-there-is-a-regular-expression-boldsymbol-r-such-that-llboldsymbol-r">&lt;strong>Theorem&lt;/strong>: If $L=L(\mathcal D)$ for some DFA $\mathcal D$, then there is a regular expression $\boldsymbol R$ such that $L=L(\boldsymbol R)$&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Let the DFA have $n$ nodes each labelled with a number from $[1,n]$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$\boldsymbol R_{ij}^{(k)}=\{w:\hat\delta(i,w)=j$ and $\forall t$ such that $0&amp;lt;t&amp;lt;|w|-1,\ \hat\delta(i,w[:t])\le k\}$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: Let $S=\{a:\delta(i,a)=j\}$. If $S=\empty$ then $\boldsymbol R_{ij}^{(0)}=\empty$ else $\boldsymbol R_{ij}^{(0)}=\sum_{a\in S}a$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>:
$$
\boldsymbol R_{ij}^{(k)}=\boldsymbol R_{ij}^{(k-1)} + \boldsymbol R_{ik}^{(k-1)}\cdot(\boldsymbol R_{kk}^{(k-1)})^*\cdot\boldsymbol R_{kj}^{(k-1)}
$$&lt;/li>
&lt;/ul>
&lt;h4 id="regex-to-automata">RegEx to Automata&lt;/h4>
&lt;h5 id="theorem-every-language-accepted-by-a-regular-expression-is-also-accepted-by-a-finite-automaton">&lt;strong>Theorem&lt;/strong>: Every language accepted by a regular expression is also accepted by a finite automaton.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Let $L=L(\boldsymbol R)$ for some regular expression $\boldsymbol R$. We show that $L=L(\mathcal A)$ for some $\epsilon$-NFA $\mathcal A$ with:&lt;/dd>
&lt;/dl>
&lt;ol>
&lt;li>Exactly one accepting state.&lt;/li>
&lt;li>No arcs into the initial state.&lt;/li>
&lt;li>No arcs out of the accepting state.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Basis&lt;/em>: For the 3 base cases:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>$\boldsymbol \empty$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_7-13.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$\boldsymbol \epsilon$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_6-44.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$\boldsymbol a\in\Sigma$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_7-24.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Induction&lt;/em>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>$\boldsymbol R+\boldsymbol S$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_7-48.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$\boldsymbol R\boldsymbol S$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_8-10.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$\boldsymbol R^{*}$&lt;/p>
&lt;p>&lt;img src="images/DFAtoRegEx_8-26.png" alt="Emtpy">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="algebraic-laws">Algebraic Laws&lt;/h3>
&lt;h4 id="associativity-and-commutativity">Associativity and Commutativity&lt;/h4>
&lt;ul>
&lt;li>$L+M=M+L$&lt;/li>
&lt;li>$(L+M)+N=L+(M+N)$&lt;/li>
&lt;li>$(LM)N$=$L(MN)$&lt;/li>
&lt;/ul>
&lt;h4 id="identities-and-annihilators">Identities and Annihilators&lt;/h4>
&lt;ul>
&lt;li>$\empty+L=L+\empty=L$&lt;/li>
&lt;li>$\epsilon L=L\epsilon=L$&lt;/li>
&lt;li>$\empty L=L\empty=\empty$&lt;/li>
&lt;/ul>
&lt;h4 id="distributive-laws">Distributive Laws&lt;/h4>
&lt;ul>
&lt;li>$L(M+N)=LM+LN$&lt;/li>
&lt;li>$(M+N)L=ML+NL$&lt;/li>
&lt;/ul>
&lt;h4 id="idempotent-law">Idempotent Law&lt;/h4>
&lt;ul>
&lt;li>$L+L=L$&lt;/li>
&lt;/ul>
&lt;h4 id="laws-with-closure">Laws with Closure&lt;/h4>
&lt;ul>
&lt;li>$(L^*)^*=L^*$&lt;/li>
&lt;li>$\empty^*=\epsilon$&lt;/li>
&lt;li>$\epsilon^*=\epsilon$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>$L^+=LL^*$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>$L^*=L^++\epsilon$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>$L?=\epsilon+L$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>$(L^*M^*)^*=(L+M)^*$&lt;/li>
&lt;/ul>
&lt;h2 id="properties-of-rls">Properties of RLs&lt;/h2>
&lt;h3 id="pumping-lemma-for-rls">Pumping Lemma for RLs&lt;/h3>
&lt;h4 id="statement-of-ppumping-lemma">Statement of PPumping Lemma&lt;/h4>
&lt;h5 id="theorem-for-all-l-such-that-l-is-a-regular-language-there-exists-a-constant-n-such-that-for-all-wge-n-we-can-break-w-into-three-strings-wxyz-such-that">&lt;strong>Theorem&lt;/strong>: For all $L$ such that $L$ is a regular language, there exists a constant $n$ such that for all $|w|\ge n$ we can break $w$ into three strings, $w=xyz$, such that:&lt;/h5>
&lt;h5 id="1-yneepsilon">1. $y\ne\epsilon$&lt;/h5>
&lt;h5 id="2-xyle-n">2. $|xy|\le n$&lt;/h5>
&lt;h5 id="3-forall-kge0xykzin-l">3. $\forall k\ge0,xy^kz\in L$&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Let $L=L(\mathcal D)$ be a regular language for DFA $\mathcal D$. Consider a $w$ such that $|w|\ge n$.
We define,
$$
S = \{q
_i:0\le i\le n,\hat\delta(q_0,w[:i])=q_i\}
$$
As size of $S$ is $n+1$ there must be two $q_i$ and $q_j$ such that $q_i=q_j$ by Pigeon-hole principle. We can break $w$ as,
&lt;ol>
&lt;li>$x=w[:i]$&lt;/li>
&lt;li>$y=w[i:j]$&lt;/li>
&lt;li>$z=w[j:]$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;h4 id="proving-languages-not-to-be-regular">Proving languages not to be Regular&lt;/h4>
&lt;p>We do a game between 2 players as follows:&lt;/p>
&lt;ol>
&lt;li>Player 1 picks the language $L$ to be proved nonregular.&lt;/li>
&lt;li>Player 2 picks $n$, but doesn&amp;rsquo;t reveal to player 1 what $n$ is; player 1 must devise a play for all possible $n$&amp;rsquo;s.&lt;/li>
&lt;li>Player 1 picks $w$, which may depend on $n$ and which must be of length at least $n$ and $w\in L$.&lt;/li>
&lt;li>Player 2 divides $w$ into $x$, $y$ and $z$, obeying the constraints that are stipulated in the pumping lemma; $y\ne\epsilon$ and $|xy|\le n$ and doesn&amp;rsquo;t tell player 1 what $x$, $y$ and $z$ are.&lt;/li>
&lt;li>Player 1 &amp;ldquo;wins&amp;rdquo; by picking $k$, which may be a function of $n$, $x$, $y$ and $z$, such that $xy^kz$ is not in $L$.&lt;/li>
&lt;/ol>
&lt;p>Thus $L$ must not be regular as it doesn&amp;rsquo;t follow the pumping lemma.&lt;/p>
&lt;h3 id="closure-properties">Closure Properties&lt;/h3>
&lt;h4 id="closure-under-boolean-operations">Closure under Boolean Operations&lt;/h4>
&lt;blockquote>
&lt;p>$\boldsymbol R_L =$ regular expression for language $L$&lt;/p>
&lt;/blockquote>
&lt;h5 id="theorem-if-l-and-m-are-regular-then-lcup-m-is-also-regular">&lt;strong>Theorem&lt;/strong>: If $L$ and $M$ are regular then $L\cup M$ is also regular.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>$L\cup M=L(\boldsymbol R_L+\boldsymbol R_M)$&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem-if-l-is-regular-then-so-is-bar-l">&lt;strong>Theorem&lt;/strong>: If $L$ is regular then so is $\bar L$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Convert $\boldsymbol R_L$ to DFA and take complement of it and construct the regular expression again to get $\boldsymbol R_{\bar L}$&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem-if-l-and-m-are-regular-then-lcap-m-is-also-regular">&lt;strong>Theorem&lt;/strong>: If $L$ and $M$ are regular then $L\cap M$ is also regular.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>$L\cap M=\overline{\overline L\cup\overline M}$&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem-if-l-and-m-are-regular-then-l-m-is-also-regular">&lt;strong>Theorem&lt;/strong>: If $L$ and $M$ are regular then $L-M$ is also regular.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>$L-M=L\cap\overline M$&lt;/dd>
&lt;/dl>
&lt;h4 id="reversal">Reversal&lt;/h4>
&lt;blockquote>
&lt;p>$L^R$ is defined as the reversal of the language $L$.&lt;/p>
&lt;/blockquote>
&lt;h5 id="theorem-if-l-is-regular-language-then-so-is-lr">&lt;strong>Theorem&lt;/strong>: If $L$ is regular language then so is $L^R$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Construct the DFA $\mathcal D$ of $L$ and reverse all the edges of $\mathcal D$ and make final states as start states and start states as end states. This will make an NFA accepting only reverse of string in $L$.&lt;/dd>
&lt;/dl>
&lt;h3 id="descision-properties">Descision Properties&lt;/h3>
&lt;h4 id="converting-among-representations">Converting among Representations&lt;/h4>
&lt;ul>
&lt;li>NFA to DFA: $\mathcal O(n^32^n)$&lt;/li>
&lt;li>DFA to NFA: $\mathcal O(n)$&lt;/li>
&lt;li>DFA to RegEx: $\mathcal O(n^34^n)$&lt;/li>
&lt;li>NFA to RegEx: $\mathcal O(n^34^{n^32^n})$&lt;/li>
&lt;li>RegEx to $\epsilon$-NFA: $\mathcal O(n^3)$&lt;/li>
&lt;/ul>
&lt;h4 id="testing-emptiness-of-regular-languages">Testing Emptiness of Regular Languages&lt;/h4>
&lt;p>Given a DFA apply BFS to check if any final state is reachable from the start state.&lt;/p>
&lt;p>For a Regular Expression,&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $\empty$ is the empty language.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: Four cases must be considered:
&lt;ol>
&lt;li>$R=R_1+R_2$ then $L(R)$ is empty iff both $L(R_1)$ and $L(R_2)$ are empty.&lt;/li>
&lt;li>$R=R_1R_2$ then $L(R)$ is empty iff $L(R_1)$ or $L(R_2)$ is empty.&lt;/li>
&lt;li>$R=R_1^*$ then $L(R)$ is not empty.&lt;/li>
&lt;li>$R=(R_1)$ then $L(R)$ is empty iff $L(R_1)$ is empty.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="testing-membership-in-a-regular-language">Testing Membership in a Regular Language&lt;/h4>
&lt;p>For a string $w$ with $|w|=n$ and $s$ states,&lt;/p>
&lt;ul>
&lt;li>DFA: $\mathcal O(n)$&lt;/li>
&lt;li>$\epsilon$-NFA: $\mathcal O(ns^2)$&lt;/li>
&lt;li>RegEx: $\mathcal O(ns^2)$&lt;/li>
&lt;/ul>
&lt;h3 id="equivalence-and-minimization">Equivalence and Minimization&lt;/h3>
&lt;dl>
&lt;dt>Equivalent States $(p,q)$&lt;/dt>
&lt;dd>For all input strings $w$, $\hat\delta(p,w)$ is an accepting state iff $\hat\delta(q,w)$ is an accepting state.&lt;/dd>
&lt;/dl>
&lt;h4 id="testing-equivalence-of-states">Testing Equivalence of States&lt;/h4>
&lt;p>Finding all pairs of distinguishable states by table method.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: If $p$ is an accepting state and $q$ is a nonaccepting, then the pair $\{p,q\}$ is distinguishable.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: Let $r=\delta(p,a)$ and $s=\delta(q,a)$ then $p$ and $q$ are distinguishable if $r$ and $s$ are known to be distinguishable.&lt;/li>
&lt;/ul>
&lt;h5 id="theorem-any-pair-that-is-left-indistinguishable-from-the-table-filling-algorithm-is-equivatent">&lt;strong>Theorem&lt;/strong>: Any pair that is left indistinguishable from the table-filling algorithm is equivatent.&lt;/h5>
&lt;h4 id="minimization-of-dfas">Minimization of DFA&amp;rsquo;s&lt;/h4>
&lt;h5 id="theorem-the-equivalence-of-states-is-transitive-that-is-if-in-some-dfa-mathcal-dqsumdeltaq_0f-we-find-that-states-p-and-q-are-equivalent-and-we-also-find-that-q-and-r-are-equivalent-then-it-must-be-that-p-and-r-are-equivalent">&lt;strong>Theorem&lt;/strong>: The equivalence of states is transitive. That is, if in some DFA $\mathcal D=(Q,\sum,\delta,q_0,F)$ we find that states $p$ and $q$ are equivalent, and we also find that $q$ and $r$ are equivalent, then it must be that $p$ and $r$ are equivalent.&lt;/h5>
&lt;p>Therefore the &amp;ldquo;equivalence of states&amp;rdquo; is an equivalence relation over $Q$. This means we can divide the $Q$ into different equivalence classes and the minimal DFA needs to have at least these many states representing each equivalence class.&lt;/p>
&lt;h2 id="context-free-grammars">Context-free Grammars&lt;/h2>
&lt;dl>
&lt;dt>CFG $(\mathcal G(V,T,P,S))$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>&lt;strong>Terminals&lt;/strong>&lt;/em> $(T\sube\{a,\cdots,z\})$
: Set of symbols of the language being defined.&lt;/li>
&lt;li>&lt;em>&lt;strong>Variables&lt;/strong>&lt;/em> $(V\sube\{A,\cdots,Z\})$
: Aka nonterminal or syntactic categories; Set of finite variables that each represent a language.&lt;/li>
&lt;li>&lt;em>&lt;strong>Start Symbol&lt;/strong>&lt;/em> $(S)$
: A special variable which represents the required language.&lt;/li>
&lt;li>&lt;em>&lt;strong>Rules&lt;/strong>&lt;/em> $(P)$
: A set of rules describing recursive definitions of variables such that,
$$
P\sube\{A_0\rightarrow w_0|A_0\in V\text{ and }w_0\in(T\cup V)^*\}
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Derivation Relation $(\Rightarrow)$&lt;/dt>
&lt;dd>$$
R_{\boldsymbol{\Rightarrow}}=\{(\alpha A\beta,\alpha\gamma\beta)|A\rightarrow\gamma\in P\}
$$
So in short $\alpha A\beta\Rightarrow\alpha\gamma\beta$.&lt;/dd>
&lt;dt>Extended Derivation Relation $(\xRightarrow{*})$&lt;/dt>
&lt;dd>We can extend the above relation to a more powerful &amp;ldquo;derivation in multiple steps&amp;rdquo; relation $\xRightarrow{*}$ as,
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: For any string $\alpha$, $\alpha\xRightarrow{*}\alpha$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: If $\alpha\xRightarrow{*}\beta$ then $\beta\Rightarrow\gamma$ then $\alpha\xRightarrow{*}\gamma$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Leftmost Derivation&lt;/dt>
&lt;dd>While deriving the leftmost string that occurs in a rule as head is always substituted first. This gives use new relations $\xRightarrow[lm]{}$ and $\xRightarrow[lm]{*}$.&lt;/dd>
&lt;dt>Rightmost Derivation&lt;/dt>
&lt;dd>Similarly we can also define the relations $\xRightarrow[rm]{}$ and $\xRightarrow[rm]{*}$&lt;/dd>
&lt;dt>Language of a Grammar&lt;/dt>
&lt;dd>The language $L$ given by a CFG $\mathcal G$ is defined as,
$$
L(\mathcal G) = \{w\in T^{*}| S\xRightarrow[\mathcal G]{*}w\}
$$&lt;/dd>
&lt;dt>Sentential Forms&lt;/dt>
&lt;dd>All the strings $\alpha\in(V\cup T)^{*}$ such that $S\xRightarrow{*}\alpha$ are sentential form.&lt;/dd>
&lt;/dl>
&lt;p>Similar we can define &lt;em>&lt;strong>right-sentential form&lt;/strong>&lt;/em> and &lt;em>&lt;strong>left-sentential form&lt;/strong>&lt;/em>.&lt;/p>
&lt;h3 id="parse-trees">Parse Trees&lt;/h3>
&lt;dl>
&lt;dt>Parse Trees&lt;/dt>
&lt;dd>For a grammar $\mathcal G$ the parse tree is defined as,
&lt;ol>
&lt;li>Each interior node is labelled by a variable in $V$.&lt;/li>
&lt;li>Each leaf is either labelled by a variable or a terminal or $\epsilon$. If a leaf has $\epsilon$ as label then it must be an only child.&lt;/li>
&lt;li>If an interior node is labeled $A$ and its children are labeled
$$
X_1,X_2,\dots,X_k
$$
then $A\rightarrow X_1X_2\dots X_k\in P$ and $A$ can have $\epsilon$ as child only if $A\rightarrow\epsilon\in P$.&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Yield&lt;/dt>
&lt;dd>For a particular parse tree, the string obtained by joining the labels of the leafs in the parse tree.&lt;/dd>
&lt;/dl>
&lt;p>More important parse trees are the ones where:&lt;/p>
&lt;ul>
&lt;li>Yield is a terminal string.&lt;/li>
&lt;li>Root is labeled by the start symbol.&lt;/li>
&lt;/ul>
&lt;h4 id="inference-derivation-and-parse-trees">Inference, Derivation and Parse Trees&lt;/h4>
&lt;p>While describing a grammar $G$ and a string $w$ the following 5 are equivalent,&lt;/p>
&lt;ol>
&lt;li>The recursive inference procedure determines that terminal string $w$ is in th language $A$.&lt;/li>
&lt;li>$A\xRightarrow{*}w$&lt;/li>
&lt;li>$A\xRightarrow[lm]{*}e$&lt;/li>
&lt;li>$A\xRightarrow[rm]{*}e$&lt;/li>
&lt;li>There is a parse tree with root $A$ and yield $w$.&lt;/li>
&lt;/ol>
&lt;h4 id="inference-to-trees">Inference to Trees&lt;/h4>
&lt;h5 id="theorem--if-a-recursive-inference-procedure-gives-that-terminal-string-w-is-in-the-language-of-variable-a-then-there-is-a-parse-tree-with-root-a-and-yeild-w">&lt;strong>Theorem&lt;/strong> : If a recursive inference procedure gives that terminal string $w$ is in the language of variable $A$, then there is a parse tree with root $A$ and yeild $w$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Induction on the number of steps to infer that $w$ is in $A$.
&lt;ul>
&lt;li>Basis: In a single step, inference procedure gets to $w$ from $A$. Thus, there must be a $A\rightarrow w\in P$. Therefore in the parse tree rooted at $A$ we can get the yield as $w$.&lt;/li>
&lt;li>Induction: Let the fact $w$ in the language of $A$ be infered after $n+1$ steps and that the hypothesis for all inferences with $\le n$ steps.&lt;/li>
&lt;/ul>
&lt;p>Let $A\rightarrow X_1X_2\cdots X_k$ be a rule used to expand $A$ in the inference. Break $w=w_1w_2\cdots w_k$ such that&lt;/p>
&lt;ol>
&lt;li>If $X_i$ is terminal then $w_i=X_i$&lt;/li>
&lt;li>If $X_i$ is variable then by induction hypothesis there exist a tree rooted at $X_i$ and yield $w_i$.&lt;/li>
&lt;/ol>
&lt;p>Now we construct the tree rooted at $A$ by adding $X_1,X_2,\dots,X_k$ as level one children and their trees as described above below them. Thus the yeild of this tree is $w$.&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;h4 id="trees-to-derivations">Trees to derivations&lt;/h4>
&lt;h5 id="theorem--suppose-there-is-a-parse-tree-root-labeled-by-variable-a-and-with-yield-w-where-w-is-in-tast-then-there-is-a-leftmost-derivation-axrightarrowlmastw-in-grammar-g">&lt;strong>Theorem&lt;/strong> : Suppose there is a parse tree root labeled by variable $A$ and with yield $w$ where $w$ is in $T^{*}$. Then there is a leftmost derivation $A\xRightarrow[lm]{*}w$ in grammar $G$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>On performing induction on the height of the tree. Similar to above proof.&lt;/dd>
&lt;/dl>
&lt;h4 id="derivations-to-inferences">Derivations to Inferences&lt;/h4>
&lt;h5 id="theorem--if-there-is-a-derivation-axrightarrowgastw-for-win-tast-then-recursive-inference-procedure-applied-to-g-determines-that-w-is-in-the-language-of-a">&lt;strong>Theorem&lt;/strong> : If there is a derivation $A\xRightarrow[G]{*}w$ for $w\in T^{*}$ then recursive inference procedure applied to $G$ determines that $w$ is in the language of $A$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>On performing induction on the length of the derivation $A\xRightarrow{*}w$. Similar to above proof.&lt;/dd>
&lt;/dl>
&lt;h2 id="push-down-automaton">Push-down Automaton&lt;/h2>
&lt;dl>
&lt;dt>Pushdown Automaton $(\mathcal P(Q,\Sigma,\Gamma,\delta,q_0,Z_0,F) )$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>A finite set of &lt;em>states&lt;/em> $(Q)$.&lt;/li>
&lt;li>A finite set of &lt;em>input symbols&lt;/em> $(\Sigma)$.&lt;/li>
&lt;li>A finite &lt;em>stack alphabet&lt;/em> that can be push onto the stack $(\Gamma)$&lt;/li>
&lt;li>A &lt;em>transition function&lt;/em> $(\delta:Q\times\Sigma\cup\{\epsilon\}\times\Gamma\rightarrow\mathcal P(Q\times\Gamma^{*}))$ such that $(p,\gamma)\in\delta(q,a,X)$ means that on the input symbol $a$ we go from $q$ to $p$ and change the top of the stack from symbol $X$ to string $\gamma$&lt;/li>
&lt;li>A &lt;em>start state&lt;/em> $(q_0\in Q)$&lt;/li>
&lt;li>The &lt;em>stack start symbol&lt;/em> $(Z_0)$ that is empty stack has this at the top initially&lt;/li>
&lt;li>A set of &lt;em>final states&lt;/em> $F\sube Q$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Transition Diagram $(G(V,E))$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>$V=\{q:q\in Q\}$&lt;/li>
&lt;li>An arrow pointing into $q_0$&lt;/li>
&lt;li>Double circle around states in $F$&lt;/li>
&lt;li>$E=\{q\xrightarrow{a,X/\gamma}p:(p,\gamma)\in\delta(q,a,X)\}$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Instantaneous Description $(ID=(q,w,\gamma))$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>$q$ is the state&lt;/li>
&lt;li>$w$ is the remaining input&lt;/li>
&lt;li>$\gamma$ is the stack contents&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Transition Relation $(\vdash\sube(ID)^2)$&lt;/dt>
&lt;dd>If $(p,\alpha)\in\delta(q,a,X)$ then, $\forall w\in\Sigma^{*},\forall\beta\in\Gamma^{*}$
$$
(q,aw,X\beta)\vdash(p,w,\alpha\beta)
$$&lt;/dd>
&lt;dt>Generalised Transition Relation $(\vdash^{*})$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $I\vdash^{*}I$ for all $ID\text{s}$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: If $I\vdash K$ and $K\vdash^{*}J$ then $I\vdash^{*}J$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--if-qxalphavdashastpybeta-then-for-any-strings-w-in-sigmaast-and-gamma-in-gammaast-it-is-also-true-that-qxwalphagammavdashastpywbetagamma">&lt;strong>Theorem&lt;/strong> : If $(q,x,\alpha)\vdash^{*}(p,y,\beta)$, then for any strings $w$ in $\Sigma^{*}$ and $\gamma$ in $\Gamma^{*}$, it is also true that $(q,xw,\alpha\gamma)\vdash^{*}(p,yw,\beta\gamma)$&lt;/h5>
&lt;h5 id="theorem--if-qxwalphavdashastpywbeta-then-qxalphavdashastpybeta">&lt;strong>Theorem&lt;/strong> : If $(q,xw,\alpha)\vdash^{*}(p,yw,\beta)$ then $(q,x,\alpha)\vdash^{*}(p,y,\beta)$&lt;/h5>
&lt;h3 id="language-of-a-pda">Language of a PDA&lt;/h3>
&lt;h4 id="acceptance-by-final-state">Acceptance by Final State&lt;/h4>
&lt;p>$$
L(P) = \{w|(q_0,w,Z_0)\vdash^{*}(q,\epsilon,\alpha)\}
$$&lt;/p>
&lt;h2 id="properties-of-cfls">Properties of CFLs&lt;/h2>
&lt;h3 id="normal-forms-of-cfgs">Normal Forms of CFGs&lt;/h3>
&lt;p>Every CFL can be converted to it&amp;rsquo;s normal form by,&lt;/p>
&lt;ol>
&lt;li>Eliminate all the &lt;em>useless symbols&lt;/em> i.e. those variables or terminals that do not appear in any derivation of a terminal string from the start symbol.&lt;/li>
&lt;li>Eliminate all $\epsilon$&lt;em>-productions&lt;/em>, those of the form $A\rightarrow\epsilon$ for some variable $A$.&lt;/li>
&lt;li>Eliminate unit productions those of the fom $A\rightarrow B$ of variables $A$ and $B$.&lt;/li>
&lt;/ol>
&lt;h4 id="eliminating-useless-symbols">Eliminating Useless Symbols&lt;/h4>
&lt;dl>
&lt;dt>Useful Symbol&lt;/dt>
&lt;dd>A symbol $X\in T\cup V$ such that $S\xRightarrow{*}\alpha X\beta\xRightarrow{*}w$ where $w\in T^{*}$.&lt;/dd>
&lt;/dl>
&lt;p>A useful symbol has to be both of the following things,&lt;/p>
&lt;dl>
&lt;dt>Generating&lt;/dt>
&lt;dd>A symbol $X$ is generating if $X\xRightarrow{*}w$ for some terminal string $w$.&lt;/dd>
&lt;dt>Reachable&lt;/dt>
&lt;dd>A symbol $X$ is reachable if there is a derivation $S\xRightarrow{*}\alpha X\beta$ for some $\alpha$ and $\beta$.&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--let-mathcal-g-be-a-cfg-and-assuming-lmathcal-gneempty-and-mathcal-g_1-be-the-grammar-we-obtain-by-eliminating">&lt;strong>Theorem&lt;/strong> : Let $\mathcal G$ be a CFG and assuming $L(\mathcal G)\ne\empty$ and $\mathcal G_1$ be the grammar we obtain by eliminating,&lt;/h5>
&lt;h5 id="1-all-non-generating-symbols-and-productions-involving-any-of-these-symbols">1. All non-generating symbols and productions involving any of these symbols.&lt;/h5>
&lt;h5 id="2-all-unreachable-symbols">2. All unreachable symbols.&lt;/h5>
&lt;h5 id="thus-mathcal-g_1-has-no-useless-symbols-then-lmathcal-glmathcal-g_1">Thus $\mathcal G_1$ has no useless symbols then $L(\mathcal G)=L(\mathcal G_1)$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>To show that $L(\mathcal G_1)=L(\mathcal G)$ we need to prove,
&lt;ul>
&lt;li>
&lt;p>$L(\mathcal G_1)\sube L(\mathcal G)$: Since we have only eliminated symbols and productions from $\mathcal G$ to get $\mathcal G_1$ it follows that $L(\mathcal G_1)\sube L(\mathcal G)$.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$L(\mathcal G)\sube L(\mathcal G_1)$: If $w$ is in $L(\mathcal G)$, then $S\xRightarrow[\mathcal G]{*}w$. Each symbol in this derivation is evidently both reachable and generating, so it also a derivation of $\mathcal G_1$. Thus, $S\xRightarrow[\mathcal G_1]{*}w$ i.e. $w\in L(\mathcal G_1)$.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h4 id="computing-generating-and-reachable-symbols">Computing Generating and Reachable symbols&lt;/h4>
&lt;p>For computing the &lt;strong>generating symbols&lt;/strong> we use the following algorithm,&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: Every symbols in $T$ is obviously generating; it generates itself.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: Suppose there is a production $A\rightarrow\alpha$, and every symbols of $\alpha$ is already known to be generating. Then $A$ is generating.&lt;/li>
&lt;/ul>
&lt;p>For computing the &lt;strong>reachable symbols&lt;/strong> we use the following algorithm,&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $S$ is surely reachable.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: Suppose $A$ is reachable and there is a production $A\rightarrow\alpha$, then all symbols in $\alpha$ are reachable.&lt;/li>
&lt;/ul>
&lt;h4 id="eliminating-epsilon-productions">Eliminating $\epsilon$-Productions&lt;/h4>
&lt;p>We have to prove is $L$ has a CFG then $L-\{\epsilon\}$ also has a CFG. But simply removing all productions that lead to $\epsilon$ may leave out certain words from the language. Thus we define the following procedure.&lt;/p>
&lt;dl>
&lt;dt>Nullable&lt;/dt>
&lt;dd>A variable $A$ is nullable if $A\xRightarrow{*}\epsilon$.&lt;/dd>
&lt;/dl>
&lt;p>Algorithm to identify all the nullable variables,&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: If $A\rightarrow\epsilon$ is a production of $G$, then $A$ is nullable.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: If there is a production $B\rightarrow C_1C_2\cdots C_k$ where each $C_i$ is nullable, then $B$ is nullable. Note that all $C_i$ have to be variables.&lt;/li>
&lt;/ul>
&lt;p>Once all the nullable symbols have been determined, we construct a new grammar $\mathcal G_1$ whose set of productions $P_1$ is modified as follows.
For a production $A\rightarrow X_1X_2\cdots X_k$ of $P$, where $k\ge1$, suppose that $m$ of the $k$ $X_i$&amp;rsquo;s are nullable symbols. We add all $2^m$ possible combinations of this production in $P_1$, where the nullable $X_i$&amp;rsquo;s, in all possible combinations are present or absent. When $m=k$ i.e. all symbols $X_i$&amp;rsquo;s are nullable then we do not include the case where all symbols are absent.&lt;/p>
&lt;h5 id="theorem-if-grammar-mathcal-g_1-constructed-from-mathcal-g-by-the-above-construction-for-eliminating-epsilon-productions-then-lmathcal-g_1lmathcal-g-epsilon">&lt;strong>Theorem&lt;/strong>: If grammar $\mathcal G_1$ constructed from $\mathcal G$ by the above construction for eliminating $\epsilon$-productions, then $L(\mathcal G_1)=L(\mathcal G)-\{\epsilon\}$&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>By inducting of the length of the derivation we can prove,
$$
A\xRightarrow[\mathcal G_1]{*}w\iff A\xRightarrow[\mathcal G]{*}w\text{ and }w\ne\epsilon
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="eliminating-unit-productions">Eliminating Unit Productions&lt;/h4>
&lt;p>Algorithm to identify all unit pairs,&lt;/p>
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: $(A,A)$ is a unit pair for any variable $A$. That is, $A\xRightarrow{*}A$ by zero steps.&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: suppose we have determined that $(A,B)$ is a unit pair, and $B\rightarrow C$ is a production, where $C\in V$ then $(A,C)$ is a unit pair.&lt;/li>
&lt;/ul>
&lt;p>To eliminate all unit productions, we proceed by creating a new grammar $\mathcal G_1$ as follows,&lt;/p>
&lt;ol>
&lt;li>Find all the unit pairs of $\mathcal G$.&lt;/li>
&lt;li>For each unit pair $(A,B)$, add to $P_1$ all the productions $A\rightarrow\alpha$, where $B\rightarrow\alpha$ is a non-unit production in $P$.&lt;/li>
&lt;/ol>
&lt;h5 id="theorem--if-grammar-mathcal-g_1-is-constructed-from-grammar-mathcal-g-by-the-algorithm-described-above-for-eliminating-unit-productions-then-lmathcal-g_1lmathcal-g">&lt;strong>Theorem&lt;/strong> : If grammar $\mathcal G_1$ is constructed from grammar $\mathcal G$ by the algorithm described above for eliminating unit productions, then $L(\mathcal G_1)=L(\mathcal G)$.&lt;/h5>
&lt;h4 id="chomsky-normal-form">Chomsky Normal Form&lt;/h4>
&lt;p>We can show that every CFL (without $\epsilon$) can be generated by a CFG in which all productions are of the form,&lt;/p>
&lt;ul>
&lt;li>$A\rightarrow BC$&lt;/li>
&lt;li>$A\rightarrow a$&lt;/li>
&lt;/ul>
&lt;p>To convert a normalized CFG to it&amp;rsquo;s Chomsky form,&lt;/p>
&lt;ol>
&lt;li>Arrange all the bodies of length 2 or more so that they only contain variables. Thus if a terminal is present in add a new variable.&lt;/li>
&lt;li>Break bodies of length 3 or more into a cascade of productions, each with body of 2 variables.&lt;/li>
&lt;/ol>
&lt;h5 id="theorem--if-mathcal-g-is-a-cfg-whose-language-contains-at-least-one-string-other-than-epsilon-then-there-is-a-grammar-mathcal-g_1-in-chomsky-normal-form-such-that-lmathcal-g_1lmathcal-g-epsilon">&lt;strong>Theorem&lt;/strong> : If $\mathcal G$ is a CFG whose language contains at least one string other than $\epsilon$, then there is a grammar $\mathcal G_1$ in Chomsky Normal Form, such that $L(\mathcal G_1)=L(\mathcal G)-\{\epsilon\}$&lt;/h5>
&lt;h3 id="pumping-lemma-for-cfls">Pumping Lemma for CFLs&lt;/h3>
&lt;h4 id="size-of-parse-tree">Size of Parse Tree&lt;/h4>
&lt;blockquote>
&lt;p>For a grammar $\mathcal G$ in Chomsky Nornal Form, a parse tree with longest path $n$ and yield $w$, $|w|\le 2^{n-1}$&lt;/p>
&lt;/blockquote>
&lt;h4 id="statement-of-pumping-lemma">Statement of Pumping Lemma&lt;/h4>
&lt;h5 id="pumping-lemma-for-context-free-languages--let-l-be-a-cfl-then-there-exists-a-constant-n-such-that-if-z-is-any-string-in-l-such-that-z-is-at-least-n-then-we-can-write-zuvwxy-such-that">&lt;strong>Pumping Lemma for context-free languages&lt;/strong> : Let $L$ be a CFL. Then there exists a constant $n$ such that if $z$ is any string in $L$ such that $|z|$ is at least $n$, then we can write $z=uvwxy$ such that,&lt;/h5>
&lt;h5 id="1-vwxle-n">1. $|vwx|\le n$&lt;/h5>
&lt;h5 id="2-vxneepsilon">2. $vx\ne\epsilon$&lt;/h5>
&lt;h5 id="3-for-all-ige0-uviwxiyin-l">3. For all $i\ge0$, $uv^iwx^iy\in L$&lt;/h5>
&lt;h4 id="applications-of-pumping-lemma">Applications of Pumping Lemma&lt;/h4>
&lt;p>Can be used to disprove a language being CFL by the following game,&lt;/p>
&lt;ol>
&lt;li>Player 1 picks a language $L$ that we want to show is not CFL.&lt;/li>
&lt;li>Player 2 picks an unknown $n$.&lt;/li>
&lt;li>Player 1 picks a $z$ based on $n$ as parameter.&lt;/li>
&lt;li>Player 2 breaks $z$ into $uvwxy$, such that $|vwx|\le n$ and $vx\ne\epsilon$.&lt;/li>
&lt;li>Player 1 wins if they can pick an $i$ and show that $uv^iwx^iy$ is not in $L$.&lt;/li>
&lt;/ol>
&lt;h3 id="closure-properties-1">Closure Properties&lt;/h3>
&lt;dl>
&lt;dt>Substitution $s:\Sigma\rightarrow\mathcal P(\Sigma_1^*)$&lt;/dt>
&lt;dd>For every symbol $a\in\Sigma$, $s(a)=L_a$ where $L_a$ is a language on $\Sigma_1$ Similarly for a word $w\in\Sigma^*$
&lt;ul>
&lt;li>&lt;em>Basis&lt;/em>: If $w=\epsilon$ then $s(\epsilon)=\epsilon$&lt;/li>
&lt;li>&lt;em>Induction&lt;/em>: $s(w)=s(w[:-1])\cdot s(w[-1])$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h4 id="substitution-theorem">Substitution Theorem&lt;/h4>
&lt;h5 id="theorem-if-l-is-a-cfl-over-sigma-and-s-is-a-substitution-on-sigma-such-that-sa-is-a-cfl-for-each-ainsigma-then-sl-is-a-cfl">&lt;strong>Theorem&lt;/strong>: If $L$ is a CFL over $\Sigma$ and $s$ is a substitution on $\Sigma$ such that $s(a)$ is a CFL for each $a\in\Sigma$, then $s(L)$ is a CFL.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>In any Parse tree of a grammar $\mathcal G$ of the original
language $L$, we replace the terminal symbols by the roots of parse trees of the language substituted at that terminal. This way a string $w$ in in $L(\mathcal G&amp;rsquo;)$ iff $w$ is in $s(L)$.&lt;/dd>
&lt;/dl>
&lt;h4 id="applications-of-the-substitution-theorem">Applications of the Substitution Theorem&lt;/h4>
&lt;h5 id="theorem-all-cfls-are-closed-under-the-following-operations-">&lt;strong>Theorem&lt;/strong>: All CFLs are closed under the following operations:-&lt;/h5>
&lt;ol>
&lt;li>Union
Proof: $L_1$ and $L_2$ be CFLs. Then $L_1\cup L_2$ is the language $s(L)$ where $L$ is the language $\{0,1\}$ and $s$ is the substitution defined by $s(1)=L_1$ and $s(0)=L_2$.&lt;/li>
&lt;li>Concatenation
Proof: $L=\{01\}$, $s(1)=L_1$, $s(0)=L_2$&lt;/li>
&lt;li>Closure
Proof: $L=\{1\}^*$, $s(1)=L_1$&lt;/li>
&lt;li>Homomorphism
Proof: $s(a)=\{h(a)\}\forall a\in\Sigma$ then $h(L)=s(L)$ where $h:\Sigma\rightarrow\Sigma$&lt;/li>
&lt;/ol>
&lt;h4 id="reversal-1">Reversal&lt;/h4>
&lt;h5 id="theorem-if-l-is-a-cfl-then-so-is-lr">&lt;strong>Theorem&lt;/strong>: If $L$ is a CFL then so is $L^R$.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>If $\mathcal G$ is the grammar for $L$ then $\mathcal G^R=(V,T,P^R,S)$ is the grammar for $L^R$ where,
$$
P^R=\{A\rightarrow\alpha^R:A\rightarrow\alpha\in P\}
$$&lt;/dd>
&lt;/dl>
&lt;h4 id="intersection-with-regular-language">Intersection with Regular Language&lt;/h4>
&lt;h5 id="theorem-if-l-is-a-cfl-and-r-is-a-rl-then-lcap-r-is-a-cfl">&lt;strong>Theorem&lt;/strong>: If $L$ is a CFL and $R$ is a RL then $L\cap R$ is a CFL.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Involves PDA :(&lt;/dd>
&lt;/dl>
&lt;h3 id="descision-properties-1">Descision Properties&lt;/h3>
&lt;h2 id="turing-machines">Turing Machines&lt;/h2>
&lt;dl>
&lt;dt>Turing Machine $M(Q, \Sigma, \Gamma, \delta, q_0, B, F)$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$Q$: Finite set of states of finite control&lt;/li>
&lt;li>$\Sigma$: Finite set of input symbols&lt;/li>
&lt;li>$\Gamma$: Complete set of tape symbols; $\Sigma$ is always a subset of $\Gamma$ and $\Sigma\sube\Gamma$&lt;/li>
&lt;li>$\delta$: Transition funtion such that $\delta: Q\times\Gamma\rightarrow Q\times\Gamma\times\{L,R\}$ and if $\delta(p, X)=(q, Y, L/R)$ means
&lt;ul>
&lt;li>Control state goes from $p$ to $q$&lt;/li>
&lt;li>Current tape symbol $X$ is replaced by $Y$&lt;/li>
&lt;li>Tape is shifted towards left/right based on L/R.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>$q_0$: The start state thus $q_0\in Q$&lt;/li>
&lt;li>$B$: The blank symbol thus $B\in\Gamma$&lt;/li>
&lt;li>$F$: The set of final accepting states thus $F\sube Q$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Instantaneous Description $ID(X_1X_2\cdots X_{i-1}qX_i\cdots X_n)$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$q$ is the state of the Turing machine&lt;/li>
&lt;li>Tape is scanning the $i\text{th}$ symbol from the left&lt;/li>
&lt;li>$X_1X_2\cdots X_n$ is the portion of the tape between the leftmost and the rightmost non-blank.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Moves $(\vdash$ or $\vdash^{*})$&lt;/dt>
&lt;dd>If $\delta(q,X_i)=(p,Y,\alpha)$
&lt;ul>
&lt;li>$\alpha=L$
$$
X_1X_2\cdots X_{i-1}qX_i\cdots X_n\vdash X_1\cdots X_{i-2}pX_{i-1}Y\cdots X_n
$$&lt;/li>
&lt;li>$i=1$ and $\alpha=L$
$$
qX_1\cdots X_n\vdash pBYX_2\cdots X_n
$$&lt;/li>
&lt;li>$i=n$, $Y=B$ and $\alpha=L$
$$
X_1\cdots X_{n-1}qX_n\vdash X_1\cdots X_{n-2}pX_{n-1}
$$&lt;/li>
&lt;li>$\alpha=R$
$$
X_1X_2\cdots X_{i-1}qX_i\cdots X_n\vdash X_1\cdots X_{i-1}YpX_{i+1}\cdots X_n
$$&lt;/li>
&lt;li>$i=n$ and $\alpha=R$
$$
X_1\cdots X_{n-1}qX_n\vdash X_1\cdots X_{n-1}YpB
$$&lt;/li>
&lt;li>$i=1$, $Y=B$ and $\alpha=R$
$$
qX_1\cdots X_n\vdash pX_2\cdots X_n
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Transition diagram $G(V,E)$&lt;/dt>
&lt;dd>&lt;ol>
&lt;li>$V=Q$&lt;/li>
&lt;li>$E=\{q\xrightarrow{X/Y\rightarrow}p:\delta(q,X)=(p,Y,R)\}\cup\{q\xrightarrow{X/Y\leftarrow}p:\delta(q,X)=(p,Y,L)\}$&lt;/li>
&lt;li>An arrow pointing into $q_0$&lt;/li>
&lt;li>All states in $F$ are double-circled&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;dt>Language of Turing Machine $(L(M))$&lt;/dt>
&lt;dd>$$
L(M) = \{w:q_0w\vdash^{*}\alpha p\beta, p\in F\}
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>The set of languages accepted by a Turing Machine is called Recursively Enumerable&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Another notion of acceptance is when a Turing Machine halts on words in the language.&lt;/p>
&lt;/blockquote>
&lt;h3 id="programming-techniques">Programming Techniques&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Storage in state&lt;/strong>: Viewing the control states as tuples to store information&lt;/li>
&lt;li>&lt;strong>Multiple Tracks&lt;/strong>: Using multiple tracks to store data, marks, etc. in a useful way.&lt;/li>
&lt;li>&lt;strong>Subroutines&lt;/strong>: Creating copies of con trol states and transitions every time a subroutine is to be used from its initial state.&lt;/li>
&lt;/ol>
&lt;h3 id="extensions-to-basic-definition">Extensions to Basic definition&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Multitape Turing Machines&lt;/strong>: Reads from more than one tapes.&lt;/li>
&lt;li>&lt;strong>Non-deterministic Turing Machines&lt;/strong>: $\delta:Q\times\Gamma\rightarrow\mathcal P(Q\times\Gamma\times\{R,L\})$&lt;/li>
&lt;/ol>
&lt;h3 id="restrictions-on-basic-definition">Restrictions on Basic definition&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>TM with semi-infinite tapes&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Multistack Machines&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Counter Machines&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="undecidability">Undecidability&lt;/h2>
&lt;dl>
&lt;dt>Code for TM $(w_M)$&lt;/dt>
&lt;dd>An elaborate way to encode $M$ and it&amp;rsquo;s components into a finite bit-string that is unique to $M$.&lt;/dd>
&lt;dt>Diagonalization Language $(L_d)$&lt;/dt>
&lt;dd>We enumerate all possible Turing Machines $M_i$ by enumerating their codes $w_i$. Now construct a table in which $(i,j)\text{th}$ entry is $1$ if $w_i$ is accepted by $M_j$ else it is $0$. Take the diagonal of this table and complement it to get the characteristic vector for $L_d$. The $i\text{th}$ bit of this characteristic vector denotes the membership of $w_i$ in $L_d$.&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--l_d-is-not-recursively-enumerable">&lt;strong>Theorem&lt;/strong> : $L_d$ is not recursively enumerable.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>There is no $M_i$ in the table as described above that matches the characteristic vector of $L_d$ over $w_i\text{&amp;rsquo;s}$ therefore $\not\exist M,\ L_d=L(M)$.&lt;/dd>
&lt;dt>Recursive Languages&lt;/dt>
&lt;dd>Languages that have a Turing Machine that accepts all the words in the language and halts without accepting on all the words not in the language.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Recursive(Algorithmic) $\sube$ RE(Undecidable) $\sube$ Not RE&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If $L$ is recursive then $\bar L$ is also recursive.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If $L$ and $\bar L$ are RE then they are both recursive.&lt;/p>
&lt;/blockquote>
&lt;h5 id="rices-theorem--every-nontrivial-property-of-the-re-languages-is-undecidable">&lt;strong>Rice&amp;rsquo;s Theorem&lt;/strong> : Every nontrivial property of the RE languages is undecidable.&lt;/h5>
&lt;blockquote>
&lt;p>$L_u$ a.k.a. the universal language containing all the pairs $(M,w)$ where $M$ is a code for TM which accepts $w$.
$L_u$ is &lt;strong>Undecidable&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="post-correspondence-problem">Post Correspondence Problem&lt;/h3>
&lt;dl>
&lt;dt>Post Correspondence Problem $(PCP)$&lt;/dt>
&lt;dd>Given two lists of strings $A=[w_1,w_2,\dots w_k]$ and $B=[x_1,x_2,\dots x_k]$ with equal length, find a sequence of indices $i_1, i_2, \dots, i_m$ where,
$$
w_{i_1}w_{i_2}\cdots w_{i_m}=x_{i_1}x_{i_2}\cdots x_{i_m}
$$&lt;/dd>
&lt;dt>Modified PCP $(MPCP)$&lt;/dt>
&lt;dd>Given two lists of strings $A=[w_1,w_2,\dots w_k]$ and $B=[x_1,x_2,\dots x_k]$ with equal length, find a sequence of indices $i_1, i_2, \dots, i_m$ where,
$$
w_1w_{i_1}w_{i_2}\cdots w_{i_m}=x_1x_{i_1}x_{i_2}\cdots x_{i_m}
$$&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--mpcp-reduces-to-pcp">&lt;strong>Theorem&lt;/strong> : MPCP reduces to PCP&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Given an instance of MPCP with lists $A$ and $B$ alphabets not containing $*$ and $\$$ we define a PCP instance with lists $C=[y_0,y_1,\dots,y_{k+1}]$ and $D=[z_0,z_1,\dots,z_{k+1}]$
&lt;ol>
&lt;li>For $i=1,2,\dots,k$ let $y_i=w_i$ with a $*$ after each symbol and let $z_i=x_i$ with a $*$ before each symbol of $x_i$&lt;/li>
&lt;li>$y_0=*y_1$ and $z_0=z_1$&lt;/li>
&lt;li>$y_{k+1}=\$$ and $z_{k+1}=*\$$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;h5 id="theorem--mpcp-is-undecidable">&lt;strong>Theorem&lt;/strong> : MPCP is Undecidable.&lt;/h5>
&lt;dl>
&lt;dt>Proof&lt;/dt>
&lt;dd>Reduce $L_u$ acceptability to MPCP.&lt;/dd>
&lt;/dl>
&lt;h2 id="intractable-problems">Intractable Problems&lt;/h2>
&lt;dl>
&lt;dt>Polynomial Time $(\mathcal P)$&lt;/dt>
&lt;dd>Class of languages which are accepted by a Turing machine $M$ with a time complexity $T(n)$ such that whenever $M$ is given an input $w$ of length $n$, $M$ halts after making at most $T(n)$ moves, regardless of whether or not $w$ is accepted.&lt;/dd>
&lt;dt>Nondeterministic Polynomial Time $(\mathcal{NP})$&lt;/dt>
&lt;dd>Class of languages which are accepted by a nondeterministic Turing machine $M$ with a time complexity $T(n)$ such that whenever $M$ is given an input $w$ of length $n$, $M$ halts after making at most $T(n)$ moves.
&lt;p>A language $L$ belongs to $\mathcal{NP}$ iff $\exist$ a language $L_1\in\mathcal P$:-&lt;/p>
&lt;ul>
&lt;li>if for every $x\in L \exist$ some additional input $y$ with (with $y≤p(|x|)$) s.t. the string $x#y\in L_1$ (where $#$ represents some kind of pair).&lt;/li>
&lt;li>if $x\not\in L$ then for no string $y$ we have $x#y\in L_1$.&lt;/li>
&lt;li>Here, $y$ is a proof or certificate that $x\in L$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>A problem $A$ is said to be &lt;em>&lt;strong>Polynomial-time reducible&lt;/strong>&lt;/em> to problem $B$ if there exists a $\mathcal P$ TM which can generate solutions for $A$ given a constant time TM for solving $B$ that can be used as a subroutine.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>Complement of $\mathcal{NP}$ $(\text{Co-}\mathcal{NP})$&lt;/dt>
&lt;dd>Complement of languages in $\mathcal{NP}$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>If $\mathcal P = \mathcal{NP}$, then Co-$\mathcal{NP}$ will also be $\mathcal{NP}$. But, whether $\mathcal P$ is equal to $\mathcal{NP}$ (or not) is not proven yet.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Language of Composite numbers is in $\mathcal{NP} and so is the language of Prime Numbers$&lt;/p>
&lt;/blockquote>
&lt;h3 id="np-complete-problems">NP-Complete Problems&lt;/h3>
&lt;ul>
&lt;li>SAT&lt;/li>
&lt;li>CNF-SAT&lt;/li>
&lt;li>3-SAT&lt;/li>
&lt;li>Maximal Independent Set&lt;/li>
&lt;li>Minimal Vertex Cover&lt;/li>
&lt;li>Hamiltionian path&lt;/li>
&lt;li>Travelling Salesman Problem&lt;/li>
&lt;/ul></description></item><item><title>Operating Systems</title><link>https://adityakadoo.github.io/Scrolls/courses/operating_systems/</link><pubDate>Fri, 19 Aug 2022 10:31:05 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/operating_systems/</guid><description>&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>
&lt;h3 id="operating-systems---three-easy-pieceshttpstechiefood4ufileswordpresscom202002operating_systems_three_easy_piecespdf">&lt;a href="https://techiefood4u.files.wordpress.com/2020/02/operating_systems_three_easy_pieces.pdf">Operating Systems - Three Easy Pieces&lt;/a>&lt;/h3>
&lt;/li>
&lt;/ul>
&lt;h2 id="introduction-to-os">Introduction to OS&lt;/h2>
&lt;p>Main objectives of OS include:-&lt;/p>
&lt;ol>
&lt;li>&lt;strong>CPU Virtualization&lt;/strong> : Making using the processor easy.&lt;/li>
&lt;li>&lt;strong>Memory Virtualization&lt;/strong> : Making storage in memory easy.&lt;/li>
&lt;li>&lt;strong>Concurrency&lt;/strong> : Ensuring correctness when multiple programs run together.&lt;/li>
&lt;li>&lt;strong>Persistence&lt;/strong> : Ensuring permanent memory does not get erased and stays organised.&lt;/li>
&lt;li>&lt;strong>Design Goals&lt;/strong> : Abstractions, performance, isolation, reliability, energy-efficiency&lt;/li>
&lt;/ol>
&lt;h2 id="cpu-virtualization">CPU Virtualization&lt;/h2>
&lt;h3 id="abstraction--process">Abstraction : Process&lt;/h3>
&lt;p>The abstraction provided by the OS of a running program is called a &lt;em>&lt;strong>process&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>The OS creates the illusion of &lt;strong>virtualization&lt;/strong> the CPU by running one process, then stopping it and running another, and so forth. This is known as &lt;strong>time sharing&lt;/strong> of the CPU.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Time sharing&lt;/strong> is one of the most basic techniques used by an OS to share a resource. By allowing the resource to be used for a little while by one entity, and then a little while by another, and so forth. The natural counterpart of time sharing is &lt;strong>space sharing&lt;/strong>, where a resource is divided (in space) among those who wish to use it.&lt;/p>
&lt;/blockquote>
&lt;h4 id="process-api">Process API&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong>: Spawns a new process.&lt;/li>
&lt;li>&lt;strong>Destroy&lt;/strong>: Kills a process forcefully.&lt;/li>
&lt;li>&lt;strong>Wait&lt;/strong>: Wait for a process to finish.&lt;/li>
&lt;li>&lt;strong>Status&lt;/strong>: Every process has a state associated with it.&lt;/li>
&lt;li>&lt;strong>Miscellaneous Control&lt;/strong>: Halt, resume, etc.&lt;/li>
&lt;/ul>
&lt;h4 id="process-creation">Process Creation&lt;/h4>
&lt;ol>
&lt;li>Loading the &lt;em>code&lt;/em> into executable format.&lt;/li>
&lt;li>Initializing the process&amp;rsquo;s runtime &lt;em>stack&lt;/em>.&lt;/li>
&lt;li>Initializing the program&amp;rsquo;s &lt;em>heap&lt;/em> memory.&lt;/li>
&lt;li>Setup &lt;em>file descriptors&lt;/em> associated with &lt;em>input&lt;/em>, &lt;em>output&lt;/em> and &lt;em>error&lt;/em> streams.&lt;/li>
&lt;/ol>
&lt;h4 id="process-states">Process States&lt;/h4>
&lt;p>Following are the types of states a process can be in:-&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Running&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Ready&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Blocked&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 272 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 L 64,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,16 L 184,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 184,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 L 160,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,112 L 88,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 L 160,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 L 96,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 L 176,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,112 L 224,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 72,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='96.000000,32.000000 84.000000,26.400000 84.000000,37.599998' fill='currentColor' transform='rotate(180.000000, 88.000000, 32.000000)'>&lt;/polygon>
&lt;polygon points='96.000000,112.000000 84.000000,106.400002 84.000000,117.599998' fill='currentColor' transform='rotate(0.000000, 88.000000, 112.000000)'>&lt;/polygon>
&lt;polygon points='192.000000,16.000000 180.000000,10.400000 180.000000,21.600000' fill='currentColor' transform='rotate(0.000000, 184.000000, 16.000000)'>&lt;/polygon>
&lt;polygon points='192.000000,112.000000 180.000000,106.400002 180.000000,117.599998' fill='currentColor' transform='rotate(180.000000, 184.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,1 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 A 16,16 0 0,0 16,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 A 16,16 0 0,1 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,32 A 16,16 0 0,0 208,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 A 16,16 0 0,1 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,0 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 A 16,16 0 0,0 112,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,128 A 16,16 0 0,1 160,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>I&lt;/text>
&lt;text text-anchor='middle' x='16' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='84' fill='currentColor' style='font-size:1em'>/&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='84' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='32' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='40' y='84' fill='currentColor' style='font-size:1em'>:&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='120' y='52' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='120' y='132' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='128' y='52' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='128' y='116' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='128' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='136' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='144' y='116' fill='currentColor' style='font-size:1em'>k&lt;/text>
&lt;text text-anchor='middle' x='144' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='152' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='152' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='160' y='52' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='168' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='176' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='208' y='36' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='224' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='20' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='232' y='84' fill='currentColor' style='font-size:1em'>I&lt;/text>
&lt;text text-anchor='middle' x='232' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='240' y='84' fill='currentColor' style='font-size:1em'>/&lt;/text>
&lt;text text-anchor='middle' x='240' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='248' y='84' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='248' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>:&lt;/text>
&lt;text text-anchor='middle' x='256' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="data-structures">Data Structures&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Process List&lt;/strong>: A list maintained by the OS of all the processes and their PCB.&lt;/li>
&lt;li>&lt;strong>Process Control Block&lt;/strong> (PCB): A C struct that keeps track of all the meta-data associated with one process.&lt;/li>
&lt;/ul>
&lt;h4 id="process-api-in-linux">Process API in Linux&lt;/h4>
&lt;p>In UNIX systems new processes are created with the use of 2 system calls &lt;code>fork()&lt;/code> and &lt;code>exec()&lt;/code>.&lt;/p>
&lt;h4 id="fork-system-call">&lt;code>fork()&lt;/code> system call&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello world.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="c1">// fork failed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;fork failed&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am child.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am parent of %d.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">getpid&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">rc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="adding-wait-system-call">Adding &lt;code>wait()&lt;/code> system call&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello world.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="c1">// fork failed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;fork failed&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am child.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// after waiting for child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am parent of %d.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">getpid&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">rc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="finally-the-exec-system-call">Finally, the &lt;code>exec()&lt;/code> system call&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello world.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="c1">// fork failed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;fork failed&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am child.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">myargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">myargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">myargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;p3.c&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="n">myargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nf">execvp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">myargs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="c1">// Child converted to a different program now
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;somethings wrong; I can feel it&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="c1">// only executed by parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// after waiting for child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d:hello, I am parent of %d.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">getpid&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">rc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="limited-direct-execution">Limited Direct Execution&lt;/h3>
&lt;p>Direct Execution can be explained by the following table,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>OS&lt;/th>
&lt;th>Program&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Create entry for process list&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocate memory to program&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Load program into memory&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set up stack with argc/argv&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear registers&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Execute call &lt;code>main()&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>Run &lt;code>main()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>Execute return from &lt;code>main()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Free memory of process&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove from process list&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="problem-1-restricted-operations">Problem #1: Restricted Operations&lt;/h4>
&lt;blockquote>
&lt;p>How to perform restricted operations such as I/O or networking without giveing complete control over the system?&lt;/p>
&lt;/blockquote>
&lt;p>We add processor modes:-&lt;/p>
&lt;ul>
&lt;li>&lt;em>&lt;strong>User mode&lt;/strong>&lt;/em>: The code that runs here is restricted and can&amp;rsquo;t issue I/O requests and it will kill the process.&lt;/li>
&lt;li>&lt;em>&lt;strong>Kernel mode&lt;/strong>&lt;/em>: In this mode the operating system runs the code and can do whatever it likes.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>What should a user program do to perform some kind of privileged operation?&lt;/p>
&lt;/blockquote>
&lt;p>The answer is &lt;em>&lt;strong>system calls&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Every system call runs a special &lt;code>trap&lt;/code> instruction which jumps the execution to kernel mode to do any privileged operation. Once finished the program can return to user mode by executing &lt;code>return-from-trap&lt;/code> instruction.&lt;/p>
&lt;p>While executing &lt;code>trap&lt;/code>, the hardware needs to ensure the register state of the user program is stored and must be restored when &lt;code>return-from-trap&lt;/code> is executed.&lt;/p>
&lt;blockquote>
&lt;p>How does the trap know which code to run inside the OS?&lt;/p>
&lt;/blockquote>
&lt;p>The kernel sets-up a &lt;strong>trap table&lt;/strong> at boot time in priviledged mode. OS informs the hardware of the locations of the &lt;strong>trap handlers&lt;/strong>. Using this, whenever a hardware interrupt is
passed this code is run by the hardware from the trap handlers.
All these operation are also &lt;strong>priviledge&lt;/strong> operations.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>OS&lt;/th>
&lt;th>Hardware&lt;/th>
&lt;th>Program&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Initialize trap table&lt;/td>
&lt;td>Remember addresses of syscall handler&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Create entry for process list&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocate memory to program&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Load program into memory&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set up stack with argc/argv&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clear registers&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>return-from-trap&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>restores regs to kernel stack&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>move to user mode&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>jump to &lt;code>main()&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Run &lt;code>main()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Call syscall&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>trap&lt;/code> into OS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>save regs to kernel stack&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>move to kernel mode&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>jump to trap handler&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Handle trap&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Execute system call&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>return-from-trap&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>restore regs from kernel stack&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>move to kernel mode&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>jump to PC after trap&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>return from main&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>trap&lt;/code> via &lt;code>exit()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Free memory of process&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remove from process list&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="switching-between-process">Switching Between Process&lt;/h4>
&lt;blockquote>
&lt;p>How can the operating system &lt;strong>regain control&lt;/strong> of the CPU so that it can switch process?&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;em>&lt;strong>Wait for system calls&lt;/strong>&lt;/em>: When ever the user program makes system call or makes an error it returns the control back to the OS. Otherwise it can also make a &lt;code>yield&lt;/code> call to return the control to the OS periodically.&lt;/li>
&lt;li>&lt;em>&lt;strong>OS takes controls&lt;/strong>&lt;/em>: This can be done using a simple &lt;code>timer interrupt&lt;/code> that is raised after a fixed amount milliseconds.&lt;/li>
&lt;/ul>
&lt;h4 id="saving-and-restoring-context">Saving and Restoring Context&lt;/h4>
&lt;blockquote>
&lt;p>Once the OS gains control, how to decide which process gets executed next?&lt;/p>
&lt;/blockquote>
&lt;p>This is done by the &lt;strong>scheduler&lt;/strong>. Once the decision is made the OS executes a low-level piece of code which is called &lt;strong>context switch&lt;/strong>. It is basically saving the register values of the current process and restoring the same for the next process.&lt;/p>
&lt;h3 id="scheduling">Scheduling&lt;/h3>
&lt;h4 id="workload-assumptions">Workload Assumptions&lt;/h4>
&lt;ol>
&lt;li>Each job runs for the same amount of time.&lt;/li>
&lt;li>All jobs arrive at the same time.&lt;/li>
&lt;li>All jobs only use the CPU.&lt;/li>
&lt;li>The run-time of each job is known.&lt;/li>
&lt;/ol>
&lt;h4 id="scheduling-metrics">Scheduling Metrics&lt;/h4>
&lt;p>We first define a performance index,
$$
T_{turnaround} = T_{completion} - T_{arrival}
$$
For now, $T_{turnaround} = T_{completion}$.&lt;/p>
&lt;p>Another metric that we need to keep track of is fairness.&lt;/p>
&lt;blockquote>
&lt;p>Jain&amp;rsquo;s Fairness Index?&lt;/p>
&lt;/blockquote>
&lt;h4 id="first-in-first-out">First In First Out&lt;/h4>
&lt;p>This works and produces least turnaround time with current assumptions.&lt;/p>
&lt;p>I assumption 1 is removed, then this stops giving the most optimum solution.&lt;/p>
&lt;h4 id="shortest-job-first">Shortest Job First&lt;/h4>
&lt;p>This produces the best results without assumption 1.&lt;/p>
&lt;p>If assumption 2 is also removed then in some cases this method performs poorly.&lt;/p>
&lt;h4 id="shortest-time-to-completion-first">Shortest Time-to-Completion First&lt;/h4>
&lt;p>With only assumptions 3 and 4 this is the theoretically most optimum solution. This can be easily implemented using a heap. It also makes use of timed interrupts and context switching.&lt;/p>
&lt;p>In modern systems another new metric is quite important called &lt;strong>Response time&lt;/strong>.
$$
T_{response} = T_{firstrun}-T_{arrival}
$$
STCF doesn&amp;rsquo;t necessarily perform well in this case.&lt;/p>
&lt;h4 id="round-robin">Round Robin&lt;/h4>
&lt;p>Aka &lt;strong>time slicing&lt;/strong>, in this method a time slice is fixed and after every such time period an interrupt is passed. After an interrupt the OS makes sure to rotate between different processes to ensure low response time and fairness.&lt;/p>
&lt;h4 id="incorporating-io">Incorporating I/O&lt;/h4>
&lt;p>This relaxes the 3rd assumption and whenever a process is engaged in I/O operation it is &lt;em>blocked&lt;/em>. At it&amp;rsquo;s place a different process is allowed to use the CPU.&lt;/p>
&lt;h4 id="multi-level-feedback-queues">Multi-Level Feedback Queues&lt;/h4>
&lt;ol>
&lt;li>If Priority(A) &amp;gt; Priority(B), A runs (B doesn’t).&lt;/li>
&lt;li>If Priority(A) = Priority(B), A &amp;amp; B run in RR.&lt;/li>
&lt;li>When a job enters the system, it is placed at the highest
priority (the topmost queue).&lt;/li>
&lt;li>Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is
reduced (i.e., it moves down one queue).&lt;/li>
&lt;li>After some time period S, move all the jobs in the system
to the topmost queue.&lt;/li>
&lt;/ol>
&lt;h2 id="memory-virtualization">Memory Virtualization&lt;/h2>
&lt;h3 id="abstraction--address-spaces">Abstraction : Address Spaces&lt;/h3>
&lt;p>&lt;img src="images/address_space.png" alt="Address space example">&lt;/p>
&lt;p>3 regions of code in the address space:-&lt;/p>
&lt;ul>
&lt;li>Code: Keeps the data related to the code&lt;/li>
&lt;li>Stack: Keeps track of the function calls and scope variables&lt;/li>
&lt;li>Heap: Holds the dynamically allocated memory&lt;/li>
&lt;/ul>
&lt;p>Objectives of Memory virtualization:-&lt;/p>
&lt;ul>
&lt;li>Transparency&lt;/li>
&lt;li>Efficiency&lt;/li>
&lt;li>Protection/Isolation&lt;/li>
&lt;/ul>
&lt;h4 id="memory-api">Memory API&lt;/h4>
&lt;h4 id="automaticstack-memory">Automatic/Stack Memory&lt;/h4>
&lt;p>This is the memory that is accessed when using a variable on &lt;strong>stack&lt;/strong>. This is temporary and is overwritten when the variable goes out of scope&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// declares an integer on the stack
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="heap-memory">Heap Memory&lt;/h4>
&lt;p>This is a long-lived memory which is handled explicitly by the programmer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// allocates memory on heap
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// frees the allocated memory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>malloc()&lt;/code> and &lt;code>free()&lt;/code> are not system calls but library calls built on top of system calls. Apart from these there is &lt;code>calloc()&lt;/code> and &lt;code>realloc()&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>mmap()&lt;/code> is another call to get &lt;strong>anonymous&lt;/strong> memory allocated in the swap space.&lt;/p>
&lt;/blockquote>
&lt;h4 id="address-translation">Address Translation&lt;/h4>
&lt;p>The hardware provides a generic technique called &lt;strong>hardware-based address translation&lt;/strong> to map virtual addresses to physical address but this is quite low-level and the OS has to step-in and manage which areas are free.&lt;/p>
&lt;p>We assume that:&lt;/p>
&lt;ul>
&lt;li>Address space must be mapped to &lt;em>contiguous&lt;/em> physical memory&lt;/li>
&lt;li>The physical space is large compared to the address space&lt;/li>
&lt;li>All address spaces are of exactly same size&lt;/li>
&lt;/ul>
&lt;p>This is done at runtime by the &lt;strong>Memory Management Unit(MMU)&lt;/strong> in the CPU. The hardware maintains a &lt;strong>base&lt;/strong> and a &lt;strong>bound&lt;/strong> to keep track of where an address space is mapped. If memory outside this is accessed CPU raises a segmentation fault.&lt;/p>
&lt;p>OS thus has to maintain the location of memory not in use in a data structure such as &lt;strong>free list&lt;/strong>.&lt;/p>
&lt;h4 id="segmentation">Segmentation&lt;/h4>
&lt;p>Instead of keeping track of base and bound pair of the entire address space as this wastes a lot of used space, store base and bound of different segments such as the code, stack and heap. Along with their seperate bounds also keep track of direction in which it grows and it&amp;rsquo;s read/write permissions.&lt;/p>
&lt;h5 id="os-issues">OS issues&lt;/h5>
&lt;ol>
&lt;li>&lt;em>&lt;strong>Context Switch&lt;/strong>&lt;/em>: During a context switch the OS needs to make sure the addresses corresponding to all the segments of the address space are stored.&lt;/li>
&lt;li>&lt;em>&lt;strong>External Fragmentation&lt;/strong>&lt;/em>: This happens when the spaces left in between allocated segments is not enough to store a new segment but the total free space is sufficient to do so.&lt;/li>
&lt;/ol>
&lt;h4 id="free-space-management">Free Space Management&lt;/h4>
&lt;dl>
&lt;dt>Free List Approach&lt;/dt>
&lt;dd>Using a linked list to keep track of free unallocated segments of memory. Every node stores the start and size of the free segment. When new segements are to be allocated find a node with enough space and shrink it to account for newly occupied memory. Later when a segment is freed, collase joined node together.&lt;/dd>
&lt;/dl>
&lt;p>Some allocation strategies&lt;/p>
&lt;ul>
&lt;li>Best fit: node with min size greater than required.&lt;/li>
&lt;li>Worst fit: node with max size greater than required. Basically largest node.&lt;/li>
&lt;li>First fit: first node greater than required. Greedy but fast.&lt;/li>
&lt;li>Next fit: Instead of searching from the start search from the next node of last allocation.&lt;/li>
&lt;/ul>
&lt;p>Other Approaches&lt;/p>
&lt;ul>
&lt;li>Segregated Allocator: Keeps a region of memory to allocate the most segments with the most frequent size and a separate block to keep segments with other sizes.&lt;/li>
&lt;li>Buddy Allocator: Only divides free segments in half. Simplifies the coallesing part.&lt;/li>
&lt;/ul>
&lt;h3 id="paging">Paging&lt;/h3>
&lt;p>Memory is divided in terms of &lt;em>&lt;strong>pages&lt;/strong>&lt;/em> with fixed sizes. Thus every address space is given a fixed amount of pages.&lt;/p>
&lt;h4 id="address-translation-1">Address Translation&lt;/h4>
&lt;p>Every address can be broken into 2 parts: Virtual page number and the byte offset.&lt;/p>
&lt;blockquote>
&lt;p>For example, for a 64-byte address space i.e. 6-bit addresses and 16 byte page-size we get the 2-bit VPN and 4-bit offset.&lt;/p>
&lt;/blockquote>
&lt;p>For a typical 32-bit address space with 4KB pages, the address is split into 20-bit VPN and 12-bit offset. This means $2^{20}$ VPN to PPN translation that the &lt;strong>Page Table&lt;/strong> will have to hold. This means for 4 bytes per &lt;strong>Page table entry&lt;/strong> a huge 4MB per process (400MB for 100 such processes). Thus the PgTable is stored in the memory somewhere.&lt;/p>
&lt;h4 id="page-table-entry">Page Table entry&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Valid bit&lt;/strong>: Valid VPN or not.&lt;/li>
&lt;li>&lt;strong>Protection bits&lt;/strong>: R/W permissions&lt;/li>
&lt;li>&lt;strong>Present bit&lt;/strong>: Whether present in memory or not.&lt;/li>
&lt;li>&lt;strong>Dirty bit&lt;/strong>: The page has been modified or not.&lt;/li>
&lt;li>&lt;strong>Reference bit&lt;/strong>: Tracks whether a page has been accessed.&lt;/li>
&lt;/ul>
&lt;h4 id="problems-with-paging">Problems with Paging&lt;/h4>
&lt;ol>
&lt;li>Too slow: The page table is stored in memory so for each memory access, 2 memory accesses are needed.&lt;/li>
&lt;li>Too large: The total size of the Page Table is so large it needs to be stored in the memory.&lt;/li>
&lt;/ol>
&lt;h4 id="faster-translations">Faster Translations&lt;/h4>
&lt;dl>
&lt;dt>Translation-Lookaside Buffer $(TLB)$&lt;/dt>
&lt;dd>Its part of the MMU and simply caches the most popular virtual-to-physical address translations to improve performance. It works as follows&lt;/dd>
&lt;/dl>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="n">VPN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">VPN_MASK&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nf">SHIFT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">Success&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TlbEntry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">TLB_Lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VPN&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Success&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// TLB Hit
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">CanAccess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TlbEntry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProtectBits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">Offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">VirtualAddress&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">OFFSET_MASK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">PhysAddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">TlbEntry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PFN&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">SHIFT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nf">AccessMemory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PhysAddr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nf">RaiseException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PROTECTION_FAULT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="c1">// TLB Miss
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">PTEAddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PTBR&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VPN&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PTE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">PTE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">AccessMemory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PTEAddr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PTE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Valid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nf">RaiseException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SEGMENTATION_FAULT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">CanAccess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PTE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProtectBits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="nf">RaiseException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PROTECTION_FAULT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="nf">TLB_Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VPN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PTE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PFN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PTE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProtectBits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="nf">RetryInstruction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>TLB hits are typically handled by the hardware. When TLB misses are when the process traps into the OS and it is fetched this way.&lt;/p>
&lt;p>To make sure a process has access to TLB entries relavent to it only, the TLB entries also carry a address space identifier unique to every process.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>VPN&lt;/th>
&lt;th>PFN&lt;/th>
&lt;th>valid&lt;/th>
&lt;th>prot&lt;/th>
&lt;th>ASID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>100&lt;/td>
&lt;td>1&lt;/td>
&lt;td>rwx&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="smaller-tables">Smaller Tables&lt;/h4>
&lt;p>Using Multi-level Page Tables to store the mappings instead of linear tables with exponentially more size. This works when the address space is used sparsely.&lt;/p>
&lt;h2 id="concurrency">Concurrency&lt;/h2>
&lt;h3 id="abstraction--threads-locks-and-cvs">Abstraction : Threads, Locks and CVs&lt;/h3>
&lt;dl>
&lt;dt>Threads&lt;/dt>
&lt;dd>A process can have multiple threads that can parallely execute while sharing the address space.
&lt;ul>
&lt;li>&lt;code>clone(&amp;amp;t)&lt;/code> : creates a new thread&lt;/li>
&lt;li>&lt;code>join(&amp;amp;t)&lt;/code> : waits for thread to join&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Locks&lt;/dt>
&lt;dd>Only simple instructions available on the instruction set is executed atomically by the threads. Therefore to ensure atomicity while updating shared data structures a &lt;strong>lock&lt;/strong> is used.
&lt;ul>
&lt;li>&lt;code>lock(&amp;amp;m)&lt;/code> : acquires the lock is available or else blocks till available&lt;/li>
&lt;li>&lt;code>unlock(&amp;amp;m)&lt;/code> : releases the lock&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h4 id="ways-to-create-locks">Ways to create Locks&lt;/h4>
&lt;ul>
&lt;li>Controlling Interrupts : Whenever lock is acquired disable interrupts and resume them when released. Dangerous as can&amp;rsquo;t trust the programmer to use fairly.&lt;/li>
&lt;li>Test and Set(Atomic Exchange) : &lt;code>test-and-set&lt;/code> instruction in the instruction set to ensure atomicity, used to implement a spin-waiting lock. Very inefficient.&lt;/li>
&lt;li>Compare and swap&lt;/li>
&lt;li>Load-linked and store-conditional&lt;/li>
&lt;li>Fetch and add&lt;/li>
&lt;li>Yielding on fail: All the above implemented spinlocks. Simply yielding on failing to acquire performs better.&lt;/li>
&lt;li>Waiting Queues to maintain fairness&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>Conditional variables&lt;/dt>
&lt;dd>A flag that wait for acquiring a lock till it is signaled by another process.
&lt;ul>
&lt;li>&lt;code>wait(&amp;amp;cv, &amp;amp;m)&lt;/code> : Waits for conditional variable cv and releases the lock.&lt;/li>
&lt;li>&lt;code>signal(&amp;amp;cv)&lt;/code> : First to acquire the lock and be waiting on cv will execute&lt;/li>
&lt;li>&lt;code>broadcast(&amp;amp;cv)&lt;/code> : all waiting threads are scheduled once&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>Semaphores&lt;/dt>
&lt;dd>Hybrid of locks and conditional variables in one object that maintains an internal state of number of active threads.
&lt;ul>
&lt;li>&lt;code>sem_wait(&amp;amp;s)&lt;/code> : Waits for a Semaphore&lt;/li>
&lt;li>&lt;code>sem_post(&amp;amp;s)&lt;/code> : releases one semaphore&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h2 id="persistence">Persistence&lt;/h2>
&lt;h3 id="abstraction--file-systems">Abstraction : File Systems&lt;/h3></description></item></channel></rss>