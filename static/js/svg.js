/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var svg = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,16],$V3=[1,18],$V4=[1,22],$V5=[1,20],$V6=[1,21],$V7=[5,11,31],$V8=[1,26],$V9=[7,17,23,24,30],$Va=[7,17,21,23,24,30],$Vb=[1,51],$Vc=[17,24],$Vd=[7,17,19,21,23,24,30],$Ve=[21,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,";":7,"identifier":8,"ASSIGN":9,"expression":10,"SHOW":11,"html_exp":12,"bin_op":13,"primary_expression":14,"const":15,"(":16,")":17,"node":18,"{":19,"children":20,"}":21,"edge":22,":":23,",":24,"SVG":25,"attributes":26,"shape":27,"SHAPE":28,"=":29,"BIN_OP":30,"IDENTIFIER":31,"NUMBER":32,"STRING":33,"exp_list":34,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",9:"ASSIGN",11:"SHOW",16:"(",17:")",19:"{",21:"}",23:":",24:",",25:"SVG",28:"SHAPE",29:"=",30:"BIN_OP",31:"IDENTIFIER",32:"NUMBER",33:"STRING"},
productions_: [0,[3,2],[4,2],[4,3],[6,3],[6,2],[10,1],[10,3],[10,1],[14,1],[14,3],[14,1],[12,1],[12,4],[20,3],[20,5],[18,4],[18,4],[27,1],[22,1],[26,3],[26,5],[13,1],[8,1],[15,1],[15,1],[15,2],[15,4],[15,3],[34,3],[34,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        code.push([""]);
        let new_script = document.createElement("script");
        new_script.innerHTML = code.map(
            e => e.join(" ")
        ).join("\n");
        document.body.appendChild(new_script);
        return "";
    
break;
case 4:

        code.push(["let", $$[$0-2], "=", $$[$0]]);
    
break;
case 5:

        code.push(["document.getElementById(\""+reuse+"\").outerHTML = ", JSON.stringify($$[$0])]);
    
break;
case 6:

        let toHTML = (t) => {
            let attr_str = Object.keys(t.attributes).map(k => {
                if ( typeof t.attributes[k] === 'string'
                  || t.attributes[k] instanceof String ) {
                    return k+"="+t.attributes[k];
                } else if ( typeof t.attributes[k] === 'number'
                  || t.attributes[k] instanceof Number ) {
                    return k+"=\""+t.attributes[k]+"\"";
                } else {
                    let p = t.attributes[k];
                    let res = k+"=\"M "+p[0][0]+" "+p[0][1];
                    for (let i=1;i<p.length;i+=2) {
                        res += " Q "+p[i][0]+" "+p[i][1];
                        res += " "+p[i+1][0]+" "+p[i+1][1];
                    }
                    res += "\"";
                    return res;
                }
            }).reduce((acc, elem) => acc + " " + elem, "");
            let child_str = t.children.map(toHTML).reduce(
                (acc, elem) => acc + "\n" + elem, "\n");
            if (t.tag === "svg" )
                return "<"+t.tag+" "+attr_str+">"+child_str+"</"+t.tag+">";
            else
                return "<"+t.tag+" "+attr_str+"/>"+child_str;
        };
        this.$ = toHTML($$[$0]);
    
break;
case 7:

        this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
    
break;
case 8: case 9: case 12: case 19:

        this.$ = $$[$0];
    
break;
case 10: case 28:

        this.$ = $$[$0-1];
    
break;
case 11:

        this.$ = "\"+"+$$[$0]+"+\"";
    
break;
case 13:

        $$[$0-3].children = $$[$0-3].children.concat($$[$0-1]);
        this.$ = $$[$0-3];
    
break;
case 14:

        let transform1 = (t) => {
            if (t.tag === "rect") {
                t.attributes.x += $$[$0-2][0];
                t.attributes.y += $$[$0-2][1];
            } else if (t.tag === "line") {
                t.attributes.x1 += $$[$0-2][0];
                t.attributes.y1 += $$[$0-2][1];
                t.attributes.x2 += $$[$0-2][0];
                t.attributes.y2 += $$[$0-2][1];
            } else if (t.tag === "circle") {
                t.attributes.cx += $$[$0-2][0];
                t.attributes.cy += $$[$0-2][1];
            } else if (t.tag === "path") {
                t.attributes.d = t.attributes.d.map(
                    e => [e[0]+$$[$0-2][0], e[1]+$$[$0-2][1]]
                );
            }
            t.children = t.children.map(transform1);
            return t;
        };
        this.$ = [transform1($$[$0])];
    
break;
case 15:

        let transform2 = (t) => {
            if (t.tag === "rect") {
                t.attributes.x += $$[$0-2][0];
                t.attributes.y += $$[$0-2][1];
            } else if (t.tag === "line") {
                t.attributes.x1 += $$[$0-2][0];
                t.attributes.y1 += $$[$0-2][1];
                t.attributes.x2 += $$[$0-2][0];
                t.attributes.y2 += $$[$0-2][1];
            } else if (t.tag === "circle") {
                t.attributes.cx += $$[$0-2][0];
                t.attributes.cy += $$[$0-2][1];
            } else if (t.tag === "path") {
                t.attributes.d = t.attributes.d.map(
                    e => [e[0]+$$[$0-2][0], e[1]+$$[$0-2][1]]
                );
            }
            t.children = t.children.map(transform2);
            return t;
        };
        this.$ = $$[$0-4];
        this.$.push(transform2($$[$0]));
    
break;
case 16:

        this.$ = {
            tag: "svg",
            attributes: {
                xmlns: "http://www.w3.org/2000/svg",
                width: "100%",
                viewBox: "\"0 0 " + $$[$0-1].width + " " + $$[$0-1].height+"\""
            },
            children: []
        };
    
break;
case 17:

        this.$ = {
            tag: $$[$0-3],
            attributes: $$[$0-1],
            children: []
        };
    
break;
case 18: case 22: case 23: case 25:

        this.$ = yytext;
    
break;
case 20:

        this.$ = {};
        this.$[$$[$0-2]] = $$[$0];
    
break;
case 21:

        this.$ = $$[$0-4];
        this.$[$$[$0-2]] = $$[$0];
    
break;
case 24:

        this.$ = Number(yytext);
    
break;
case 26:

        this.$ = [];
    
break;
case 27:

        this.$ = [$$[$0-2]];
    
break;
case 29:

        this.$ = [$$[$0-2], $$[$0]];
    
break;
case 30:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
}
},
table: [{3:1,4:2,6:3,8:4,11:$V0,31:$V1},{1:[3]},{5:[1,7],6:8,8:4,11:$V0,31:$V1},{7:[1,9]},{9:[1,10]},{8:17,10:11,12:12,14:13,15:15,16:$V2,18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},o([7,9,17,23,24,29,30],[2,23]),{1:[2,1]},{7:[1,23]},o($V7,[2,2]),{8:17,10:24,12:12,14:13,15:15,16:$V2,18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},{7:[2,5],13:25,30:$V8},o($V9,[2,6]),o($V9,[2,8]),o($Va,[2,12],{19:[1,27]}),o($V9,[2,9]),{8:17,10:28,12:12,14:13,15:15,16:$V2,17:[1,29],18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6,34:30},o($V9,[2,11]),{16:[1,31]},{16:[1,32]},o($V9,[2,24]),o($V9,[2,25]),{16:[2,18]},o($V7,[2,3]),{7:[2,4],13:25,30:$V8},{8:17,14:33,15:15,16:$V2,31:$V1,32:$V5,33:$V6},o([16,31,32,33],[2,22]),{8:17,10:36,12:12,14:13,15:15,16:$V2,18:14,20:34,22:35,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},{13:25,17:[1,37],24:[1,38],30:$V8},o($V9,[2,26]),{17:[1,39],24:[1,40]},{8:42,26:41,31:$V1},{8:42,26:43,31:$V1},o($V9,[2,7]),{21:[1,44],24:[1,45]},{23:[1,46]},{13:25,23:[2,19],30:$V8},o($V9,[2,10]),{8:17,10:48,12:12,14:13,15:15,16:$V2,17:[1,47],18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},o($V9,[2,28]),{8:17,10:49,12:12,14:13,15:15,16:$V2,18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},{17:[1,50],24:$Vb},{29:[1,52]},{17:[1,53],24:$Vb},o($Va,[2,13]),{8:17,10:36,12:12,14:13,15:15,16:$V2,18:14,22:54,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},{12:55,18:14,25:$V3,27:19,28:$V4},o($V9,[2,27]),o($Vc,[2,29],{13:25,30:$V8}),o($Vc,[2,30],{13:25,30:$V8}),o($Vd,[2,16]),{8:56,31:$V1},{8:17,10:57,12:12,14:13,15:15,16:$V2,18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},o($Vd,[2,17]),{23:[1,58]},o($Ve,[2,14]),{29:[1,59]},o($Vc,[2,20],{13:25,30:$V8}),{12:60,18:14,25:$V3,27:19,28:$V4},{8:17,10:61,12:12,14:13,15:15,16:$V2,18:14,25:$V3,27:19,28:$V4,31:$V1,32:$V5,33:$V6},o($Ve,[2,15]),o($Vc,[2,21],{13:25,30:$V8})],
defaultActions: {7:[2,1],22:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip whitespace*/
break;
case 1:return 25;
break;
case 2:return 28;
break;
case 3:return 11;
break;
case 4:return 31;
break;
case 5:return 33;
break;
case 6:return 32;
break;
case 7:return 9;
break;
case 8:return 30;
break;
case 9:return 16;
break;
case 10:return 17;
break;
case 11:return 29;
break;
case 12:return 24;
break;
case 13:return 23;
break;
case 14:return 7;
break;
case 15:return 19;
break;
case 16:return 21;
break;
case 17:return '[';
break;
case 18:return ']';
break;
case 19:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:svg\b)/,/^(?:(rect|line|circle|path))/,/^(?:show\b)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:["]([^"\\\n]|\\.|\\\n)*["])/,/^(?:(-)?[0-9]+(\.[0-9]+)?)/,/^(?::=)/,/^(?:(\+|-|\*|\/))/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


// if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
// exports.parser = svg;
// exports.Parser = svg.Parser;
// exports.parse = function () { return svg.parse.apply(svg, arguments); };
// exports.main = function commonjsMain (args) {
//     if (!args[1]) {
//         console.log('Usage: '+args[0]+' FILE');
//         process.exit(1);
//     }
//     var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
//     return exports.parser.parse(source);
// };
// if (typeof module !== 'undefined' && require.main === module) {
//   exports.main(process.argv.slice(1));
// }
// }

var reuse = "";
var code = [];
var svgs = document.getElementsByClassName("svg-box");
var parse = function () { return svg.parse.apply(svg, arguments); };
for(let i=0;i<svgs.length;i++){
    reuse = svgs[i].lastElementChild.id;
    code = [];
    svgs[i].lastElementChild.innerHTML = parse(svgs[i].lastElementChild.innerHTML);
}