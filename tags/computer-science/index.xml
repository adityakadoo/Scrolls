<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Science on Scrolls</title><link>https://adityakadoo.github.io/Scrolls/tags/computer-science/</link><description>Recent content in Computer Science on Scrolls</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Aug 2022 12:27:03 +0530</lastBuildDate><atom:link href="https://adityakadoo.github.io/Scrolls/tags/computer-science/index.xml" rel="self" type="application/rss+xml"/><item><title>C++</title><link>https://adityakadoo.github.io/Scrolls/cp/cpp/</link><pubDate>Sat, 20 Aug 2022 12:27:03 +0530</pubDate><guid>https://adityakadoo.github.io/Scrolls/cp/cpp/</guid><description>Basic Utilities Initializer lists int values[] {1, 2, 3}; std::vector&amp;lt;int&amp;gt; v {1, 2, 4, 8, 16}; std::vector&amp;lt;std::string&amp;gt; cities { &amp;#34;Berlin&amp;#34;, &amp;#34;New York&amp;#34;, &amp;#34;London&amp;#34;, &amp;#34;Braunschweig&amp;#34;, &amp;#34;Cairo&amp;#34;, &amp;#34;Cologne&amp;#34; }; std::complex&amp;lt;double&amp;gt; c{4.0,3.0}; // equivalent to c(4.0,3.0) Range-based for loops Looping through a container for (auto&amp;amp; elem : vec) { elem *= 3; } Looping through an initializer list for (int i : {1, 2, 3, 4, 5}) { std::cout&amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; } Lambda functions int x=0; int y=42; auto f1 = [=, &amp;amp;y] (std::string s) { cout&amp;lt;&amp;lt;s&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; x++; // not very effective y++; // super effective } auto f2 = [=] (std::string s) { cout&amp;lt;&amp;lt;s&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; x++; // not very effective y++; // not very effective } auto f3 = [&amp;amp;] (std::string s) { cout&amp;lt;&amp;lt;s&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; x++; // super effective y++; // super effective } STL Data types Pair std::pair&amp;lt;T1, T2&amp;gt; p(e1,e2); Operation Effect Complexity make_pair(e1,e2) Returns a pair using types and values of e1 and e2 $\mathcal{O}(1)$ p.</description></item><item><title>Automata Theory</title><link>https://adityakadoo.github.io/Scrolls/courses/automata_theory/</link><pubDate>Fri, 19 Aug 2022 17:00:34 +0530</pubDate><guid>https://adityakadoo.github.io/Scrolls/courses/automata_theory/</guid><description>Resources Hopcrot-Motwani-Ullman Central Concepts Alphabets An alphabet $ (\sum) $ is a finite nonempty set of symbols.
$ \sum= ${$1, 0$}$ $ $ \sum = ${$a,b,&amp;hellip;,z$}$ $ Strings A string $(w)$ is a finite sequence of symbols chosen from $ \sum $.
Empty String The empty string $(\epsilon)$ is a string with zero symbols.
Length of a String $(|w|)=$ #Symbols in $w$
$|\epsilon|=0$
Powers of Alphabets $\sum^k=$ {$w:|w|=k$} $\sum^+=\sum^1\cup\sum^2\cup&amp;hellip;$ $\sum^*=\sum^+\cup$ { $\epsilon$ } $\sum^0=$ {$\epsilon$}</description></item><item><title>Operating Systems</title><link>https://adityakadoo.github.io/Scrolls/courses/operating_systems/</link><pubDate>Fri, 19 Aug 2022 10:31:05 +0530</pubDate><guid>https://adityakadoo.github.io/Scrolls/courses/operating_systems/</guid><description>Processes Signals</description></item></channel></rss>