<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Math on Scrolls</title><link>https://adityakadoo.github.io/Scrolls/tags/math/</link><description>Recent content in Math on Scrolls</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>aditya1449kadoo@gmail.com (Aditya Kadoo)</managingEditor><webMaster>aditya1449kadoo@gmail.com (Aditya Kadoo)</webMaster><lastBuildDate>Fri, 25 Aug 2023 16:05:24 +0530</lastBuildDate><atom:link href="https://adityakadoo.github.io/Scrolls/tags/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Game Theory</title><link>https://adityakadoo.github.io/Scrolls/courses/game_theory/</link><pubDate>Fri, 25 Aug 2023 16:05:24 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/courses/game_theory/</guid><description>&lt;h2 id="central-concepts">Central Concepts&lt;/h2>
&lt;h3 id="game">Game&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game&lt;/strong>
: It is a formal representation of the &lt;em>strategic&lt;/em> interaction between &lt;em>players&lt;/em>&lt;/li>
&lt;li>&lt;strong>Actions&lt;/strong>
: &lt;em>Choices&lt;/em> available to players&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong>
: &lt;em>Mapping&lt;/em> from state of the game to set of valid actions&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Normal Form&lt;/strong>, &lt;strong>Extensive Form&lt;/strong>, &lt;strong>Static&lt;/strong>, &lt;strong>Dynamic&lt;/strong>, &lt;strong>Repeated&lt;/strong>, &lt;strong>Stochastic&lt;/strong>, etc. are different kinds of games&lt;/p>
&lt;/blockquote>
&lt;h3 id="game-theory">Game Theory&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game Theory&lt;/strong>
: It is the formal study of strategic interactions between player, who are &lt;em>rational&lt;/em> and &lt;em>intelligent&lt;/em>&lt;/li>
&lt;li>&lt;strong>Rational Player&lt;/strong>
: A player who always picks the action that &lt;em>maximizes&lt;/em> their &lt;em>utility&lt;/em>&lt;/li>
&lt;li>&lt;strong>Intelligent Player&lt;/strong>
: A player who knows the rules of the game &lt;em>perfectly&lt;/em> and can pick the best action considering that there are other rational and intelligent players in the game&lt;/li>
&lt;li>&lt;strong>Common Knowledge&lt;/strong>
: A &lt;em>fact&lt;/em> is common knowledge if,
&lt;ul>
&lt;li>all players know the fact&lt;/li>
&lt;li>all players know that all players know the fact&lt;/li>
&lt;li>all players know that all players know that all players know the fact&lt;/li>
&lt;li>$\dots$ ad infinitum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="chess-example">Chess Example&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Game situations&lt;/strong>($H$)
: Set of all finite sequence $(x_0, x_1,x_2,&amp;hellip;,x_k)$ of board positions such that,
&lt;ul>
&lt;li>$x_0$ is the opening board position&lt;/li>
&lt;li>$x_k\rightarrow x_{k+1}$
&lt;ul>
&lt;li>$k$ even $\implies$ single action of $W$&lt;/li>
&lt;li>$k$ odd $\implies$ single action of $B$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong> for $W$($s_W$)
: Function $s_W$ that associates every game situation $(x_0,x_1,x_2,&amp;hellip;,x_k)\in H$, where $k$ is even, with a board position $x_{k+1}$ such that the move $x_k\rightarrow x_{k+1}$ is a single valid move for $W$&lt;/li>
&lt;li>&lt;strong>Strategy&lt;/strong> for $B$($s_B$)
: Defined similarly as above&lt;/li>
&lt;li>&lt;strong>Outcome&lt;/strong>
: Determined by a pair of $(s_W, s_B)$. Could be one of the following for chess,
&lt;ul>
&lt;li>$W$ wins: $W$ captures $B$ king&lt;/li>
&lt;li>$B$ wins: $B$ captures $W$ king&lt;/li>
&lt;li>Draw: Both players agree to draw&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Winning Strategy&lt;/strong> for $W$($s_W^\ast$)
: A strategy such that $\forall s_B$, the outcome for $(s_W^\ast,s_B)$ is a win for $W$&lt;/li>
&lt;li>&lt;strong>Draw Guaranteeing Strategy&lt;/strong> for $W$($s_W^\prime$)
: A strategy such that $\forall s_B$, the outcome for $(s_W^\prime, s_B)$ is either a win for $W$ or a draw.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : In chess, one and only one of the following statements is true&lt;/p>
&lt;ul>
&lt;li>$s_W^\ast$ exists&lt;/li>
&lt;li>$s_B^\ast$ exists&lt;/li>
&lt;li>$s_W^\prime$ and $s_B^\prime$ exist&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="normal-form-games">Normal Form Games&lt;/h2>
&lt;h3 id="pure-strategies">Pure Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Static Game&lt;/strong> $\langle N, \{S_i|i\in N\}, \{u_i | i\in N\} \rangle$&lt;/dt>
&lt;dd>A game where player interact only once&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>&lt;strong>Set of players&lt;/strong>
: $N =\{1,2,\dots,n\}$&lt;/li>
&lt;li>&lt;strong>Set of Strategies for $i$&lt;/strong>
: $s_i\in S_i$&lt;/li>
&lt;li>&lt;strong>Strategy profile&lt;/strong>
: $s=(s_1,s_2,\dots,s_n)\in S$&lt;/li>
&lt;li>&lt;strong>Set of strategy profiles&lt;/strong>
: $S=\times_{i\in N}S_i$&lt;/li>
&lt;li>&lt;strong>Strategy profile w/o $i$&lt;/strong>
: $s_{-i}=(s_1,\dots,s_{i-1},s_{s+1},\dots,s_n)$&lt;/li>
&lt;li>&lt;strong>Utility function for player $i$&lt;/strong>
: $u_i:S\rightarrow \R$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Finite Game&lt;/strong> : A static game where $\forall i\in N,\ S_i$ is finite&lt;/p>
&lt;/blockquote>
&lt;h4 id="dominance">Dominance&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Strictly Dominated Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i,\ \exists s_i\in S_i,\ \forall s_{-i}\in S_{-i},\ u_i(s_i, s_{-i})&amp;gt;u_i(s_i^\prime,s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominated Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i,\ \exists s_i\in S_i,\ \forall s_{-i}\in S_{-i},\ u_i(s_i, s_{-i})\ge u_i(s_i^\prime,s_{-i})$ and $\exists \tilde s_{-i}\in S_{-i},\ u_i(s_i, \tilde s_{-i}) &amp;gt; u_i(s_i^\prime, \tilde s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Strictly Dominant Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i, \forall s_i\in S_i-\{s_i^\prime\},\ s_i$ is strictly dominated by $s_i^\prime$&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominant Strategy&lt;/strong>&lt;/dt>
&lt;dd>$s_i^\prime\in S_i, \forall s_i\in S_i-\{s_i^\prime\},\ s_i$ is weakly dominated by $s_i^\prime$&lt;/dd>
&lt;/dl>
&lt;h4 id="equilibria">Equilibria&lt;/h4>
&lt;h5 id="dominant-strategy-equilibrium">Dominant Strategy Equilibrium&lt;/h5>
&lt;dl>
&lt;dt>&lt;strong>Strictly Dominant Strategy Equilibrium [SDSE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_1^\ast,s_2^\ast,\dots,s_n^\ast)$, such that $\forall i\in N,\ s_i^\ast$ is a strictly dominant strategy&lt;/dd>
&lt;dt>&lt;strong>Weakly Dominant Strategy Equilibrium [WDSE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_1^\ast,s_2^\ast,\dots,s_n^\ast)$, such that $\forall i\in N,\ s_i^\ast$ is a weakly dominant strategy&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Rational player never play dominated strategies.&lt;/strong>
So it can be useful to remove such strategies.
Strictly dominated strategies can be removed in any order.
Weakly dominated strategies&amp;rsquo; order of removal matters as it can remove important outcomes.&lt;/p>
&lt;/blockquote>
&lt;h5 id="nash-equilibrium">Nash Equilibrium&lt;/h5>
&lt;dl>
&lt;dt>&lt;strong>Pure Strategy Nash Equilibrium [PSNE]&lt;/strong>&lt;/dt>
&lt;dd>A strategy profile $(s_i^\ast, s_{-i}^\ast)$ such that $\forall i\in N$ and $\forall s_i\in S_i$,
$$
u_i(s_i^\ast, s_{-i}^\ast)\ge u_i(s_i,s_{-i}^\ast)
$$&lt;/dd>
&lt;dt>&lt;strong>Best Response&lt;/strong> ($B_i(s_{-i})$)&lt;/dt>
&lt;dd>$B_i(s_{-i}) = \{s_i\in S_i|\ \forall s_i^\ast\in S_i,\ u_i(s_i,s_{-i})\ge u_i(s_i^\ast,s_{-i})\}$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>For a PSNE $(s_i^\ast,s_{-i}^\ast)$, $s_i^\ast\in B_i(s_{-i}^\ast),\ \forall i\in N$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SDSE $\implies$ WDSE $\implies$ PSNE&lt;/p>
&lt;/blockquote>
&lt;h4 id="risk-aversion">Risk Aversion&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Max-Min Strategy&lt;/strong> ($s_i^{\max\min}$)&lt;/dt>
&lt;dd>$s_i^{\max\min}\in\arg\max_{s_i\in S_i}\min_{s_{-i}\in S_i}u_i(s_i,s_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Max-Min value&lt;/strong> ($\underline v_i$)&lt;/dt>
&lt;dd>$\underline v_i = \max_{s_i\in S_i}\min_{s_{-i}\in S_i}u_i(s_i,s_{-i})$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>$u_i(s_i^{\max\min},s_{-i})\ge\underline v_i,\ \ \forall s_{-i}\in S_{-i}$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $s_i^\ast$ is dominant strategy $\implies$ $s_i^\ast$ is a max-min strategy&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Every PSNE $s^\ast=(s_1^\ast,\dots,s_n^\ast)$ satisfies $u_i(s^\ast)\ge\underline v_i,\ \forall i\in N$&lt;/p>
&lt;/blockquote>
&lt;h4 id="elimination-of-dominated-strategies">Elimination of dominated strategies&lt;/h4>
&lt;h5 id="preservation-of-max-min-value">Preservation of Max-Min value&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For NFG $G$, let $s_j^\prime\in S_j$ be a dominated strategy. Let $G^\prime$ be the residual game after removing $s_j^\prime$. Then, the maxmin value of $j$ in $G^\prime$ is equal to the maxmin value in $G$&lt;/p>
&lt;/blockquote>
&lt;h5 id="preservation-of-psne">Preservation of PSNE&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For NFG $G$ and $G^\prime$ after elimination of &lt;strong>any&lt;/strong> strategy, if $s^\ast$ is a PSNE in $G$ and survives in $G^\prime$, then $s^\ast$ is a PSNE in $G^\prime$ too.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>No new PSNE if eliminated strategy is dominated.
Old PSNE could be killed.&lt;/p>
&lt;/blockquote>
&lt;h4 id="matrix-games">Matrix Games&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Matrix Game&lt;/strong>&lt;/dt>
&lt;dd>A NFG $\langle N, \{S_i|i\in N\}, \{u_i|i\in N\}\rangle$ with $N=\{1,2\}$ and $u_1(s)+u_2(s)=0,\ \forall$ strategy profile $s\in S$&lt;/dd>
&lt;dt>&lt;strong>Utility Matrix&lt;/strong> ($U$)&lt;/dt>
&lt;dd>$[U]_{ij} = u_1(s_i,s_j)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Player 2&amp;rsquo;s MaxMin value is negative of the column-wise MinMax of this matrix.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Saddle Point&lt;/strong>&lt;/dt>
&lt;dd>An element in the matrix that is maximum in it&amp;rsquo;s column and minimum in it&amp;rsquo;s row&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : In a Matrix game, $(s_1^\ast,s_2^\ast)$ is a saddle point $\iff$ $(s_1^\ast,s_2^\ast)$ is a PSNE&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Max-Min Value&lt;/strong> ($\underline v$)&lt;/dt>
&lt;dd>$\underline v = \max_{s_1\in S_1}\min_{s_2\in S_2}U(s_1, s_2)$&lt;/dd>
&lt;dt>&lt;strong>Min-Max Value&lt;/strong> ($\bar v$)&lt;/dt>
&lt;dd>$\bar v = \min_{s_2\in S_2}\max_{s_1\in S_1}U(s_1, s_2)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Lemma&lt;/strong> : For matrix games, $\bar v\ge\underline v$&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>PSNE Theorem&lt;/strong> : A Matrix game has a PSNE $\iff$ $\bar v=\underline v=U(s_1^\ast, s_2^\ast)$ where $s_1^\ast$ and $s_2^\ast$ are $\max\min$ and $\min\max$ strategies for player 1 and 2 respectively. $(s_1^\ast, s_2^\ast)$ is that PSNE.&lt;/p>
&lt;/blockquote>
&lt;h3 id="mixed-strategies">Mixed Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Mixed Strategy Set&lt;/strong> ($\Delta A$)&lt;/dt>
&lt;dd>$\Delta A = \{p:A\to[0,1]^{|A|}\ |\ \sum_{a\in A}p(a) = 0\}$&lt;/dd>
&lt;dt>&lt;strong>Mixed Strategy&lt;/strong> ($\sigma_i$)&lt;/dt>
&lt;dd>For player $i$, $\sigma_i:S_i\to[0,1]$ such that $\sum_{s_i\in S_i}\sigma_i(s_i)=1$&lt;/dd>
&lt;dt>&lt;strong>Utility&lt;/strong> ($u_i(\sigma_i,\sigma_{-i})$)&lt;/dt>
&lt;dd>$u_i(\sigma_i,\sigma_{-i}) = \sum_{s_1\in S_1}\sum_{s_2\in S_2}\cdots\sum_{s_n\in S_n}\prod_{j=1}^n\sigma_j(s_j)\cdot u_i(s_1,s_2,\dots,s_n)$&lt;/dd>
&lt;/dl>
&lt;h4 id="mixed-strategy-nash-equilibrium">Mixed Strategy Nash Equilibrium&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>MSNE&lt;/strong>&lt;/dt>
&lt;dd>A mixed strategy profile $(\sigma_i^\ast, \sigma_{-i}^\ast)$ such that,
$$
u_i(\sigma_i^\ast, \sigma_{-i}^\ast)\ge u_i(\sigma_i, \sigma_{-i}^\ast),\ \forall\sigma_i\in\Delta S_i,\ \forall i\in N
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PSNE $\implies$ MSNE&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $(\sigma_i^\ast, \sigma_{-i}^\ast)$ is an MSNE $\iff$ $\forall s_i\in S_i,\ \forall i\in N$,
$$ u_i(\sigma_i^\ast,\sigma_{-i}^\ast)\ge u_i(s_i,\sigma_{-i}^\ast)$$&lt;/p>
&lt;/blockquote>
&lt;h4 id="msne-characterization-theorem">MSNE Characterization Theorem&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Support for Mixed Strategy&lt;/strong> ($\delta(\sigma_i)$)&lt;/dt>
&lt;dd>$\delta(\sigma_i)=\{s_i\in S_i|\ \sigma_i(s_i)&amp;gt;0\}$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : $(\sigma_i^\ast,\sigma_{-i}^\ast)$ is a MSNE $\iff$ $\forall i\in N$,&lt;/p>
&lt;ul>
&lt;li>$u_i(s_i,\sigma_{-i}^\ast)$ is identical $\forall s_i\in \delta(\sigma_i^\ast)$&lt;/li>
&lt;li>$u_i(s_i,\sigma_{-i}^\ast)\ge u_i(s_i^\prime, \sigma_{-i}^\ast),\ \forall s_i\sube \delta(\sigma_i^\ast),\ s_i^\prime \not\in\delta(\sigma_i^\ast)$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>Maximizing w.r.t. a distribution $\Leftrightarrow$ Whole probability mass at max
$$ \max_{\sigma_i\in\Delta S_i}u_i(\sigma_i,\sigma_{-i})=\max_{s_i\in S_i}u_i(s_i,\sigma_{-i}) $$&lt;/li>
&lt;li>If $(\sigma_i^\ast, \sigma_{-i}^\ast)$ is an MSNE, then
$$ u_i(\sigma_i^\ast,\sigma_{-i}^\ast)=\max_{\sigma_i\in\Delta S_i}u_i(\sigma_i,\sigma_{-i}^\ast)=\max_{s_i\in S_i}u_i(s_i,\sigma_{-i}^\ast)=\max_{s_i\in\delta(\sigma_i)}u_i(s_i,\sigma_{-i}^\ast) $$&lt;/li>
&lt;/ul>
&lt;h4 id="algorithm-for-msne">Algorithm for MSNE&lt;/h4>
&lt;p>For every support profile $X_1\times X_2\times\cdots X_n$ where $X_i\sube S_i$, solve the following feasibility program to get the MSNE,
$$
w_i = \sum_{s_{-i}\in S_{-i}}(\prod_{j\not =i}\sigma_j(s_j))\cdot u_i(s_i,s_{-i}),\ \forall s_i\in X_i,\ \forall i\in N\\
w_i \ge \sum_{s_{-i}\in S_{-i}}(\prod_{j\not =i}\sigma_j(s_j))\cdot u_i(s_i,s_{-i}),\ \forall s_i\in S_i\backslash X_i,\ \forall i\in N\\
\sigma_j(s_j)\ge0,\ \forall s_j\in S_j,\ \forall j\in N\\
\sum_{s_j\in X_j}\sigma_j(s_j)=1,\ \forall j\in N
$$&lt;/p>
&lt;ul>
&lt;li>Not linear unless $n=2$&lt;/li>
&lt;li>No poly-time algorithm for general game&lt;/li>
&lt;li>This is PPAD-complete (Polynomial Parity Argument on Directed graphs)&lt;/li>
&lt;/ul>
&lt;h4 id="existence-of-msne">Existence of MSNE&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Finite Game&lt;/strong>&lt;/dt>
&lt;dd>A game with finite number of players and each player has a finite set of strategies&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Every finite game has a (mixed) Nash equilibrium.&lt;/p>
&lt;/blockquote>
&lt;h3 id="correlated-strategies">Correlated Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Correlated Strategy&lt;/strong> ($\pi$)&lt;/dt>
&lt;dd>A mapping $\pi:S_1\times S_2\times\cdots\times S_n\rightarrow[0,1]$ such that $\sum_{s\in S}\pi(s)=1$&lt;/dd>
&lt;dt>&lt;strong>Correlated Equilibrium&lt;/strong>&lt;/dt>
&lt;dd>A correlated strategy $\pi$ such that,
$$
\sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i, s_{-i})\ge \sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i^\prime, s_{-i}),\ \forall s_i,s_i^\prime\in S_i,\ \forall i\in N
$$&lt;/dd>
&lt;/dl>
&lt;p>To find a CE following linear equations must be solved,
$$
\sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i, s_{-i})\ge \sum_{s_{-i}\in S_{-i}}\pi(s_i,s_{-i})\cdot u_i(s_i^\prime, s_{-i}),\ \forall s_i,s_i^\prime\in S_i,\ \forall i\in N\\
\pi(s)\ge 0,\ \forall s\in S,\ \sum_{s\in S}\pi(s)=1
$$&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : For every MSNE $\sigma^\ast$ there exists a CE $\pi^\ast$&lt;/p>
&lt;/blockquote>
&lt;h2 id="perfect-information-games">Perfect Information Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Perfect Information Extensive Form Games&lt;/strong> [PIEFG] $\langle N, A, H, X, P, (u_i)_{i\in N}\rangle$&lt;/dt>
&lt;dd>A game where players interact one after the other&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>&lt;strong>Set of players&lt;/strong>: $N$&lt;/li>
&lt;li>&lt;strong>Set of all possible actions&lt;/strong>: $A$&lt;/li>
&lt;li>&lt;strong>Set of all sequences of actions&lt;/strong>: $H$
&lt;ul>
&lt;li>empty history $\varnothing\in H$&lt;/li>
&lt;li>if $h\in H$ and any sub-sequence $h^\prime$ of $h$ starting at the root then $h^\prime\in H$&lt;/li>
&lt;li>$h=(a^{(0)},a^{(1)},\dots,a^{(T-1)})$ is &lt;strong>terminal&lt;/strong> if $\nexists a^{(T)}$ such that $(a^{(0)},a^{(1)},\dots,a^{(T)})\in H$&lt;/li>
&lt;li>&lt;strong>Set of terminal histories&lt;/strong>: $Z\sube H$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Action set selection function&lt;/strong>: $X:H\backslash Z\rightarrow 2^A$&lt;/li>
&lt;li>&lt;strong>Player function&lt;/strong>: $P:H\backslash Z\rightarrow N$&lt;/li>
&lt;li>&lt;strong>Utility&lt;/strong>: $u_i:Z\rightarrow\R$&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>&lt;strong>Strategy&lt;/strong> ($S_i$)&lt;/dt>
&lt;dd>$S_i = \times_{\{h\in H:P(h)=i\}}X(h)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PSNE of PIEFG doesn&amp;rsquo;t always give credible threats for equilibrium&lt;/p>
&lt;/blockquote>
&lt;h3 id="subgame-perfection">Subgame Perfection&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Subgame&lt;/strong>&lt;/dt>
&lt;dd>Subtree of a PIEFG $G$ rooted at a history $h$. It is the &lt;em>restriction&lt;/em> of $G$ to the descendants of $h$.&lt;/dd>
&lt;dt>&lt;strong>Subgame Perfect Nash Equilibrium&lt;/strong> [SPNE]&lt;/dt>
&lt;dd>A strategy profile $s\in S$ such that $\forall$ subgame $G^\prime$ of $G$, the restriction of $s$ to $G^\prime$ is a PSNE of $G^\prime$&lt;/dd>
&lt;/dl>
&lt;h3 id="backward-induction-algorithm">Backward Induction Algorithm&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">BACK_IND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">history&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="p">),[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">best_util&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INT_MIN&lt;/span> &lt;span class="c1"># -ve infinity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">util_at_child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BACK_IND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">history&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">))[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">util_at_child&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">best_util&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">best_util&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">util_at_child&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">best_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">action&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">best_util&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">best_action&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="spne-limitations">SPNE Limitations&lt;/h3>
&lt;p>&lt;strong>Advantages&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>SPNE is guaranteed to exist in finite PIEFG&lt;/li>
&lt;li>An SPNE is a PSNE&lt;/li>
&lt;li>The algorithm to find SPNE is simple&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Disadvantages&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>The whole tree needs to be parsed&lt;/li>
&lt;li>Cognitive limit of real players may prohibit playing SPNE&lt;/li>
&lt;/ol>
&lt;h2 id="imperfect-information-games">Imperfect Information Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Imperfect Information Extensive Form Games&lt;/strong> [IIEFG] $\langle N,A,H,X,P,(u_i)_{i\in N},\{I_i:i\in N\}\rangle$&lt;/dt>
&lt;dd>A PIEFG with added condition that for every $i\in N,I_i=(I_i^1,I_i^2,\dots,I_i^{k(i)})$ is a partition of $\{h\in H\backslash Z:P(h)=i\}$ with the property that $X(h)=X(h^\prime)$ and $P(h)=P(h^\prime)=i$, whenever $\exists j, h,h^\prime\in I_i^j$
&lt;ul>
&lt;li>&lt;strong>Information Set&lt;/strong> : $I_i^j\in I_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h3 id="behavioural-strategies">Behavioural Strategies&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Strategy Set&lt;/strong> ($S_i$)&lt;/dt>
&lt;dd>For player $i$,
$$S_i = \times_{j=1}^{j=k(i)}X(I_i^j)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>In NFGs mixed strategies randomized over pure strategies.
In EFGs randomization can be done in different ways,&lt;/p>
&lt;ul>
&lt;li>randomize over the strategies defined at the beginning of the game.&lt;/li>
&lt;li>randomize over the action at an information set: behavioural strategy.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Behavioural Strategies&lt;/strong> ($b_i$)&lt;/dt>
&lt;dd>For player $i$,
$$b_i:I_i\to\{\Delta X(I_i^j)\ |\ I_i^j\in I_i\}$$&lt;/dd>
&lt;/dl>
&lt;h3 id="equivalence">Equivalence&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Equivalence&lt;/strong>&lt;/dt>
&lt;dd>A mixed strategy $\sigma_i$ and a behavioural strategy $b_i$ of a player $i$ in an IIEFG are equivalent is $\forall \zeta_{-i}$, mixed/behavioural strategy of other players and for every vertex $x$ in the game,
$$
\rho(x;\sigma_i,\zeta_{-i}) = \rho(x;b_i,\zeta_{-i})
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>It is enough to check only at the leaf nodes.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $\sigma_i$ and $b_i$ are equivalent then $\forall\zeta_{-i}$,
$$
u_j(\sigma_i,\zeta_{-i})=u_j(b_i,\zeta_{-i})\forall j\in N
$$&lt;/p>
&lt;p>&lt;strong>Corollary&lt;/strong> : Let $\sigma$ and $b$ be equivalent i.e. $\sigma_i$ and $b_i$ are equivalent $\forall i\in N$, then $u_i(\sigma)=u_i(b)$&lt;/p>
&lt;/blockquote>
&lt;p>Equivalence doesn&amp;rsquo;t hold if the players are forgetful.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Consider an IIEFG such that every vertex has at least two actions. Every behavioral strategy has an equivalent mixed strategy for a player iff each information set of that player intersects every path emanating from the root at most once.&lt;/p>
&lt;/blockquote>
&lt;h3 id="perfect-recall">Perfect Recall&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Perfect Recall&lt;/strong>&lt;/dt>
&lt;dd>For every $I_i^j$ of player $i$ and every pair of vertices $x,y\in I_i^j$, if the decision vertices of $i$ are $x_i^1,x_i^2,\dots,x_i^L=x$ and $y_i^1,y_i^2,\dots,y_i^{L^\prime}=y$ respectively for the two paths from the root to $x$ and $y$ then
&lt;ul>
&lt;li>$L = L^\prime$,&lt;/li>
&lt;li>$x^l_i,y^l_i\in I_i^k$ for some $k$,&lt;/li>
&lt;li>$a_i(x_i^l\to x_i^{l+1})=a_i(y_i^l\to y_i^{l+1}),\ \forall l=1,2,\dots,L-1$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Perfect Recall Game&lt;/strong>&lt;/dt>
&lt;dd>A game where every player has a &lt;strong>perfect recall&lt;/strong>&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>In a perfect recall game every behavioural strategy has equivalent mixed strategy.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>$S_i^\prime(x)$&lt;/dt>
&lt;dd>The set of pure strategies of player $i$ at which he chooses actions leading to $x$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $i$ is a player with perfect recall and $x$ and $x^\prime$ are the two vertices in the same information set of i, then $S_i^\ast(x) = S_i^\ast(x^\prime)$.&lt;/p>
&lt;p>&lt;strong>Kuhn Theorem&lt;/strong> : In every IIEFG, if $i$ is a player with perfect recall then for every mixed strategy of $i$, there exists a behavioural strategy.&lt;/p>
&lt;/blockquote>
&lt;h3 id="bayesian-beliefs">Bayesian Beliefs&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Beliefs&lt;/strong> ($\mu_i^j:I_i^j\to[0,1]$)&lt;/dt>
&lt;dd>Distribution over an information set such that $\sum_{x\in I_i^j}u_i^j(x)=1$&lt;/dd>
&lt;dt>&lt;strong>Bayesian Belief&lt;/strong> ($\mu_i = \{\mu_i^1,\mu_i^2,\dots,\mu_i^{k(i)}\}$)&lt;/dt>
&lt;dd>When derived from a behavioral strategy $\sigma$ such that, $\forall x\in I_i^j,\forall j\in \{1, 2, \dots, k(i)\}$,
$$\mu_i^j(x) = P_\sigma(x) / \sum_{y\in I_i^j}P_\sigma(y)$$&lt;/dd>
&lt;dt>&lt;strong>Sequantial Rationality&lt;/strong>&lt;/dt>
&lt;dd>A strategy $\sigma_i$ at an information set $I_i^j$ is sequentially rational given $\sigma_{-i}$ and partial belief $\mu_i^j$ if,
$$\sum_{x\in I_i^j}\mu_i^j(x)u(\sigma_i,\sigma_{-i}|x)\ge\sum_{x\in I_i^j}\mu_i^j(x)u(\sigma_i^\prime,\sigma_{-i}|x)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Sequential Rationality is a refinement on Nash Equilibrium.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: In PIEFGs, a behavioral strategy profile $\sigma$ is an SPNE iff the tuple $(\sigma, \hat\mu)$ is sequentially rational.&lt;/p>
&lt;p>Here $\hat\mu$ is the degenrate distribution since in PIEFGs all information sets are singleton.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Perfect Bayesian Equilibrium&lt;/strong> $(\sigma, \mu)$&lt;/dt>
&lt;dd>$\forall i\in N$,
&lt;ul>
&lt;li>$\mu_i$ is Bayesian w.r.t. $\sigma$&lt;/li>
&lt;li>$\sigma_i$ is sequentially rational given $\sigma_{-i}$ and $\mu_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;h2 id="bayesian-games">Bayesian Games&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>Bayesian Games&lt;/strong> $\langle N, \{\Theta_i:i\in N\}, P, \{\Gamma_\theta:\theta\in(\times_{i\in N}\Theta_i)\}\rangle$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$N$ : Set of players&lt;/li>
&lt;li>$\Theta_i$ : Set of types of player $i$&lt;/li>
&lt;li>$P$ : Common prior distribution over $\Theta=\times_{i\in N}\Theta_i$&lt;/li>
&lt;li>$\Gamma_\theta$ : NFG for type profile $\theta\in\Theta$ i.e. $\Gamma_\theta = \langle N,\{A_i(\theta):i\in N\},\{u_i(\theta):i\in N\}\rangle$ where $u_i:A\times\Theta\to\R$ and $A=\times_{i\in N}A_i\ \forall\theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Strategy&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Pure: $s_i:\Theta_i\to A_i$&lt;/li>
&lt;li>Mixed: $\Theta_i\to\Delta A_i$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Ex-ante Utility&lt;/strong>&lt;/dt>
&lt;dd>Expected utility before observing own types,
$$u_i(\sigma) = \sum_{\theta\in\Theta}P(\theta)u_i(\sigma(\theta);\theta)\\
\ \\
\sum_{\theta\in\Theta}P(\theta)\sum_{(a_1,a_2,a_3,\dots,a_n)\in A}\prod_{j\in N}\sigma_j(\theta_j)[a_j]u_i(a_1,\dots,a_n;\theta_1,\dots,\theta_n)$$&lt;/dd>
&lt;dt>&lt;strong>Ex-interim Utility&lt;/strong>&lt;/dt>
&lt;dd>Expected utility after observing one&amp;rsquo;s own type,
$$u_i(\sigma|\theta_i)=\sum_{\theta_{-i}\in\Theta_{-i}}P(\theta_{-i}|\theta_i)u_i(\sigma(\theta);\theta)$$&lt;/dd>
&lt;/dl>
&lt;h3 id="equilibria-1">Equilibria&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Ex ante Equilibrium&lt;/strong> $(\sigma^\star,P)$&lt;/dt>
&lt;dd>Nash Equilibrium,
$$u_i(\sigma^\star_i,\sigma^\star_{-i})\ge u_i(\sigma^\prime_i, \sigma^\star_{-i}),\forall\sigma_i^\prime,\forall i\in N$$&lt;/dd>
&lt;dt>&lt;strong>Ex interim Equilibrium&lt;/strong> $(\sigma^\star, P)$&lt;/dt>
&lt;dd>Byesian Equilibrium,
$$u_i(\sigma_i^\star(\theta_i),\sigma_{-i}^\star|\theta_i)\ge u_i(\sigma_i^\prime(\theta_i),\sigma_{-i}^\star|\theta_i),\ \forall\sigma^\prime_i,\forall\theta_i\in\Theta_i,\forall i\in N$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong>: In a finite Bayesian Game, a strategy profile is Bayeisan Equilibrium iff it is a Nash Equilibrium.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: Every finite Bayesian game has a Bayesian Equilibrium.&lt;/p>
&lt;/blockquote>
&lt;h2 id="mechanism-design">Mechanism Design&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>General Model&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$N$ - set of players&lt;/li>
&lt;li>$X$ - set of outcomes&lt;/li>
&lt;li>$\Theta_i$ - set of private information of player $i\in N$
&lt;ul>
&lt;li>$\theta_i\in\Theta_i$ - a type of player $i$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type can manifest in preferences over the outcomes in different ways:
&lt;ul>
&lt;li>Ordinal - $\theta_i$ defines an ordering over the outcomes&lt;/li>
&lt;li>Cardinal - an utility function maps the an (outcomes, type) pair to real numbers
&lt;ul>
&lt;li>$u_i:X\times\Theta_i\to\R$ : private value model&lt;/li>
&lt;li>$u_i:X\times\Theta\to\R$ : interdependent value model&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Social Choice Function&lt;/strong> ($f$)&lt;/dt>
&lt;dd>$f:\times_{i\in N}\Theta_i\to X$&lt;/dd>
&lt;dt>&lt;strong>Indirect Mechanism&lt;/strong> $\langle M_1,M_2,\dots,M_N,g\rangle$&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$M_i$ is the message space of player $i$&lt;/li>
&lt;li>$g:M_1\times M_2\times\dots\times M_N\to X$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Direct Mechanism&lt;/strong> $\langle\Theta_1,\dots,\Theta_N, g\rangle$&lt;/dt>
&lt;dd>An indirect mechanism such that $M_i=\Theta_i,\ \forall i\in N$&lt;/dd>
&lt;dt>&lt;strong>Weak Dominance&lt;/strong>&lt;/dt>
&lt;dd>For a message $m_i$ of player $i$ at $\theta_i$,
$$u_i(m_i,m_{-i})\ge u_i(m_i^\prime,m_{-i}),\ \forall m_i^\prime,\ \forall m_{-i}$$&lt;/dd>
&lt;dt>&lt;strong>Dominant Strategy Implementable [DSI]&lt;/strong>&lt;/dt>
&lt;dd>An indirect mechanism that implements a SCF through dominance with,
&lt;ul>
&lt;li>$\exist s_i:\Theta_i\to M_i$ such that $s_i(\theta_i)$ is a dominant strategy for player $i$ at $\theta_i,\ \forall\theta_i\ \forall i\in N$&lt;/li>
&lt;li>$g(s_1(\theta_1),\dots,s_N(\theta_N))=f(\theta),\ \forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Dominant Strategy Incentive Compatible [DSIC]&lt;/strong>&lt;/dt>
&lt;dd>A direct mechanism such that,
$$u_i(g(\theta_i,\theta_{-i}),\theta_i)\ge u_i(g(\theta_i^\prime,\theta_{-i}),\theta_i),\ \forall\theta_{-i},\theta_i^\prime,\theta_i,\ \forall i\in N$$
&lt;blockquote>
&lt;p>&lt;strong>Revelation Principle&lt;/strong>: An indirect mechanism is DSI $\implies$ it is DSIC.&lt;/p>
&lt;/blockquote>
&lt;/dd>
&lt;dt>&lt;strong>Bayesian Implementable&lt;/strong>&lt;/dt>
&lt;dd>An indirect mechanism that implements a SCF through Bayesian Equilibrium with,
&lt;ul>
&lt;li>$\exist, s_i:\Theta_i\to M_i$ such that $s_i(\theta_i)$ maximises ex-interim utility for player $i$ at $\theta_i,\ \forall\theta_i\ \forall i\in N$, i.e.,
$$
\mathbb{E}[u_i(g(s_i(\theta_i),s_{-i}(\theta_{-i})),\theta_i)\ |\ \theta_i]\ge\mathbb{E}[u_i(g(m_i^\prime,s_{-i}(\theta_{-i})),\theta_i)\ |\ \theta_i],\ \forall m_i^\prime,\theta_i,\ \forall i\in N
$$&lt;/li>
&lt;li>$g(s_i(\theta_i),s_{-i}(\theta_{-i}))=f(\theta),\ \forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>An indirect mechanism is DSI $\implies$ it is Bayesian implementable.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Bayeisan Incentive Compatible [BIC]&lt;/strong>&lt;/dt>
&lt;dd>A direct mechanism such that,
$$\mathbb{E}[u_i(f(\theta_i,\theta_{-i}),\theta_i)\ |\ \theta_i]\ge\mathbb{E}[u_i(f(\theta_i^\prime,\theta_{-i}),\theta_i)\ |\ \theta_i],\ \forall \theta_{-i},\theta_i^\prime,\theta_i,\ \forall i\in N$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>An indirect mechanism is Bayesian Implementable $\implies$ it is BIC.&lt;/p>
&lt;/blockquote>
&lt;h3 id="arrows-impossibility-result">Arrow&amp;rsquo;s Impossibility Result&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Individual Preferences&lt;/strong> ($R_i$)&lt;/dt>
&lt;dd>$\mathcal{R}$ is the set of ordering relations over a set of alternatives $A=\{a_1,a_2,\dots,a_m\}$. Every player has a preference $R_i\in\mathcal{R},\ \forall i\in N$ such that,
&lt;ul>
&lt;li>Completeness: $\forall a,b\in A$, $aR_ib$ or $bR_ia$&lt;/li>
&lt;li>Reflexivity: $\forall a\in A$, $aR_ia$&lt;/li>
&lt;li>Transitivity: $\forall a,b,c\in A$, $aR_ib\And bR_ic\implies aR_ic$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Linear Preferences&lt;/strong> ($P_i$)&lt;/dt>
&lt;dd>$R_i$ such that $\forall a,b\in A$, $aR_ib\And bR_ia\implies a=b$
&lt;ul>
&lt;li>Set of all linear preferences is called $\mathcal{P}$.&lt;/li>
&lt;li>Any arbitrary preference ordering $R_i$ can be decomposed into,
&lt;ul>
&lt;li>Asymmetric: $P_i$&lt;/li>
&lt;li>Symmetric: $I_i$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Arrovian Social Welfare Function [ASWF]&lt;/strong> ($F:\mathcal{R}^n\to\mathcal{R}$)&lt;/dt>
&lt;dd>Capture the collective ordering of the society given the individual preferences.
&lt;ul>
&lt;li>$F(R)=F(R_1,R_2,\dots,R_N)$&lt;/li>
&lt;li>$\hat F(R)$ is the asymmetric part of $F(R)$&lt;/li>
&lt;li>$\bar F(R)$ is the symmetric part of $F(R)$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Weak Pareto [WP]&lt;/strong>&lt;/dt>
&lt;dd>F such that $\forall a,b\in A,\forall R\in \mathcal{R}^n$
$$\forall i\in N, aP_ib\implies a\hat F(R)b$$&lt;/dd>
&lt;dt>&lt;strong>Strong Pareto [SP]&lt;/strong>&lt;/dt>
&lt;dd>F such that $\forall a,b\in A,\forall R\in \mathcal{R}^n$
$$\forall i\in N, aR_ib\ \And\ \exist j\in N, aP_jb\implies a\hat F(R)b$$&lt;/dd>
&lt;dt>&lt;strong>Agreement&lt;/strong> ($R|_{a,b}$)&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$R_i,R_i^\prime\in \mathcal{R}$ agree on $a,b\in A$ for agent $i$ iff,
$$
aP_ib\iff aP_i^\prime b\ ||\ bP_ia\iff bP_i^\prime a\ ||\ aI_ib\iff aI_i^\prime b
$$&lt;/li>
&lt;li>This means $R_i|_z=R_i^\prime|_z$ where $z=\{a,b\}$&lt;/li>
&lt;li>When this holds for every $i\in N$, $R|_z=R^\prime|_z$ where $z=\{a,b\}$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Independence of Irrelevant Alternatives [IIA]&lt;/strong>&lt;/dt>
&lt;dd>$F$ such that $\forall a,b\in A,\ \forall R,R^\prime\in\mathcal{R}^n$ and $z=\{a,b\}$,
$$R|_z=R^\prime|_z\implies F(R)|_z=F(R^\prime)|_z$$&lt;/dd>
&lt;dt>&lt;strong>Dictatorship&lt;/strong> $F^d$&lt;/dt>
&lt;dd>An ASWF where for an agent $d$, $F^d(R) = R_d$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Arrow&amp;rsquo;s Theorem&lt;/strong>: For $|A|\ge3$ if $F$ is $IIA$ and $WP$ then $F$ must be dictatorial.&lt;/p>
&lt;/blockquote>
&lt;h3 id="social-choice-functions">Social Choice Functions&lt;/h3>
&lt;dl>
&lt;dt>&lt;strong>Social Choice Function [SWF]&lt;/strong> $f:\mathcal{P}^n\to A$&lt;/dt>
&lt;dd>Here $\mathcal{P}$ is the set of all linear preference orderings and $A$ is the set of alternatives&lt;/dd>
&lt;/dl>
&lt;p>One SCF is voting where the scoring is done by any one of the following methods and the winner is the alternative with the highest score:&lt;/p>
&lt;ol>
&lt;li>Plurality: $(1,0,\dots,0,0)$&lt;/li>
&lt;li>Veto: $(1,1,\dots,1,0)$&lt;/li>
&lt;li>Borda: $(m-1,m-2,\dots,1,0)$&lt;/li>
&lt;li>Harmonic: $(1,1/2,\dots,1/(m-1),1/m)$&lt;/li>
&lt;li>$k$-approval: $(1,\cdots (k\text{ times})\cdots,1,0,\dots,0)$&lt;/li>
&lt;li>Plurality with runoff (eliminations)&lt;/li>
&lt;li>Maxmin: $\text{score}(a)=\min_y|\{i:aP_iy\}|$&lt;/li>
&lt;li>Copeland: Score is number of wins in pairwise elections&lt;/li>
&lt;/ol>
&lt;dl>
&lt;dt>&lt;strong>Condorcet Winner&lt;/strong>&lt;/dt>
&lt;dd>A candidate that defeats all other candidates in pairwise election&lt;/dd>
&lt;dt>&lt;strong>Condorcet Consistent&lt;/strong>&lt;/dt>
&lt;dd>A voting rule that always selects the &lt;em>Condorcet winner&lt;/em> when one exists.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>None out of Plurality, Copeland, Maxmin are Condorcet consistent.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Pareto Dominance&lt;/strong>&lt;/dt>
&lt;dd>An alternative $a$ is Pareto dominant over $b$ when $\forall i\in N,\ aP_ib$.&lt;/dd>
&lt;dt>&lt;strong>Pareto Efficiency [PE]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P\in \mathcal{P}^n$ and $\forall a\in A$, a is Pareto dominated $\implies f(P)\not ={a}$&lt;/dd>
&lt;dt>&lt;strong>Unanimity [UN]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P\in\mathcal{P}^n$ and $\exists a\in A$, $P_1(1)=P_2(1)=\dots=P_N(1)=a\implies f(P)=a$&lt;/dd>
&lt;dt>&lt;strong>Onto [ONTO]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall a\in A$, $\exists P^{(a)}\in\mathcal{P}^n$ where $f(P^{(a)})=a$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>PE $\implies$ UN $\implies$ ONTO&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Manipulability&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\exists i\in N$ and a profile $P\in\mathcal{P}^n$ such that $\exists P_i^\prime,\ f(P_i^\prime,P_{-i})P_if(P_i,P_{-i})$&lt;/dd>
&lt;dt>&lt;strong>Strategy-proof [SP]&lt;/strong>&lt;/dt>
&lt;dd>An SCF that is not manipulable by any player for any profile&lt;/dd>
&lt;dt>&lt;strong>Dominated Set&lt;/strong> ($D:A\times\mathcal{P}\to \mathcal{P}(A)$)&lt;/dt>
&lt;dd>$D(a,P_i)=\{b\in A:aP_ib\}$&lt;/dd>
&lt;dt>&lt;strong>Monotone [MONO]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P,P^\prime\in\mathcal{P}^n$ and $\exists a\in A$, $f(P)=a$ and $D(a,P_i)\sube D(a,P_i^\prime)\ \forall i\in N\implies f(P^\prime)=a$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : SP $\iff$ MONO.&lt;/p>
&lt;p>&lt;strong>Lemma&lt;/strong> : MONO+ONTO $\implies$ PE.&lt;/p>
&lt;p>&lt;strong>Corollary&lt;/strong> : SP+PE $\iff$ SP+UN $\iff$ SP+ONTO&lt;/p>
&lt;p>&lt;strong>Gareth and Satterthwaite Theorem&lt;/strong> : If $|A|\ge 3$ then SP+ONTO $\iff$ Dictatorial.&lt;/p>
&lt;/blockquote>
&lt;h3 id="domain-restrictions">Domain Restrictions&lt;/h3>
&lt;h4 id="single-peaked-preferences">Single Peaked Preferences&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Single Peaked Preferences&lt;/strong> ($\mathcal{S}$)&lt;/dt>
&lt;dd>Set of linear preferences $P$ w.r.t. a common order $&amp;lt;$ over the alternatives such that
&lt;ul>
&lt;li>$\forall b,c\in A,\ b&amp;lt;c\le P(1)\implies cPb$&lt;/li>
&lt;li>$\forall b,c\in A,\ P(1)\le b&amp;lt;c\implies bPc$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>From now onwards $f:\mathcal{S}^n\to A$&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Median Voter SCF&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\exists B=\{y_1, y_2,\dots,y_{n-1}\},\forall P\in\mathcal{S}^n,\ f(P)=\text{median}(B\cup\text{peaks}(P))$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Points in $B$ are called phantom peaks and these are independent of $P$.&lt;/p>
&lt;p>&lt;strong>Moulin&amp;rsquo;s Theorem&lt;/strong> : Every median voter SCF is SP.&lt;/p>
&lt;p>&lt;strong>Claim&lt;/strong> : Let $p_{\min}$ and $p_{\max}$ be the leftmost and rightmost peaks of $P$ according to $&amp;lt;$, then $f$ is PE $\iff\ f(P)\in[p_{\min},p_{\max}]$.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : SP $\implies$ MONO.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong> : If $f$ is SP then ONTO $\iff$ UN $\iff$ PE.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Anonimity [ANON]&lt;/strong>&lt;/dt>
&lt;dd>An SCF $f$ such that $\forall P$ and for all permutations of agents $\sigma$, $f(P^\sigma)=f(P)$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Moulin&amp;rsquo;s Theorem 2&lt;/strong> : $f$ is SP+ONTO+ANON $\iff$ $f$ is median voter SCF.&lt;/p>
&lt;/blockquote>
&lt;h4 id="task-allocation-domain">Task Allocation Domain&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Task Allocation SCFs&lt;/strong> ($f:T^n\to A$)&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Here $A=\{(a_1,a_2,\dots,a_n)\in [0,1]^n\ |\ \sum_{i=1}^na_i=1\}$.&lt;/li>
&lt;li>For $P\in T^n,\ f(P)=(f_1(P),f_2(P),\dots,f_n(P))$.&lt;/li>
&lt;li>Each player has a peak allocation $p_i=w/2c_i$ where the reward is given by $wt-c_i t^2$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Pareto Efficiency [PE]&lt;/strong>&lt;/dt>
&lt;dd>An SCF such that $\forall P\in T^n, \not\exists a\in A$,
$$
aR_if(P)\ \ \forall i\in N\\
aP_jf(P)\ \ \exists j\in N
$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Implications of Pareto Efficiency:&lt;/p>
&lt;ul>
&lt;li>If $\sum_{i=1}^np_i=1$ then $\forall i\in N, f_i(P)=p_i$&lt;/li>
&lt;li>If $\sum_{i=1}^np_i&amp;gt;1$ then $\forall i\in N, f_i(P)\ge p_i$&lt;/li>
&lt;li>If $\sum_{i=1}^np_i&amp;lt;1$ then $\forall i\in N, f_i(P)\le p_i$&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Serial Dictatorship&lt;/strong>&lt;/dt>
&lt;dd>Each agent gets their peak allocation except the last one which is given the leftover share.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Serial Dictatorship is not ANON since it is unfair to the last agent.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Proportional SCF&lt;/strong>&lt;/dt>
&lt;dd>Every agent is assigned a share that is $1/\sum_{i=1}^np_i$ times their peak allocation.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Proportional SCF is not SP.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Uniform Rule&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$\sum_{i=1}^np_i=1:f_i(P)=p_i$&lt;/li>
&lt;li>$\sum_{i=1}^np_i&amp;gt;1:f_i(P)=\max[p_i,\mu(P)]$ where $\mu$ solves $\sum_{i=1}^n\max[\mu,p_i]=1$&lt;/li>
&lt;li>$\sum_{i=1}^np_i&amp;lt;1:f_i(P)=\min[p_i,\lambda(P)]$ where $\lambda$ solves $\sum_{i=1}^n\min[\lambda,p_i]=1$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Sprumont Theorem&lt;/strong>: Uniform Rule is SP, ANON and PE.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: SCF in task allocation domain is SP, PE and ANON $\iff$ it is an uniform rule.&lt;/p>
&lt;/blockquote>
&lt;h4 id="quasi-linear-domain">Quasi-Linear Domain&lt;/h4>
&lt;dl>
&lt;dt>&lt;strong>Quasi-linear Payoff&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>Preferences are of the form $a\in A$&lt;/li>
&lt;li>Payments are defined for every player as $\pi=(\pi_1,\pi_2,\dots,\pi_n)\in\R^n$&lt;/li>
&lt;li>Utility of an agent $i$ depends on the outcome $(a,\pi)$ and their type $\theta_i\in\Theta_i$ as,
$$
u_i((a,\pi),\theta_i)=v_i(a,\theta_i)-\pi_i
$$&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dt>&lt;strong>Quasi-Linear Preferences&lt;/strong> $(f,p)$&lt;/dt>
&lt;dd>Has following components,
&lt;ol>
&lt;li>Allocation rule:
$$
f:\Theta_1\times\Theta_2\times\cdots\times\Theta_n\to A
$$&lt;/li>
&lt;li>Payment function: $p=(p_1,p_2,\dots,p_n)$ such that,
$$
p_i:\Theta_1\times\Theta_2\times\cdots\times\Theta_n\to\R
$$&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;p>Examples of Allocation rules:&lt;/p>
&lt;ul>
&lt;li>Constant rule: $f^c(\theta)=a\in A,\forall\theta\in\Theta$&lt;/li>
&lt;li>Dictatorial rule: $f^D(\theta)=\arg\max_{a\in A}v_d(a,\theta_d),\forall\theta\in\Theta$ and $\exists d\in N$&lt;/li>
&lt;li>Allocative efficiency / Utilitarian rule:
$$
f^{AE}(\theta) = \arg\max_{a\in A}\sum_{i\in N}v_i(a,\theta_i)
$$&lt;/li>
&lt;li>Affine Maximizer rule: When $\lambda_i\ge 0$ and not all zero,
$$
f^{AM}(\theta) = \arg\max_{a\in A}\left(\sum_{i\in N}\lambda_iv_i(a,\theta_i)+\kappa(a)\right)
$$&lt;/li>
&lt;li>Max-min / Egalitarian rule:
$$
f^{MM}(\theta) = \arg\max_{a\in A}\min_{i\in N}v_i(a,\theta_i)
$$&lt;/li>
&lt;/ul>
&lt;p>Examples of Payment functions:&lt;/p>
&lt;ul>
&lt;li>No deficit: $\sum_{i\in N}p_i(\theta)\ge 0,\forall\theta\in\Theta$&lt;/li>
&lt;li>No subsidy: $p_i(\theta)\ge 0,\forall\theta\in\Theta,\forall i\in N$&lt;/li>
&lt;li>Budget Balanced: $\sum_{i\in N}p_i(\theta) = 0,\forall\theta\in\Theta$&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>&lt;strong>Dominant Strategy Incentive Compatible [DSIC]&lt;/strong>&lt;/dt>
&lt;dd>An $(f,p)$ such that $\forall\theta_{-i}\in\Theta_{-i},\forall\theta_i,\tilde\theta_i\in\Theta_i,\forall i\in N$,
$$v_i(f(\theta_i,\theta_{-i}),\theta_i)-p_i(\theta_i,\theta_{-i})\ge v_i(f(\tilde\theta_i,\theta_{-i}),\theta_i)-p_i(\tilde\theta_i,\theta_{-i})$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>If $(f,p)$ is DSIC then for any $q$ defined as,
$$
q_i(\theta_i,\theta_{-i})=p_i(\theta_i,\theta_{-i})+h_i(\theta_{-i}),\ \forall\theta,\forall i\in N
$$
$(f,q)$ is also DSIC.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Pareto Optimal&lt;/strong>&lt;/dt>
&lt;dd>A mechanism $(f,p)$ such that $\forall\theta\in\Theta$ there does not exist $b\in A$ and payments $(\pi_1,\pi_2,\dots,\pi_n)$ with $\sum_{i\in N}\pi_i\ge \sum_{i\in N}p_i(\theta)$,
$$v_i(b,\theta_i)-\pi_i\ge v_i(f(\theta),\theta_i)-p_i(\theta)$$
with inequality being strict for some $i\in N$.&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Theorem&lt;/strong> : Pareto Optimal $\iff$ Allocatively efficient.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Groves Payment fucntion&lt;/strong>&lt;/dt>
&lt;dd>For agent $i\in N$ and an arbitrary $h_i:\Theta_{-i}\to\R$,
$$p_i^G(\theta_i,\theta_{-i}) = h_i(\theta_{-i})-\sum_{j\not ={i}}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)$$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>Groves payment functions implement the Allocatively efficiency allocation function.&lt;/p>
&lt;p>&lt;strong>Theorem&lt;/strong>: Groves mechanisms are DSIC.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Vickrey-Clarke-Groves Mechanism [VCG]&lt;/strong>&lt;/dt>
&lt;dd>Groves mechanism with $h_i(\theta_{-i})$ as,
$$h_i(\theta_{-i})=\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)\\
\ \\
p_i^{VCG}(\theta_i,\theta_{-i})=\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)-\sum_{j\in N,\ j\not={i}}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)\\
\ \\
u_i^{VCG}(\theta_i,\theta_{-i}) = \sum_{j\in N}v_j(f^{AE}(\theta_i,\theta_{-i}),\theta_j)-\max_{a\in A}\sum_{j\in N,\ j\not={i}}v_j(a,\theta_j)$$&lt;/dd>
&lt;dt>&lt;strong>Combinatorial Allocation&lt;/strong>&lt;/dt>
&lt;dd>&lt;ul>
&lt;li>$M=\{1,2,\dots,m\}$ : set of objects&lt;/li>
&lt;li>$\Omega=2^M$ : set of bundles&lt;/li>
&lt;li>$\theta_i:\Omega\to\R$ : type/values of player $i$ such that $\theta_i(s)\ge 0,\ \forall s\in\Omega$ and $\theta_i(a)=\theta_i(a_i)$&lt;/li>
&lt;li>$N=\{1,2,\dots,n\}$ : set of agents&lt;/li>
&lt;li>$A=\{(a_0,a_1,\dots,a_n)\ |\ a_i\in\Omega,a_i\cap a_j=\empty\ \forall i\not={j},\bigcup_{i=0}^na_i=\Omega\}$ : set of allocations where $a_0$ is the set of unallocated items&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Claim&lt;/strong>: The payment of an agent that gets no goods in VCG mechanism is zero.&lt;/p>
&lt;/blockquote>
&lt;dl>
&lt;dt>&lt;strong>Individually Rational&lt;/strong>&lt;/dt>
&lt;dd>A mechanism $(f,p)$ such that $v_i(f(\theta),\theta_i)-p_i(\theta)\ge 0,\ \forall\theta\in\Theta,\ \forall i\in N$&lt;/dd>
&lt;/dl>
&lt;blockquote>
&lt;p>&lt;strong>Claim&lt;/strong>: In allocation of goods VCG mechanism is Individually rational.&lt;/p>
&lt;/blockquote></description></item><item><title>Algorithms</title><link>https://adityakadoo.github.io/Scrolls/cp/algorithms/</link><pubDate>Fri, 02 Sep 2022 09:46:58 +0530</pubDate><author>aditya1449kadoo@gmail.com (Aditya Kadoo)</author><guid>https://adityakadoo.github.io/Scrolls/cp/algorithms/</guid><description>&lt;h2 id="numerical-methods-3">Numerical Methods (3)&lt;/h2>
&lt;h3 id="ternary-search">Ternary Search&lt;/h3>
&lt;p>We are given a funtion $f(x)$ which is unimodal on an interval $[l,r]$. This means it has one of the following two behaviours:&lt;/p>
&lt;ol>
&lt;li>The function strictly increases first, reaches maximum and then strictly decreases.&lt;/li>
&lt;li>The function strictly decreases first, reaches minimum and then strictly increases.&lt;/li>
&lt;/ol>
&lt;p>Here we assume the first case and find the maximum of $f(x)$ on the interval $[l,r]$.&lt;/p>
&lt;h4 id="implementation">Implementation&lt;/h4>
&lt;h5 id="iterative">Iterative&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="recursive">Recursive&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ternary_max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof">Proof&lt;/h4>
&lt;p>$$n=r-l+1$$&lt;/p>
&lt;h5 id="basis">Basis&lt;/h5>
&lt;p>If $n=1$ then $a_0$ is the only and the maximum element&lt;/p>
&lt;h5 id="induction">Induction&lt;/h5>
&lt;p>Assuming our algorithm works for all arrays of size $\le n$. Consider an array $a$ with size $n+1$.
$$m_1 = l+\lfloor\dfrac{r-l}{3}\rfloor$$
$$m_2 = r-\lfloor\dfrac{r-l}{3}\rfloor$$&lt;/p>
&lt;ul>
&lt;li>If $a_{m_1}&amp;lt;a_{m_2}$ then the maximum can&amp;rsquo;t lie before $m_1$ therefore the max of $a[m_1+1:r]$ is the result.&lt;/li>
&lt;li>If $a_{m_1}&amp;gt;a_{m_2}$ then the maximum can&amp;rsquo;t lie after $m_2$ therefore the max of $a[l:m_2-1]$ is the result.&lt;/li>
&lt;li>If $a_{m_1}=a_{m_2}$ then the maximum can&amp;rsquo;t lie beyond $m_1$ or $m_2$ therefore the max of $a[m_1+1:m_2]$ is the result.&lt;/li>
&lt;/ul>
&lt;p>In every case the new search space is of size less than $n+1$ and our algorithm will work on it.&lt;/p>
&lt;h4 id="analysis">Analysis&lt;/h4>
&lt;p>$$
T(n)=T(2n/3)+\mathcal{O}(1)
$$
Thus time complexity is $\mathcal O(\log n)$.&lt;/p>
&lt;h3 id="newtons-method-for-finding-roots">Newton&amp;rsquo;s method for finding roots&lt;/h3>
&lt;p>Used to find root of a function $f(x)$ on some interval $[a,b]$. It is assumed that $f$ is continuous and differentiable over this interval.&lt;/p>
&lt;h4 id="implementation-1">Implementation&lt;/h4>
&lt;h5 id="to-find-real-square-root-of-a-number">To find real square root of a number&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mf">1e-9&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">f1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="to-find-integer-part-of-square-root-of-a-number">To find integer part of square root of a number&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">decreased&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">decreased&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">decreased&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nx&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">nx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof-1">Proof&lt;/h4>
&lt;p>It converges towards the root with every iteration.&lt;/p>
&lt;p>$$
|x_{i+1}-\sqrt{n}|=|\dfrac{x_i+\frac{n}{x_i}}{2}-\sqrt{n}|=\dfrac{|(\sqrt{x_i}-\dfrac{\sqrt{n}}{\sqrt{x_i}})^2|}{2}\le|x_i-\sqrt{n}|
$$&lt;/p>
&lt;h4 id="analysis-1">Analysis&lt;/h4>
&lt;p>For $n$-digit precision requirement the complexity is $\mathcal O(n)$.&lt;/p>
&lt;h3 id="simpsons-formula">Simpson&amp;rsquo;s Formula&lt;/h3>
&lt;p>Used to calculate the integral of a funtion $f$ over the interval $[a,b]$.&lt;/p>
&lt;h4 id="implementation-2">Implementation&lt;/h4>
&lt;p>Here $f(x)$ is some pre-defined function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">#define N 1000*1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">integrate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{...};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="proof-2">Proof&lt;/h4>
&lt;p>Let $n$ be some natural number. We divide the integration segment $[a,b]$ into $2n$ equal parts:
$$
x_i=a+ih,\ i=0\dots2n,\\ h=\dfrac{b-a}{2n}
$$
Now we calculate the integral separately on each of the segments $[x_{2i-2},x_{2i}$, $i=1\dots n$ and then add all the values.&lt;/p>
&lt;p>So, suppose we consider the next segment $[x_{2i-2},x_{2i}]$, $i=1\dots n$. Replace the function $f(x)$ on it with a parabola $P(x)$ passing through 3 points $(x_{2i-2},x_{2i-1},x_{2i})$. Such a parabola always exists and is unique; it can be found analytically. For instance we could construct it using the Lagrange polynomial interpolation. The only remaining thing left to do is to integrate this polynomial. If you do this for a general function $f$, you receive a remarkably simple expression:
$$
\int_{x_{2i-2}}^{x_{2i}}f(x)dx\approx\int_{x_{2i-2}}^{x_{2i}}P(x)dx=(f(x_{2i-2})+4f(x_{2i-1})+f(x_{2i}))\frac{h}{3}
$$
Adding these values over all segments, we obtain the final Simpson&amp;rsquo;s formula:
$$
\int_a^bf(x)dx\approx(f(x_0)+4f(x_1)+2f(x_2)+\cdots+4f(x_{2N-1})+f(x_{2N}))\frac{h}{3}
$$&lt;/p>
&lt;h4 id="analysis-2">Analysis&lt;/h4>
&lt;p>Only depends on the number of divisions thus $\mathcal O(n)$.&lt;/p>
&lt;h2 id="dynamic-programming-4">Dynamic Programming (4)&lt;/h2>
&lt;h2 id="combinatorics-10">Combinatorics (10)&lt;/h2>
&lt;h2 id="data-structures-10">Data Structures (10)&lt;/h2>
&lt;h2 id="string-processing-12">String Processing (12)&lt;/h2>
&lt;h2 id="linear-algebra-4">Linear Algebra (4)&lt;/h2>
&lt;h2 id="geometry-23">Geometry (23)&lt;/h2>
&lt;h2 id="algebra-27">Algebra (27)&lt;/h2>
&lt;h2 id="graphs-44">Graphs (44)&lt;/h2>
&lt;h2 id="miscellaneous-12">Miscellaneous (12)&lt;/h2></description></item></channel></rss>